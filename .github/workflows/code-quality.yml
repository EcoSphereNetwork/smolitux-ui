name: Reusable Code Quality

on:
  workflow_call:
    inputs:
      python-versions:
        description: 'Python versions to test'
        required: false
        type: string
        default: '["3.9", "3.10", "3.11"]'
      enable-type-check:
        description: 'Enable type checking with mypy'
        required: false
        type: boolean
        default: true
      enable-style-check:
        description: 'Enable style checking with ruff and black'
        required: false
        type: boolean
        default: true
      enable-complexity-check:
        description: 'Enable complexity checking'
        required: false
        type: boolean
        default: true
      max-complexity:
        description: 'Maximum cyclomatic complexity'
        required: false
        type: number
        default: 10
      coverage-threshold:
        description: 'Minimum code coverage percentage'
        required: false
        type: number
        default: 80
      working-directory:
        description: 'Directory containing the Python project'
        required: false
        type: string
        default: '.'
    secrets:
      CODECOV_TOKEN:
        required: false
        description: 'Token for uploading coverage to Codecov'

jobs:
  quality:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python-versions) }}

    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev
      
      - name: Check code style
        if: inputs.enable-style-check
        run: |
          poetry run ruff check . --output-format=github
          poetry run black --check .
      
      - name: Check types
        if: inputs.enable-type-check
        run: poetry run mypy .
      
      - name: Check code complexity
        if: inputs.enable-complexity-check
        run: |
          poetry run python -m pip install radon
          poetry run radon cc . -a -nb --max-cc ${{ inputs.max-complexity }}
      
      - name: Run tests with coverage
        run: |
          poetry run pytest \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=${{ inputs.coverage-threshold }} \
            --doctest-modules \
            --junitxml=junit/test-results-${{ matrix.python-version }}.xml
      
      - name: Upload coverage to Codecov
        if: secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
      
      - name: Generate code quality report
        if: always()
        run: |
          echo "# Code Quality Report" > code_quality_report.md
          echo "## Test Results" >> code_quality_report.md
          poetry run coverage report >> code_quality_report.md
          echo "## Code Complexity" >> code_quality_report.md
          poetry run radon cc . -a -s >> code_quality_report.md
          echo "## Style Check Results" >> code_quality_report.md
          poetry run ruff check . --format=text >> code_quality_report.md
      
      - name: Upload code quality report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-report-${{ matrix.python-version }}
          path: code_quality_report.md