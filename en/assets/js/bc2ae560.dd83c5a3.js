"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4017],{4185:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"features/voice-control/component-integration","title":"Sprachsteuerung: Komponenten-Integration","description":"Diese Dokumentation beschreibt, wie die Sprachsteuerungsfunktionalit\xe4t in alle Smolitux-UI-Komponenten integriert wird. Sie enth\xe4lt detaillierte Anweisungen und Beispiele f\xfcr jede Komponente.","source":"@site/docs/features/voice-control/component-integration.md","sourceDirName":"features/voice-control","slug":"/features/voice-control/component-integration","permalink":"/smolitux-ui/en/docs/features/voice-control/component-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/docs/features/voice-control/component-integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"wikiSidebar","previous":{"title":"Zoom Barrierefreiheit","permalink":"/smolitux-ui/en/docs/accessibility/components/zoom"},"next":{"title":"Implementierungsleitfaden f\xfcr Sprachsteuerung in Smolitux-UI","permalink":"/smolitux-ui/en/docs/features/voice-control/implementation-guide"}}');var r=o(4848),i=o(8453);const a={},s="Sprachsteuerung: Komponenten-Integration",l={},c=[{value:"Inhaltsverzeichnis",id:"inhaltsverzeichnis",level:2},{value:"\xdcbersicht",id:"\xfcbersicht",level:2},{value:"Allgemeines Integrationsmuster",id:"allgemeines-integrationsmuster",level:3},{value:"Grundlegende Komponenten",id:"grundlegende-komponenten",level:2},{value:"Button",id:"button",level:3},{value:"Verwendungsbeispiel",id:"verwendungsbeispiel",level:4},{value:"Input",id:"input",level:3},{value:"Verwendungsbeispiel",id:"verwendungsbeispiel-1",level:4},{value:"Checkbox",id:"checkbox",level:3},{value:"Verwendungsbeispiel",id:"verwendungsbeispiel-2",level:4},{value:"Select",id:"select",level:3},{value:"Verwendungsbeispiel",id:"verwendungsbeispiel-3",level:4},{value:"Layout-Komponenten",id:"layout-komponenten",level:2},{value:"Container",id:"container",level:3},{value:"Card",id:"card",level:3},{value:"Feedback-Komponenten",id:"feedback-komponenten",level:2},{value:"Modal",id:"modal",level:3},{value:"Verwendungsbeispiel",id:"verwendungsbeispiel-4",level:4},{value:"Daten-Komponenten",id:"daten-komponenten",level:2},{value:"Table",id:"table",level:3},{value:"Verwendungsbeispiel",id:"verwendungsbeispiel-5",level:4},{value:"Chart-Komponenten",id:"chart-komponenten",level:2},{value:"LineChart",id:"linechart",level:3},{value:"Spezial-Komponenten",id:"spezial-komponenten",level:2},{value:"DatePicker",id:"datepicker",level:3},{value:"Komplexe Komponenten-Interaktionen",id:"komplexe-komponenten-interaktionen",level:2},{value:"Formulare",id:"formulare",level:3},{value:"Verwendungsbeispiel",id:"verwendungsbeispiel-6",level:4},{value:"Barrierefreiheit",id:"barrierefreiheit",level:2},{value:"Leistungsoptimierung",id:"leistungsoptimierung",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sprachsteuerung-komponenten-integration",children:"Sprachsteuerung: Komponenten-Integration"})}),"\n",(0,r.jsx)(n.p,{children:"Diese Dokumentation beschreibt, wie die Sprachsteuerungsfunktionalit\xe4t in alle Smolitux-UI-Komponenten integriert wird. Sie enth\xe4lt detaillierte Anweisungen und Beispiele f\xfcr jede Komponente."}),"\n",(0,r.jsx)(n.h2,{id:"inhaltsverzeichnis",children:"Inhaltsverzeichnis"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#%C3%BCbersicht",children:"\xdcbersicht"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#grundlegende-komponenten",children:"Grundlegende Komponenten"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#button",children:"Button"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#input",children:"Input"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#checkbox",children:"Checkbox"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#checkbox",children:"Radio"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#select",children:"Select"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#input",children:"Textarea"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#layout-komponenten",children:"Layout-Komponenten"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#container",children:"Container"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#container",children:"Grid"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#container",children:"Flex"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#card",children:"Card"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#feedback-komponenten",children:"Feedback-Komponenten"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modal",children:"Alert"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modal",children:"Toast"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modal",children:"Modal"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modal",children:"Dialog"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modal",children:"Drawer"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#feedback-komponenten",children:"Navigations-Komponenten"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modal",children:"Tabs"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modal",children:"Menu"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modal",children:"Breadcrumb"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#modal",children:"Pagination"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#daten-komponenten",children:"Daten-Komponenten"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#table",children:"Table"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#table",children:"List"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#table",children:"DataGrid"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#chart-komponenten",children:"Chart-Komponenten"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#linechart",children:"LineChart"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#linechart",children:"BarChart"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#linechart",children:"PieChart"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#linechart",children:"AreaChart"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#spezial-komponenten",children:"Spezial-Komponenten"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#datepicker",children:"DatePicker"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#datepicker",children:"TimePicker"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#datepicker",children:"ColorPicker"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#datepicker",children:"FileUpload"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#komplexe-komponenten-interaktionen",children:"Komplexe Komponenten-Interaktionen"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#formulare",children:"Formulare"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#formulare",children:"Dashboards"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#formulare",children:"Wizards"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#barrierefreiheit",children:"Barrierefreiheit"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#leistungsoptimierung",children:"Leistungsoptimierung"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\xfcbersicht",children:"\xdcbersicht"}),"\n",(0,r.jsxs)(n.p,{children:["Die Integration der Sprachsteuerung in Smolitux-UI-Komponenten erfolgt \xfcber das ",(0,r.jsx)(n.code,{children:"withVoiceControl"})," Higher-Order Component (HOC) und den ",(0,r.jsx)(n.code,{children:"useVoiceControl"})," Hook. Jede Komponente wird mit standardm\xe4\xdfigen Sprachbefehlen konfiguriert und kann benutzerdefinierte Befehle akzeptieren."]}),"\n",(0,r.jsx)(n.h3,{id:"allgemeines-integrationsmuster",children:"Allgemeines Integrationsmuster"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\nimport { ComponentName, ComponentProps } from '@smolitux/core';\n\nexport type VoiceComponentProps = ComponentProps & VoiceControlProps;\n\nconst VoiceComponentBase: React.FC<VoiceComponentProps> = ({\n  onVoiceCommand,\n  ...props\n}) => {\n  const handleVoiceCommand = (command: string) => {\n    // Komponenten-spezifische Befehlsverarbeitung\n    \n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return <ComponentName {...props} />;\n};\n\n// Standardbefehle f\xfcr die Komponente\nconst defaultCommands = ['befehl1', 'befehl2'];\n\nexport const VoiceComponent = withVoiceControl(VoiceComponentBase, defaultCommands);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"grundlegende-komponenten",children:"Grundlegende Komponenten"}),"\n",(0,r.jsx)(n.h3,{id:"button",children:"Button"}),"\n",(0,r.jsx)(n.p,{children:'Die Button-Komponente reagiert auf Sprachbefehle wie "klick" oder "dr\xfccken".'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceButton.tsx\nimport React from 'react';\nimport { Button, ButtonProps } from '@smolitux/core';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceButtonProps = ButtonProps & VoiceControlProps;\n\nconst VoiceButtonBase: React.FC<VoiceButtonProps> = ({ \n  onVoiceCommand, \n  onClick,\n  children,\n  ...props \n}) => {\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Standardbefehle f\xfcr Button-Aktivierung\n    if (lowerCommand === 'klick' || \n        lowerCommand === 'click' || \n        lowerCommand === 'dr\xfccken' || \n        lowerCommand === 'press') {\n      // Simuliere einen Klick-Event\n      const buttonElement = document.getElementById(props.id || '');\n      if (buttonElement) {\n        buttonElement.click();\n      }\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <Button\n      onClick={handleClick}\n      {...props}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const VoiceButton = withVoiceControl(\n  VoiceButtonBase, \n  ['klick', 'click', 'dr\xfccken', 'press']\n);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"verwendungsbeispiel",children:"Verwendungsbeispiel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<VoiceButton \n  onClick={() => console.log('Button clicked')}\n  onVoiceCommand={(cmd) => console.log(`Voice command: ${cmd}`)}\n>\n  Speichern\n</VoiceButton>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"input",children:"Input"}),"\n",(0,r.jsx)(n.p,{children:"Die Input-Komponente unterst\xfctzt Sprachbefehle zum Eingeben und L\xf6schen von Text."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceInput.tsx\nimport React, { useState, useEffect } from 'react';\nimport { Input, InputProps } from '@smolitux/core';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceInputProps = InputProps & VoiceControlProps;\n\nconst VoiceInputBase: React.FC<VoiceInputProps> = ({ \n  onVoiceCommand, \n  onChange,\n  value: propValue,\n  ...props \n}) => {\n  const [value, setValue] = useState(propValue || '');\n\n  // Synchronisiere den Wert mit den Props\n  useEffect(() => {\n    if (propValue !== undefined) {\n      setValue(propValue);\n    }\n  }, [propValue]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehl zum Eingeben von Text\n    if (lowerCommand.startsWith('eingabe ') || lowerCommand.startsWith('input ')) {\n      // Extrahiere den Text nach \"eingabe \" oder \"input \"\n      const text = command.substring(lowerCommand.startsWith('eingabe ') ? 8 : 6);\n      \n      // Setze den Wert\n      setValue(text);\n      \n      // Simuliere ein Change-Event\n      const inputElement = document.getElementById(props.id || '') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = text;\n        \n        // Erstelle und dispatche ein synthetisches Event\n        const event = new Event('input', { bubbles: true });\n        inputElement.dispatchEvent(event);\n        \n        // Fokussiere das Element\n        inputElement.focus();\n        \n        // Wenn onChange als Prop \xfcbergeben wurde, rufe es mit einem simulierten Event auf\n        if (onChange) {\n          const syntheticEvent = {\n            target: { value: text },\n            currentTarget: { value: text },\n            preventDefault: () => {},\n            stopPropagation: () => {}\n          } as React.ChangeEvent<HTMLInputElement>;\n          \n          onChange(syntheticEvent);\n        }\n      }\n    } \n    // Befehl zum L\xf6schen des Textes\n    else if (lowerCommand === 'l\xf6schen' || lowerCommand === 'clear') {\n      setValue('');\n      \n      const inputElement = document.getElementById(props.id || '') as HTMLInputElement;\n      if (inputElement) {\n        inputElement.value = '';\n        \n        // Erstelle und dispatche ein synthetisches Event\n        const event = new Event('input', { bubbles: true });\n        inputElement.dispatchEvent(event);\n        \n        // Wenn onChange als Prop \xfcbergeben wurde, rufe es mit einem simulierten Event auf\n        if (onChange) {\n          const syntheticEvent = {\n            target: { value: '' },\n            currentTarget: { value: '' },\n            preventDefault: () => {},\n            stopPropagation: () => {}\n          } as React.ChangeEvent<HTMLInputElement>;\n          \n          onChange(syntheticEvent);\n        }\n      }\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <Input\n      value={value}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n};\n\nexport const VoiceInput = withVoiceControl(\n  VoiceInputBase, \n  ['eingabe', 'input', 'l\xf6schen', 'clear']\n);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"verwendungsbeispiel-1",children:"Verwendungsbeispiel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<VoiceInput \n  placeholder=\"Sprich, um Text einzugeben\"\n  onChange={(e) => console.log('Input changed:', e.target.value)}\n  onVoiceCommand={(cmd) => console.log(`Voice command: ${cmd}`)}\n/>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"checkbox",children:"Checkbox"}),"\n",(0,r.jsx)(n.p,{children:"Die Checkbox-Komponente unterst\xfctzt Sprachbefehle zum Aktivieren und Deaktivieren."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceCheckbox.tsx\nimport React, { useState, useEffect } from 'react';\nimport { Checkbox, CheckboxProps } from '@smolitux/core';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceCheckboxProps = CheckboxProps & VoiceControlProps;\n\nconst VoiceCheckboxBase: React.FC<VoiceCheckboxProps> = ({ \n  onVoiceCommand, \n  onChange,\n  checked: propChecked,\n  ...props \n}) => {\n  const [checked, setChecked] = useState(propChecked || false);\n\n  // Synchronisiere den Wert mit den Props\n  useEffect(() => {\n    if (propChecked !== undefined) {\n      setChecked(propChecked);\n    }\n  }, [propChecked]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChecked(event.target.checked);\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehle zum Aktivieren/Deaktivieren der Checkbox\n    if (lowerCommand === 'aktivieren' || \n        lowerCommand === 'check' || \n        lowerCommand === 'ankreuzen') {\n      setChecked(true);\n      simulateChange(true);\n    } \n    else if (lowerCommand === 'deaktivieren' || \n             lowerCommand === 'uncheck' || \n             lowerCommand === 'abw\xe4hlen') {\n      setChecked(false);\n      simulateChange(false);\n    }\n    else if (lowerCommand === 'umschalten' || \n             lowerCommand === 'toggle') {\n      const newChecked = !checked;\n      setChecked(newChecked);\n      simulateChange(newChecked);\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  const simulateChange = (newChecked: boolean) => {\n    const checkboxElement = document.getElementById(props.id || '') as HTMLInputElement;\n    if (checkboxElement) {\n      checkboxElement.checked = newChecked;\n      \n      // Erstelle und dispatche ein synthetisches Event\n      const event = new Event('change', { bubbles: true });\n      checkboxElement.dispatchEvent(event);\n      \n      // Wenn onChange als Prop \xfcbergeben wurde, rufe es mit einem simulierten Event auf\n      if (onChange) {\n        const syntheticEvent = {\n          target: { checked: newChecked },\n          currentTarget: { checked: newChecked },\n          preventDefault: () => {},\n          stopPropagation: () => {}\n        } as React.ChangeEvent<HTMLInputElement>;\n        \n        onChange(syntheticEvent);\n      }\n    }\n  };\n\n  return (\n    <Checkbox\n      checked={checked}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n};\n\nexport const VoiceCheckbox = withVoiceControl(\n  VoiceCheckboxBase, \n  ['aktivieren', 'check', 'ankreuzen', 'deaktivieren', 'uncheck', 'abw\xe4hlen', 'umschalten', 'toggle']\n);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"verwendungsbeispiel-2",children:"Verwendungsbeispiel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<VoiceCheckbox \n  label=\"Ich stimme den AGB zu\"\n  onChange={(e) => console.log('Checkbox changed:', e.target.checked)}\n  onVoiceCommand={(cmd) => console.log(`Voice command: ${cmd}`)}\n/>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"select",children:"Select"}),"\n",(0,r.jsx)(n.p,{children:"Die Select-Komponente unterst\xfctzt Sprachbefehle zur Auswahl von Optionen."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceSelect.tsx\nimport React, { useState, useEffect } from 'react';\nimport { Select, SelectProps } from '@smolitux/core';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceSelectProps = SelectProps & VoiceControlProps;\n\nconst VoiceSelectBase: React.FC<VoiceSelectProps> = ({ \n  onVoiceCommand, \n  onChange,\n  value: propValue,\n  options = [],\n  ...props \n}) => {\n  const [value, setValue] = useState(propValue);\n\n  // Synchronisiere den Wert mit den Props\n  useEffect(() => {\n    if (propValue !== undefined) {\n      setValue(propValue);\n    }\n  }, [propValue]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setValue(event.target.value);\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehl zum Ausw\xe4hlen einer Option\n    if (lowerCommand.startsWith('w\xe4hle ') || \n        lowerCommand.startsWith('select ') || \n        lowerCommand.includes(' w\xe4hlen') || \n        lowerCommand.includes(' ausw\xe4hlen')) {\n      \n      // Extrahiere den Optionsnamen\n      let optionName = '';\n      if (lowerCommand.startsWith('w\xe4hle ')) {\n        optionName = command.substring(6).toLowerCase();\n      } else if (lowerCommand.startsWith('select ')) {\n        optionName = command.substring(7).toLowerCase();\n      } else if (lowerCommand.includes(' w\xe4hlen')) {\n        optionName = command.split(' w\xe4hlen')[0].toLowerCase();\n      } else if (lowerCommand.includes(' ausw\xe4hlen')) {\n        optionName = command.split(' ausw\xe4hlen')[0].toLowerCase();\n      }\n      \n      // Finde die passende Option\n      const matchingOption = options.find(option => {\n        const optionLabel = typeof option === 'string' \n          ? option.toLowerCase() \n          : (option.label || '').toLowerCase();\n        return optionLabel === optionName;\n      });\n      \n      if (matchingOption) {\n        const optionValue = typeof matchingOption === 'string' \n          ? matchingOption \n          : matchingOption.value;\n        \n        // Setze den Wert\n        setValue(optionValue);\n        \n        // Simuliere ein Change-Event\n        const selectElement = document.getElementById(props.id || '') as HTMLSelectElement;\n        if (selectElement) {\n          selectElement.value = optionValue;\n          \n          // Erstelle und dispatche ein synthetisches Event\n          const event = new Event('change', { bubbles: true });\n          selectElement.dispatchEvent(event);\n          \n          // Wenn onChange als Prop \xfcbergeben wurde, rufe es mit einem simulierten Event auf\n          if (onChange) {\n            const syntheticEvent = {\n              target: { value: optionValue },\n              currentTarget: { value: optionValue },\n              preventDefault: () => {},\n              stopPropagation: () => {}\n            } as React.ChangeEvent<HTMLSelectElement>;\n            \n            onChange(syntheticEvent);\n          }\n        }\n      }\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <Select\n      value={value}\n      onChange={handleChange}\n      options={options}\n      {...props}\n    />\n  );\n};\n\nexport const VoiceSelect = withVoiceControl(\n  VoiceSelectBase, \n  ['w\xe4hle', 'select', 'w\xe4hlen', 'ausw\xe4hlen']\n);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"verwendungsbeispiel-3",children:"Verwendungsbeispiel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<VoiceSelect \n  label=\"Kategorie\"\n  options={[\n    { value: 'tech', label: 'Technologie' },\n    { value: 'science', label: 'Wissenschaft' },\n    { value: 'art', label: 'Kunst' }\n  ]}\n  onChange={(e) => console.log('Select changed:', e.target.value)}\n  onVoiceCommand={(cmd) => console.log(`Voice command: ${cmd}`)}\n/>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"layout-komponenten",children:"Layout-Komponenten"}),"\n",(0,r.jsx)(n.h3,{id:"container",children:"Container"}),"\n",(0,r.jsx)(n.p,{children:"Die Container-Komponente unterst\xfctzt Sprachbefehle zur Steuerung des Layouts."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceContainer.tsx\nimport React from 'react';\nimport { Container, ContainerProps } from '@smolitux/layout';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceContainerProps = ContainerProps & VoiceControlProps;\n\nconst VoiceContainerBase: React.FC<VoiceContainerProps> = ({ \n  onVoiceCommand, \n  children,\n  ...props \n}) => {\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehle zur Steuerung des Containers\n    if (lowerCommand === 'zentrieren' || lowerCommand === 'center') {\n      // Implementiere Zentrierung\n    } \n    else if (lowerCommand === 'erweitern' || lowerCommand === 'expand') {\n      // Implementiere Erweiterung\n    }\n    else if (lowerCommand === 'verkleinern' || lowerCommand === 'collapse') {\n      // Implementiere Verkleinerung\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <Container {...props}>\n      {children}\n    </Container>\n  );\n};\n\nexport const VoiceContainer = withVoiceControl(\n  VoiceContainerBase, \n  ['zentrieren', 'center', 'erweitern', 'expand', 'verkleinern', 'collapse']\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"card",children:"Card"}),"\n",(0,r.jsx)(n.p,{children:"Die Card-Komponente unterst\xfctzt Sprachbefehle zum \xd6ffnen, Schlie\xdfen und Erweitern."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceCard.tsx\nimport React, { useState } from 'react';\nimport { Card, CardProps } from '@smolitux/layout';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceCardProps = CardProps & VoiceControlProps & {\n  collapsible?: boolean;\n  expandable?: boolean;\n  onExpand?: () => void;\n  onCollapse?: () => void;\n};\n\nconst VoiceCardBase: React.FC<VoiceCardProps> = ({ \n  onVoiceCommand, \n  children,\n  collapsible = false,\n  expandable = false,\n  onExpand,\n  onCollapse,\n  ...props \n}) => {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehle zur Steuerung der Card\n    if (collapsible && (lowerCommand === 'einklappen' || lowerCommand === 'collapse')) {\n      setIsCollapsed(true);\n      if (onCollapse) onCollapse();\n    } \n    else if (collapsible && (lowerCommand === 'ausklappen' || lowerCommand === 'expand')) {\n      setIsCollapsed(false);\n    }\n    else if (expandable && (lowerCommand === 'maximieren' || lowerCommand === 'maximize')) {\n      setIsExpanded(true);\n      if (onExpand) onExpand();\n    }\n    else if (expandable && (lowerCommand === 'minimieren' || lowerCommand === 'minimize')) {\n      setIsExpanded(false);\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <Card \n      {...props}\n      className={`${props.className || ''} ${isCollapsed ? 'collapsed' : ''} ${isExpanded ? 'expanded' : ''}`}\n    >\n      {!isCollapsed && children}\n    </Card>\n  );\n};\n\nexport const VoiceCard = withVoiceControl(\n  VoiceCardBase, \n  ['einklappen', 'collapse', 'ausklappen', 'expand', 'maximieren', 'maximize', 'minimieren', 'minimize']\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"feedback-komponenten",children:"Feedback-Komponenten"}),"\n",(0,r.jsx)(n.h3,{id:"modal",children:"Modal"}),"\n",(0,r.jsx)(n.p,{children:"Die Modal-Komponente unterst\xfctzt Sprachbefehle zum \xd6ffnen und Schlie\xdfen."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceModal.tsx\nimport React from 'react';\nimport { Modal, ModalProps } from '@smolitux/core';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceModalProps = ModalProps & VoiceControlProps;\n\nconst VoiceModalBase: React.FC<VoiceModalProps> = ({ \n  onVoiceCommand, \n  onClose,\n  children,\n  ...props \n}) => {\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehle zum Schlie\xdfen des Modals\n    if (lowerCommand === 'schlie\xdfen' || \n        lowerCommand === 'close' || \n        lowerCommand === 'abbrechen' || \n        lowerCommand === 'cancel') {\n      if (onClose) {\n        onClose();\n      }\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <Modal\n      onClose={onClose}\n      {...props}\n    >\n      {children}\n    </Modal>\n  );\n};\n\nexport const VoiceModal = withVoiceControl(\n  VoiceModalBase, \n  ['schlie\xdfen', 'close', 'abbrechen', 'cancel']\n);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"verwendungsbeispiel-4",children:"Verwendungsbeispiel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const [isOpen, setIsOpen] = useState(false);\n\n<VoiceButton \n  onClick={() => setIsOpen(true)}\n  voiceCommands={['\xf6ffnen', 'open']}\n>\n  Modal \xf6ffnen\n</VoiceButton>\n\n<VoiceModal \n  isOpen={isOpen}\n  onClose={() => setIsOpen(false)}\n  title=\"Beispiel-Modal\"\n>\n  <p>Dieses Modal kann mit Sprachbefehlen geschlossen werden.</p>\n  <VoiceButton onClick={() => setIsOpen(false)}>Schlie\xdfen</VoiceButton>\n</VoiceModal>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"daten-komponenten",children:"Daten-Komponenten"}),"\n",(0,r.jsx)(n.h3,{id:"table",children:"Table"}),"\n",(0,r.jsx)(n.p,{children:"Die Table-Komponente unterst\xfctzt Sprachbefehle zur Navigation und Sortierung."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceTable.tsx\nimport React, { useState } from 'react';\nimport { Table, TableProps } from '@smolitux/core';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceTableProps = TableProps & VoiceControlProps & {\n  onSort?: (column: string, direction: 'asc' | 'desc') => void;\n  onPageChange?: (page: number) => void;\n  onRowsPerPageChange?: (rowsPerPage: number) => void;\n};\n\nconst VoiceTableBase: React.FC<VoiceTableProps> = ({ \n  onVoiceCommand, \n  onSort,\n  onPageChange,\n  onRowsPerPageChange,\n  columns = [],\n  ...props \n}) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehle zur Sortierung\n    if (lowerCommand.startsWith('sortiere nach ') || lowerCommand.startsWith('sort by ')) {\n      const columnName = command.substring(lowerCommand.startsWith('sortiere nach ') ? 14 : 8).toLowerCase();\n      \n      // Finde die passende Spalte\n      const matchingColumn = columns.find(column => \n        (typeof column === 'string' ? column : column.header || column.accessor || '').toLowerCase() === columnName\n      );\n      \n      if (matchingColumn && onSort) {\n        const columnKey = typeof matchingColumn === 'string' ? matchingColumn : (matchingColumn.accessor || matchingColumn.header || '');\n        onSort(columnKey, 'asc');\n      }\n    }\n    // Befehle zur Seitennavigation\n    else if (lowerCommand.startsWith('gehe zu seite ') || lowerCommand.startsWith('go to page ')) {\n      const pageNumber = parseInt(command.substring(lowerCommand.startsWith('gehe zu seite ') ? 14 : 11), 10);\n      \n      if (!isNaN(pageNumber) && pageNumber > 0) {\n        setCurrentPage(pageNumber);\n        if (onPageChange) {\n          onPageChange(pageNumber);\n        }\n      }\n    }\n    // Befehle zur \xc4nderung der Zeilenanzahl pro Seite\n    else if (lowerCommand.startsWith('zeige ') || lowerCommand.startsWith('show ')) {\n      const match = lowerCommand.match(/zeige (\\d+) (eintr\xe4ge|zeilen)|show (\\d+) (entries|rows)/i);\n      \n      if (match) {\n        const count = parseInt(match[1] || match[3], 10);\n        \n        if (!isNaN(count) && count > 0) {\n          setRowsPerPage(count);\n          if (onRowsPerPageChange) {\n            onRowsPerPageChange(count);\n          }\n        }\n      }\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <Table\n      columns={columns}\n      {...props}\n    />\n  );\n};\n\nexport const VoiceTable = withVoiceControl(\n  VoiceTableBase, \n  [\n    'sortiere nach', 'sort by', \n    'gehe zu seite', 'go to page', \n    'zeige', 'show'\n  ]\n);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"verwendungsbeispiel-5",children:"Verwendungsbeispiel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<VoiceTable \n  columns={[\n    { header: 'Name', accessor: 'name' },\n    { header: 'Alter', accessor: 'age' },\n    { header: 'Stadt', accessor: 'city' }\n  ]}\n  data={[\n    { name: 'Max Mustermann', age: 30, city: 'Berlin' },\n    { name: 'Erika Musterfrau', age: 28, city: 'Hamburg' }\n  ]}\n  onSort={(column, direction) => console.log(`Sort ${column} ${direction}`)}\n  onPageChange={(page) => console.log(`Go to page ${page}`)}\n  onVoiceCommand={(cmd) => console.log(`Voice command: ${cmd}`)}\n/>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"chart-komponenten",children:"Chart-Komponenten"}),"\n",(0,r.jsx)(n.h3,{id:"linechart",children:"LineChart"}),"\n",(0,r.jsx)(n.p,{children:"Die LineChart-Komponente unterst\xfctzt Sprachbefehle zur Datenvisualisierung."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceLineChart.tsx\nimport React, { useState } from 'react';\nimport { LineChart, LineChartProps } from '@smolitux/charts';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceLineChartProps = LineChartProps & VoiceControlProps & {\n  onZoom?: (level: number) => void;\n  onTimeRangeChange?: (range: 'day' | 'week' | 'month' | 'year') => void;\n};\n\nconst VoiceLineChartBase: React.FC<VoiceLineChartProps> = ({ \n  onVoiceCommand, \n  onZoom,\n  onTimeRangeChange,\n  ...props \n}) => {\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const [timeRange, setTimeRange] = useState<'day' | 'week' | 'month' | 'year'>('month');\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehle zum Zoomen\n    if (lowerCommand === 'vergr\xf6\xdfern' || lowerCommand === 'zoom in') {\n      const newZoomLevel = zoomLevel + 0.2;\n      setZoomLevel(newZoomLevel);\n      if (onZoom) onZoom(newZoomLevel);\n    } \n    else if (lowerCommand === 'verkleinern' || lowerCommand === 'zoom out') {\n      const newZoomLevel = Math.max(0.2, zoomLevel - 0.2);\n      setZoomLevel(newZoomLevel);\n      if (onZoom) onZoom(newZoomLevel);\n    }\n    // Befehle zur \xc4nderung des Zeitraums\n    else if (lowerCommand.includes('tag') || lowerCommand.includes('day')) {\n      setTimeRange('day');\n      if (onTimeRangeChange) onTimeRangeChange('day');\n    }\n    else if (lowerCommand.includes('woche') || lowerCommand.includes('week')) {\n      setTimeRange('week');\n      if (onTimeRangeChange) onTimeRangeChange('week');\n    }\n    else if (lowerCommand.includes('monat') || lowerCommand.includes('month')) {\n      setTimeRange('month');\n      if (onTimeRangeChange) onTimeRangeChange('month');\n    }\n    else if (lowerCommand.includes('jahr') || lowerCommand.includes('year')) {\n      setTimeRange('year');\n      if (onTimeRangeChange) onTimeRangeChange('year');\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <LineChart\n      {...props}\n      style={{ \n        ...props.style,\n        transform: `scale(${zoomLevel})`,\n        transformOrigin: 'center center'\n      }}\n      data-time-range={timeRange}\n    />\n  );\n};\n\nexport const VoiceLineChart = withVoiceControl(\n  VoiceLineChartBase, \n  [\n    'vergr\xf6\xdfern', 'zoom in', \n    'verkleinern', 'zoom out', \n    'tag', 'day', \n    'woche', 'week', \n    'monat', 'month', \n    'jahr', 'year'\n  ]\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"spezial-komponenten",children:"Spezial-Komponenten"}),"\n",(0,r.jsx)(n.h3,{id:"datepicker",children:"DatePicker"}),"\n",(0,r.jsx)(n.p,{children:"Die DatePicker-Komponente unterst\xfctzt Sprachbefehle zur Datumsauswahl."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceDatePicker.tsx\nimport React, { useState } from 'react';\nimport { DatePicker, DatePickerProps } from '@smolitux/core';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceDatePickerProps = DatePickerProps & VoiceControlProps;\n\nconst VoiceDatePickerBase: React.FC<VoiceDatePickerProps> = ({ \n  onVoiceCommand, \n  onChange,\n  value: propValue,\n  ...props \n}) => {\n  const [value, setValue] = useState(propValue);\n\n  const handleChange = (date: Date | null) => {\n    setValue(date);\n    if (onChange) {\n      onChange(date);\n    }\n  };\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehl zum Setzen des heutigen Datums\n    if (lowerCommand === 'heute' || lowerCommand === 'today') {\n      const today = new Date();\n      setValue(today);\n      if (onChange) onChange(today);\n    } \n    // Befehl zum Setzen des morgigen Datums\n    else if (lowerCommand === 'morgen' || lowerCommand === 'tomorrow') {\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      setValue(tomorrow);\n      if (onChange) onChange(tomorrow);\n    }\n    // Befehl zum Setzen eines bestimmten Datums\n    else if (lowerCommand.startsWith('datum ') || lowerCommand.startsWith('date ')) {\n      const dateStr = command.substring(lowerCommand.startsWith('datum ') ? 6 : 5);\n      \n      // Versuche, das Datum zu parsen\n      try {\n        const date = new Date(dateStr);\n        if (!isNaN(date.getTime())) {\n          setValue(date);\n          if (onChange) onChange(date);\n        }\n      } catch (error) {\n        console.error('Failed to parse date:', error);\n      }\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <DatePicker\n      value={value}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n};\n\nexport const VoiceDatePicker = withVoiceControl(\n  VoiceDatePickerBase, \n  ['heute', 'today', 'morgen', 'tomorrow', 'datum', 'date']\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"komplexe-komponenten-interaktionen",children:"Komplexe Komponenten-Interaktionen"}),"\n",(0,r.jsx)(n.h3,{id:"formulare",children:"Formulare"}),"\n",(0,r.jsx)(n.p,{children:"F\xfcr komplexe Formulare k\xf6nnen Sie einen VoiceForm-Container erstellen, der Sprachbefehle f\xfcr das gesamte Formular verarbeitet."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// src/components/voice/VoiceForm.tsx\nimport React, { FormEvent, useRef } from 'react';\nimport { Form, FormProps } from '@smolitux/core';\nimport { withVoiceControl, VoiceControlProps } from '@smolitux/voice-control';\n\nexport type VoiceFormProps = FormProps & VoiceControlProps;\n\nconst VoiceFormBase: React.FC<VoiceFormProps> = ({ \n  onVoiceCommand, \n  onSubmit,\n  children,\n  ...props \n}) => {\n  const formRef = useRef<HTMLFormElement>(null);\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    if (onSubmit) {\n      onSubmit(event);\n    }\n  };\n\n  const handleVoiceCommand = (command: string) => {\n    const lowerCommand = command.toLowerCase();\n    \n    // Befehl zum Absenden des Formulars\n    if (lowerCommand === 'absenden' || \n        lowerCommand === 'submit' || \n        lowerCommand === 'formular absenden' || \n        lowerCommand === 'submit form') {\n      if (formRef.current) {\n        // Erstelle und dispatche ein synthetisches Event\n        const event = new Event('submit', { bubbles: true, cancelable: true });\n        formRef.current.dispatchEvent(event);\n        \n        // Wenn das Event nicht abgebrochen wurde, rufe onSubmit auf\n        if (!event.defaultPrevented && onSubmit) {\n          onSubmit(event as unknown as FormEvent<HTMLFormElement>);\n        }\n      }\n    } \n    // Befehl zum Zur\xfccksetzen des Formulars\n    else if (lowerCommand === 'zur\xfccksetzen' || \n             lowerCommand === 'reset' || \n             lowerCommand === 'formular zur\xfccksetzen' || \n             lowerCommand === 'reset form') {\n      if (formRef.current) {\n        formRef.current.reset();\n      }\n    }\n\n    if (onVoiceCommand) {\n      onVoiceCommand(command);\n    }\n  };\n\n  return (\n    <Form\n      ref={formRef}\n      onSubmit={handleSubmit}\n      {...props}\n    >\n      {children}\n    </Form>\n  );\n};\n\nexport const VoiceForm = withVoiceControl(\n  VoiceFormBase, \n  ['absenden', 'submit', 'formular absenden', 'submit form', 'zur\xfccksetzen', 'reset', 'formular zur\xfccksetzen', 'reset form']\n);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"verwendungsbeispiel-6",children:"Verwendungsbeispiel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<VoiceForm \n  onSubmit={(e) => {\n    e.preventDefault();\n    console.log('Form submitted');\n  }}\n  onVoiceCommand={(cmd) => console.log(`Voice command: ${cmd}`)}\n>\n  <VoiceInput \n    name=\"name\"\n    label=\"Name\"\n    placeholder=\"Geben Sie Ihren Namen ein\"\n    voiceCommands={['name eingeben']}\n  />\n  \n  <VoiceSelect \n    name=\"category\"\n    label=\"Kategorie\"\n    options={[\n      { value: 'tech', label: 'Technologie' },\n      { value: 'science', label: 'Wissenschaft' },\n      { value: 'art', label: 'Kunst' }\n    ]}\n    voiceCommands={['kategorie ausw\xe4hlen', 'technologie w\xe4hlen', 'wissenschaft w\xe4hlen', 'kunst w\xe4hlen']}\n  />\n  \n  <VoiceCheckbox \n    name=\"terms\"\n    label=\"Ich stimme den AGB zu\"\n    voiceCommands={['agb akzeptieren', 'agb ablehnen']}\n  />\n  \n  <VoiceButton type=\"submit\">Absenden</VoiceButton>\n</VoiceForm>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"barrierefreiheit",children:"Barrierefreiheit"}),"\n",(0,r.jsx)(n.p,{children:"Alle sprachgesteuerten Komponenten sollten ARIA-Attribute enthalten, die auf die verf\xfcgbaren Sprachbefehle hinweisen."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// Beispiel f\xfcr barrierefreie Sprachsteuerung\nexport const VoiceButtonBase: React.FC<VoiceButtonProps> = ({ \n  onVoiceCommand, \n  onClick,\n  children,\n  voiceCommands = [],\n  ...props \n}) => {\n  // ... Implementierung ...\n\n  // Erstelle eine Beschreibung der verf\xfcgbaren Sprachbefehle\n  const voiceCommandsDescription = voiceCommands.length > 0\n    ? `Verf\xfcgbare Sprachbefehle: ${voiceCommands.join(', ')}`\n    : 'Sprachsteuerung verf\xfcgbar';\n\n  return (\n    <>\n      <Button\n        onClick={handleClick}\n        aria-describedby={`${props.id || ''}-voice-commands`}\n        {...props}\n      >\n        {children}\n      </Button>\n      <span \n        id={`${props.id || ''}-voice-commands`}\n        className=\"sr-only\" // Screen-Reader-only\n      >\n        {voiceCommandsDescription}\n      </span>\n    </>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"leistungsoptimierung",children:"Leistungsoptimierung"}),"\n",(0,r.jsx)(n.p,{children:"F\xfcr eine optimale Leistung sollten Sie die Sprachsteuerung nur f\xfcr die wichtigsten Komponenten aktivieren und Lazy Loading verwenden."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// Lazy Loading f\xfcr sprachgesteuerte Komponenten\nimport React, { lazy, Suspense } from 'react';\nimport { Button } from '@smolitux/core';\n\n// Lazy-Laden der sprachgesteuerten Komponente\nconst VoiceButton = lazy(() => import('./voice/VoiceButton'));\n\nfunction MyComponent() {\n  const [useVoiceControl, setUseVoiceControl] = useState(false);\n\n  return (\n    <div>\n      <label>\n        <input \n          type=\"checkbox\" \n          checked={useVoiceControl} \n          onChange={(e) => setUseVoiceControl(e.target.checked)} \n        />\n        Sprachsteuerung aktivieren\n      </label>\n      \n      {useVoiceControl ? (\n        <Suspense fallback={<Button>Lade...</Button>}>\n          <VoiceButton>Sprachgesteuerter Button</VoiceButton>\n        </Suspense>\n      ) : (\n        <Button>Normaler Button</Button>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Durch die Implementierung dieser Komponenten-Integration k\xf6nnen Sie die Sprachsteuerungsfunktionalit\xe4t in alle Smolitux-UI-Komponenten integrieren und eine konsistente Benutzererfahrung bieten."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>s});var t=o(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);