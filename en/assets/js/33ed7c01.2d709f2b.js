"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7925],{6714:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"examples/form-validation-examples","title":"Formularvalidierung Beispiele","description":"Diese Seite enth\xe4lt praktische Beispiele f\xfcr die Verwendung des Formularvalidierungssystems der Smolitux UI Bibliothek.","source":"@site/docs/examples/form-validation-examples.md","sourceDirName":"examples","slug":"/examples/form-validation-examples","permalink":"/smolitux-ui/en/docs/examples/form-validation-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/docs/examples/form-validation-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"wikiSidebar","previous":{"title":"Formular-Beispiele","permalink":"/smolitux-ui/en/docs/examples/form-examples"},"next":{"title":"Layout-Beispiele","permalink":"/smolitux-ui/en/docs/examples/layout-examples"}}');var t=r(4848),a=r(8453);const l={},s="Formularvalidierung Beispiele",o={},d=[{value:"Einfaches Anmeldeformular",id:"einfaches-anmeldeformular",level:2},{value:"Registrierungsformular mit Passwortbest\xe4tigung",id:"registrierungsformular-mit-passwortbest\xe4tigung",level:2},{value:"Kontaktformular mit asynchroner Validierung",id:"kontaktformular-mit-asynchroner-validierung",level:2},{value:"Mehrstufiges Formular",id:"mehrstufiges-formular",level:2},{value:"Dynamisches Formular mit Arrays",id:"dynamisches-formular-mit-arrays",level:2}];function m(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"formularvalidierung-beispiele",children:"Formularvalidierung Beispiele"})}),"\n",(0,t.jsx)(e.p,{children:"Diese Seite enth\xe4lt praktische Beispiele f\xfcr die Verwendung des Formularvalidierungssystems der Smolitux UI Bibliothek."}),"\n",(0,t.jsx)(e.h2,{id:"einfaches-anmeldeformular",children:"Einfaches Anmeldeformular"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'import { \n  Form, \n  FormField, \n  Input, \n  Button, \n  required, \n  email, \n  minLength \n} from \'@smolitux/core\';\n\nfunction LoginForm() {\n  const handleSubmit = (values) => {\n    console.log(\'Login submitted:\', values);\n    // Hier w\xfcrde die Anmeldung verarbeitet werden\n  };\n\n  return (\n    <Form\n      initialValues={{\n        email: \'\',\n        password: \'\'\n      }}\n      onSubmit={handleSubmit}\n      validationStrategy="onBlur"\n    >\n      {({ isSubmitting, isValid }) => (\n        <>\n          <FormField\n            name="email"\n            label="E-Mail"\n            validators={[\n              required(\'E-Mail ist erforderlich\'),\n              email(\'Bitte geben Sie eine g\xfcltige E-Mail-Adresse ein\')\n            ]}\n          >\n            {({ field, error }) => (\n              <Input \n                type="email" \n                placeholder="name@example.com" \n                {...field} \n                error={error} \n              />\n            )}\n          </FormField>\n\n          <FormField\n            name="password"\n            label="Passwort"\n            validators={[\n              required(\'Passwort ist erforderlich\'),\n              minLength(8, \'Das Passwort muss mindestens 8 Zeichen lang sein\')\n            ]}\n          >\n            {({ field, error }) => (\n              <Input \n                type="password" \n                placeholder="Ihr Passwort" \n                {...field} \n                error={error} \n              />\n            )}\n          </FormField>\n\n          <Button \n            type="submit" \n            variant="primary" \n            disabled={isSubmitting || !isValid}\n            isLoading={isSubmitting}\n          >\n            Anmelden\n          </Button>\n        </>\n      )}\n    </Form>\n  );\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"registrierungsformular-mit-passwortbest\xe4tigung",children:"Registrierungsformular mit Passwortbest\xe4tigung"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'import { \n  Form, \n  FormField, \n  Input, \n  Button, \n  required, \n  email, \n  minLength, \n  createDependentValidator \n} from \'@smolitux/core\';\n\n// Validator f\xfcr die Passwortbest\xe4tigung\nconst passwordsMatch = createDependentValidator((value, values) => {\n  if (!value) return true;\n  \n  return value === values.password \n    ? true \n    : \'Die Passw\xf6rter stimmen nicht \xfcberein\';\n});\n\nfunction RegistrationForm() {\n  const handleSubmit = (values) => {\n    console.log(\'Registration submitted:\', values);\n    // Hier w\xfcrde die Registrierung verarbeitet werden\n  };\n\n  return (\n    <Form\n      initialValues={{\n        name: \'\',\n        email: \'\',\n        password: \'\',\n        confirmPassword: \'\'\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting, isValid }) => (\n        <>\n          <FormField\n            name="name"\n            label="Name"\n            validators={[required(\'Name ist erforderlich\')]}\n          >\n            {({ field, error }) => (\n              <Input \n                placeholder="Ihr Name" \n                {...field} \n                error={error} \n              />\n            )}\n          </FormField>\n\n          <FormField\n            name="email"\n            label="E-Mail"\n            validators={[\n              required(\'E-Mail ist erforderlich\'),\n              email(\'Bitte geben Sie eine g\xfcltige E-Mail-Adresse ein\')\n            ]}\n          >\n            {({ field, error }) => (\n              <Input \n                type="email" \n                placeholder="name@example.com" \n                {...field} \n                error={error} \n              />\n            )}\n          </FormField>\n\n          <FormField\n            name="password"\n            label="Passwort"\n            validators={[\n              required(\'Passwort ist erforderlich\'),\n              minLength(8, \'Das Passwort muss mindestens 8 Zeichen lang sein\')\n            ]}\n          >\n            {({ field, error }) => (\n              <Input \n                type="password" \n                placeholder="Ihr Passwort" \n                {...field} \n                error={error} \n              />\n            )}\n          </FormField>\n\n          <FormField\n            name="confirmPassword"\n            label="Passwort best\xe4tigen"\n            validators={[\n              required(\'Passwortbest\xe4tigung ist erforderlich\'),\n              passwordsMatch\n            ]}\n          >\n            {({ field, error }) => (\n              <Input \n                type="password" \n                placeholder="Passwort wiederholen" \n                {...field} \n                error={error} \n              />\n            )}\n          </FormField>\n\n          <Button \n            type="submit" \n            variant="primary" \n            disabled={isSubmitting || !isValid}\n            isLoading={isSubmitting}\n          >\n            Registrieren\n          </Button>\n        </>\n      )}\n    </Form>\n  );\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"kontaktformular-mit-asynchroner-validierung",children:"Kontaktformular mit asynchroner Validierung"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import { \n  Form, \n  FormField, \n  Input, \n  TextArea, \n  Select, \n  Button, \n  required, \n  email, \n  createAsyncValidator \n} from '@smolitux/core';\n\n// Asynchroner Validator f\xfcr die \xdcberpr\xfcfung der E-Mail-Adresse\nconst emailExists = createAsyncValidator(async (value) => {\n  if (!value) return true;\n  \n  // Simulierte API-Anfrage\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  // In einer echten Anwendung w\xfcrde hier eine API-Anfrage stehen\n  const existingEmails = ['test@example.com', 'info@example.com'];\n  const exists = existingEmails.includes(value);\n  \n  return !exists ? true : 'Diese E-Mail-Adresse ist bereits registriert';\n});\n\nfunction ContactForm() {\n  const handleSubmit = (values) => {\n    console.log('Contact form submitted:', values);\n    // Hier w\xfcrde das Formular verarbeitet werden\n  };\n\n  const subjectOptions = [\n    { value: 'support', label: 'Support' },\n    { value: 'feedback', label: 'Feedback' },\n    { value: 'other', label: 'Sonstiges' }\n  ];\n\n  return (\n    <Form\n      initialValues={{\n        name: '',\n        email: '',\n        subject: '',\n        message: ''\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting, isValid }) => (\n        <>\n          <FormField\n            name=\"name\"\n            label=\"Name\"\n            validators={[required('Name ist erforderlich')]}\n          >\n            {({ field, error }) => (\n              <Input \n                placeholder=\"Ihr Name\" \n                {...field} \n                error={error} \n              />\n            )}\n          </FormField>\n\n          <FormField\n            name=\"email\"\n            label=\"E-Mail\"\n            validators={[\n              required('E-Mail ist erforderlich'),\n              email('Bitte geben Sie eine g\xfcltige E-Mail-Adresse ein'),\n              emailExists\n            ]}\n          >\n            {({ field, error, isValidating }) => (\n              <Input \n                type=\"email\" \n                placeholder=\"name@example.com\" \n                {...field} \n                error={error}\n                isLoading={isValidating}\n              />\n            )}\n          </FormField>\n\n          <FormField\n            name=\"subject\"\n            label=\"Betreff\"\n            validators={[required('Betreff ist erforderlich')]}\n          >\n            {({ field, error }) => (\n              <Select \n                options={subjectOptions} \n                placeholder=\"Betreff ausw\xe4hlen\" \n                {...field} \n                error={error} \n              />\n            )}\n          </FormField>\n\n          <FormField\n            name=\"message\"\n            label=\"Nachricht\"\n            validators={[required('Nachricht ist erforderlich')]}\n          >\n            {({ field, error }) => (\n              <TextArea \n                placeholder=\"Ihre Nachricht\" \n                rows={5} \n                {...field} \n                error={error} \n              />\n            )}\n          </FormField>\n\n          <Button \n            type=\"submit\" \n            variant=\"primary\" \n            disabled={isSubmitting || !isValid}\n            isLoading={isSubmitting}\n          >\n            Nachricht senden\n          </Button>\n        </>\n      )}\n    </Form>\n  );\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"mehrstufiges-formular",children:"Mehrstufiges Formular"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"import { \n  useState, \n  useEffect \n} from 'react';\nimport { \n  Form, \n  FormField, \n  Input, \n  Select, \n  Button, \n  Card, \n  required, \n  email, \n  number, \n  min, \n  max \n} from '@smolitux/core';\n\nfunction MultiStepForm() {\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState({\n    // Pers\xf6nliche Daten\n    firstName: '',\n    lastName: '',\n    email: '',\n    // Adressdaten\n    street: '',\n    city: '',\n    zipCode: '',\n    country: '',\n    // Zahlungsdaten\n    cardNumber: '',\n    cardName: '',\n    expiryDate: '',\n    cvv: ''\n  });\n  \n  const handleSubmitStep = (values, { setSubmitting }) => {\n    setFormData(prev => ({ ...prev, ...values }));\n    \n    if (step < 3) {\n      setStep(step + 1);\n    } else {\n      // Finaler Submit\n      console.log('Final form data:', { ...formData, ...values });\n      // Hier w\xfcrde das Formular verarbeitet werden\n    }\n    \n    setSubmitting(false);\n  };\n  \n  const handleBack = () => {\n    if (step > 1) {\n      setStep(step - 1);\n    }\n  };\n  \n  const countryOptions = [\n    { value: 'de', label: 'Deutschland' },\n    { value: 'at', label: '\xd6sterreich' },\n    { value: 'ch', label: 'Schweiz' }\n  ];\n  \n  return (\n    <div>\n      <div className=\"steps-indicator\">\n        <div className={`step ${step >= 1 ? 'active' : ''}`}>Pers\xf6nliche Daten</div>\n        <div className={`step ${step >= 2 ? 'active' : ''}`}>Adresse</div>\n        <div className={`step ${step >= 3 ? 'active' : ''}`}>Zahlung</div>\n      </div>\n      \n      <Card>\n        {step === 1 && (\n          <Form\n            initialValues={{\n              firstName: formData.firstName,\n              lastName: formData.lastName,\n              email: formData.email\n            }}\n            onSubmit={handleSubmitStep}\n          >\n            {({ isSubmitting, isValid }) => (\n              <>\n                <FormField\n                  name=\"firstName\"\n                  label=\"Vorname\"\n                  validators={[required('Vorname ist erforderlich')]}\n                >\n                  {({ field, error }) => (\n                    <Input {...field} error={error} />\n                  )}\n                </FormField>\n                \n                <FormField\n                  name=\"lastName\"\n                  label=\"Nachname\"\n                  validators={[required('Nachname ist erforderlich')]}\n                >\n                  {({ field, error }) => (\n                    <Input {...field} error={error} />\n                  )}\n                </FormField>\n                \n                <FormField\n                  name=\"email\"\n                  label=\"E-Mail\"\n                  validators={[\n                    required('E-Mail ist erforderlich'),\n                    email('Bitte geben Sie eine g\xfcltige E-Mail-Adresse ein')\n                  ]}\n                >\n                  {({ field, error }) => (\n                    <Input type=\"email\" {...field} error={error} />\n                  )}\n                </FormField>\n                \n                <Button \n                  type=\"submit\" \n                  variant=\"primary\" \n                  disabled={isSubmitting || !isValid}\n                >\n                  Weiter\n                </Button>\n              </>\n            )}\n          </Form>\n        )}\n        \n        {step === 2 && (\n          <Form\n            initialValues={{\n              street: formData.street,\n              city: formData.city,\n              zipCode: formData.zipCode,\n              country: formData.country\n            }}\n            onSubmit={handleSubmitStep}\n          >\n            {({ isSubmitting, isValid }) => (\n              <>\n                <FormField\n                  name=\"street\"\n                  label=\"Stra\xdfe und Hausnummer\"\n                  validators={[required('Stra\xdfe ist erforderlich')]}\n                >\n                  {({ field, error }) => (\n                    <Input {...field} error={error} />\n                  )}\n                </FormField>\n                \n                <FormField\n                  name=\"city\"\n                  label=\"Stadt\"\n                  validators={[required('Stadt ist erforderlich')]}\n                >\n                  {({ field, error }) => (\n                    <Input {...field} error={error} />\n                  )}\n                </FormField>\n                \n                <FormField\n                  name=\"zipCode\"\n                  label=\"PLZ\"\n                  validators={[\n                    required('PLZ ist erforderlich'),\n                    number('PLZ muss eine Zahl sein')\n                  ]}\n                >\n                  {({ field, error }) => (\n                    <Input {...field} error={error} />\n                  )}\n                </FormField>\n                \n                <FormField\n                  name=\"country\"\n                  label=\"Land\"\n                  validators={[required('Land ist erforderlich')]}\n                >\n                  {({ field, error }) => (\n                    <Select \n                      options={countryOptions} \n                      {...field} \n                      error={error} \n                    />\n                  )}\n                </FormField>\n                \n                <div className=\"button-group\">\n                  <Button \n                    type=\"button\" \n                    variant=\"secondary\" \n                    onClick={handleBack}\n                  >\n                    Zur\xfcck\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    variant=\"primary\" \n                    disabled={isSubmitting || !isValid}\n                  >\n                    Weiter\n                  </Button>\n                </div>\n              </>\n            )}\n          </Form>\n        )}\n        \n        {step === 3 && (\n          <Form\n            initialValues={{\n              cardNumber: formData.cardNumber,\n              cardName: formData.cardName,\n              expiryDate: formData.expiryDate,\n              cvv: formData.cvv\n            }}\n            onSubmit={handleSubmitStep}\n          >\n            {({ isSubmitting, isValid }) => (\n              <>\n                <FormField\n                  name=\"cardNumber\"\n                  label=\"Kartennummer\"\n                  validators={[\n                    required('Kartennummer ist erforderlich'),\n                    number('Kartennummer muss eine Zahl sein')\n                  ]}\n                >\n                  {({ field, error }) => (\n                    <Input \n                      placeholder=\"1234 5678 9012 3456\" \n                      {...field} \n                      error={error} \n                    />\n                  )}\n                </FormField>\n                \n                <FormField\n                  name=\"cardName\"\n                  label=\"Name auf der Karte\"\n                  validators={[required('Name ist erforderlich')]}\n                >\n                  {({ field, error }) => (\n                    <Input {...field} error={error} />\n                  )}\n                </FormField>\n                \n                <div className=\"row\">\n                  <FormField\n                    name=\"expiryDate\"\n                    label=\"Ablaufdatum\"\n                    validators={[required('Ablaufdatum ist erforderlich')]}\n                  >\n                    {({ field, error }) => (\n                      <Input \n                        placeholder=\"MM/JJ\" \n                        {...field} \n                        error={error} \n                      />\n                    )}\n                  </FormField>\n                  \n                  <FormField\n                    name=\"cvv\"\n                    label=\"CVV\"\n                    validators={[\n                      required('CVV ist erforderlich'),\n                      number('CVV muss eine Zahl sein'),\n                      min(100, 'CVV muss mindestens 3 Ziffern haben'),\n                      max(9999, 'CVV darf maximal 4 Ziffern haben')\n                    ]}\n                  >\n                    {({ field, error }) => (\n                      <Input \n                        placeholder=\"123\" \n                        {...field} \n                        error={error} \n                      />\n                    )}\n                  </FormField>\n                </div>\n                \n                <div className=\"button-group\">\n                  <Button \n                    type=\"button\" \n                    variant=\"secondary\" \n                    onClick={handleBack}\n                  >\n                    Zur\xfcck\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    variant=\"primary\" \n                    disabled={isSubmitting || !isValid}\n                    isLoading={isSubmitting}\n                  >\n                    Bestellung abschlie\xdfen\n                  </Button>\n                </div>\n              </>\n            )}\n          </Form>\n        )}\n      </Card>\n    </div>\n  );\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"dynamisches-formular-mit-arrays",children:"Dynamisches Formular mit Arrays"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'import { \n  Form, \n  FormField, \n  Input, \n  Button, \n  required \n} from \'@smolitux/core\';\n\nfunction DynamicForm() {\n  const handleSubmit = (values) => {\n    console.log(\'Form submitted:\', values);\n  };\n\n  return (\n    <Form\n      initialValues={{\n        title: \'\',\n        items: [{ name: \'\', quantity: \'\' }]\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ values, setFieldValue, isSubmitting, isValid }) => (\n        <>\n          <FormField\n            name="title"\n            label="Titel"\n            validators={[required(\'Titel ist erforderlich\')]}\n          >\n            {({ field, error }) => (\n              <Input {...field} error={error} />\n            )}\n          </FormField>\n\n          <div className="items-container">\n            <h3>Artikel</h3>\n            \n            {values.items.map((item, index) => (\n              <div key={index} className="item-row">\n                <FormField\n                  name={`items[${index}].name`}\n                  label={`Artikel ${index + 1}`}\n                  validators={[required(\'Artikelname ist erforderlich\')]}\n                >\n                  {({ field, error }) => (\n                    <Input {...field} error={error} />\n                  )}\n                </FormField>\n                \n                <FormField\n                  name={`items[${index}].quantity`}\n                  label="Menge"\n                  validators={[required(\'Menge ist erforderlich\')]}\n                >\n                  {({ field, error }) => (\n                    <Input \n                      type="number" \n                      min="1" \n                      {...field} \n                      error={error} \n                    />\n                  )}\n                </FormField>\n                \n                {values.items.length > 1 && (\n                  <Button\n                    type="button"\n                    variant="danger"\n                    onClick={() => {\n                      const newItems = [...values.items];\n                      newItems.splice(index, 1);\n                      setFieldValue(\'items\', newItems);\n                    }}\n                  >\n                    Entfernen\n                  </Button>\n                )}\n              </div>\n            ))}\n            \n            <Button\n              type="button"\n              variant="secondary"\n              onClick={() => {\n                setFieldValue(\'items\', [\n                  ...values.items, \n                  { name: \'\', quantity: \'\' }\n                ]);\n              }}\n            >\n              Artikel hinzuf\xfcgen\n            </Button>\n          </div>\n\n          <Button \n            type="submit" \n            variant="primary" \n            disabled={isSubmitting || !isValid}\n          >\n            Speichern\n          </Button>\n        </>\n      )}\n    </Form>\n  );\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Diese Beispiele zeigen die Vielseitigkeit und Flexibilit\xe4t des Formularvalidierungssystems der Smolitux UI Bibliothek. Sie k\xf6nnen diese Beispiele als Ausgangspunkt f\xfcr Ihre eigenen Formulare verwenden."})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>l,x:()=>s});var i=r(6540);const t={},a=i.createContext(t);function l(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);