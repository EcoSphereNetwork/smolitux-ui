"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7713],{3229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"testing/a11y-test-template","title":"A11y Test Template","description":"Diese Datei dient als Vorlage f\xfcr die Erstellung von Accessibility (A11y) Tests f\xfcr Komponenten in der Smolitux UI Bibliothek.","source":"@site/wiki/testing/a11y-test-template.md","sourceDirName":"testing","slug":"/testing/a11y-test-template","permalink":"/smolitux-ui/en/wiki/testing/a11y-test-template","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/wiki/wiki/testing/a11y-test-template.md","tags":[],"version":"current","frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Accessibility (A11y) Test Plan f\xfcr Smolitux UI","permalink":"/smolitux-ui/en/wiki/testing/a11y-test-plan"},"next":{"title":"Barrierefreiheitstests in Smolitux UI","permalink":"/smolitux-ui/en/wiki/testing/accessibility-testing"}}');var i=t(4848),r=t(8453);const s={},a="A11y Test Template",l={},c=[{value:"Grundlegende A11y-Testdatei",id:"grundlegende-a11y-testdatei",level:2},{value:"Erweiterte A11y-Tests f\xfcr spezifische Komponententypen",id:"erweiterte-a11y-tests-f\xfcr-spezifische-komponententypen",level:2},{value:"Formular-Komponenten",id:"formular-komponenten",level:3},{value:"Interaktive Komponenten",id:"interaktive-komponenten",level:3},{value:"Komplexe Komponenten (z.B. Tabellen, Diagramme)",id:"komplexe-komponenten-zb-tabellen-diagramme",level:3},{value:"Tipps f\xfcr effektive A11y-Tests",id:"tipps-f\xfcr-effektive-a11y-tests",level:2},{value:"Ressourcen",id:"ressourcen",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"a11y-test-template",children:"A11y Test Template"})}),"\n",(0,i.jsx)(n.p,{children:"Diese Datei dient als Vorlage f\xfcr die Erstellung von Accessibility (A11y) Tests f\xfcr Komponenten in der Smolitux UI Bibliothek."}),"\n",(0,i.jsx)(n.h2,{id:"grundlegende-a11y-testdatei",children:"Grundlegende A11y-Testdatei"}),"\n",(0,i.jsx)(n.p,{children:"Hier ist eine grundlegende Vorlage f\xfcr eine A11y-Testdatei:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { render } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { ComponentName } from '../ComponentName';\n\n// Erweitere Jest mit den axe-Matchers\nexpect.extend(toHaveNoViolations);\n\ndescribe('ComponentName - Accessibility', () => {\n  // Grundlegender Test f\xfcr Accessibility-Verst\xf6\xdfe\n  it('should not have any accessibility violations', async () => {\n    const { container } = render(<ComponentName />);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  // Test f\xfcr Accessibility-Verst\xf6\xdfe mit verschiedenen Props\n  it('should not have any accessibility violations with different props', async () => {\n    const { container } = render(<ComponentName variant=\"primary\" disabled />);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  // Test f\xfcr Keyboard-Navigation\n  it('should be navigable with keyboard', () => {\n    const { getByRole } = render(<ComponentName />);\n    const element = getByRole('button'); // Anpassen an die entsprechende Rolle\n    \n    // \xdcberpr\xfcfe, ob das Element fokussierbar ist\n    element.focus();\n    expect(document.activeElement).toBe(element);\n  });\n\n  // Test f\xfcr ARIA-Attribute\n  it('should have correct ARIA attributes', () => {\n    const { getByRole } = render(<ComponentName aria-label=\"Test Label\" />);\n    const element = getByRole('button'); // Anpassen an die entsprechende Rolle\n    \n    expect(element).toHaveAttribute('aria-label', 'Test Label');\n  });\n\n  // Test f\xfcr Farbkontrast (falls relevant)\n  it('should have sufficient color contrast', async () => {\n    const { container } = render(<ComponentName />);\n    const results = await axe(container, {\n      rules: {\n        'color-contrast': { enabled: true }\n      }\n    });\n    expect(results).toHaveNoViolations();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"erweiterte-a11y-tests-f\xfcr-spezifische-komponententypen",children:"Erweiterte A11y-Tests f\xfcr spezifische Komponententypen"}),"\n",(0,i.jsx)(n.h3,{id:"formular-komponenten",children:"Formular-Komponenten"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { FormComponent } from '../FormComponent';\n\nexpect.extend(toHaveNoViolations);\n\ndescribe('FormComponent - Accessibility', () => {\n  it('should not have any accessibility violations', async () => {\n    const { container } = render(<FormComponent />);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  it('should have correct form labeling', () => {\n    const { getByLabelText } = render(<FormComponent label=\"Test Label\" />);\n    expect(getByLabelText('Test Label')).toBeInTheDocument();\n  });\n\n  it('should show validation errors accessibly', () => {\n    const { getByText, getByRole } = render(<FormComponent required />);\n    \n    // L\xf6se Validierungsfehler aus\n    const input = getByRole('textbox');\n    fireEvent.blur(input);\n    \n    // \xdcberpr\xfcfe, ob der Fehler zug\xe4nglich ist\n    const error = getByText('This field is required');\n    expect(error).toBeInTheDocument();\n    expect(input).toHaveAttribute('aria-invalid', 'true');\n    expect(input).toHaveAttribute('aria-errormessage');\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"interaktive-komponenten",children:"Interaktive Komponenten"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { InteractiveComponent } from '../InteractiveComponent';\n\nexpect.extend(toHaveNoViolations);\n\ndescribe('InteractiveComponent - Accessibility', () => {\n  it('should not have any accessibility violations', async () => {\n    const { container } = render(<InteractiveComponent />);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  it('should be operable with keyboard', () => {\n    const handleAction = jest.fn();\n    const { getByRole } = render(<InteractiveComponent onAction={handleAction} />);\n    \n    const element = getByRole('button');\n    element.focus();\n    fireEvent.keyDown(element, { key: 'Enter' });\n    \n    expect(handleAction).toHaveBeenCalled();\n  });\n\n  it('should have correct focus management', () => {\n    const { getByRole, getByText } = render(<InteractiveComponent />);\n    \n    // \xd6ffne ein Dropdown oder Modal\n    const trigger = getByRole('button');\n    fireEvent.click(trigger);\n    \n    // \xdcberpr\xfcfe, ob der Fokus korrekt gesetzt wird\n    const firstFocusableElement = getByText('Option 1');\n    expect(document.activeElement).toBe(firstFocusableElement);\n  });\n\n  it('should trap focus in modal/dialog', () => {\n    const { getByRole } = render(<InteractiveComponent isOpen />);\n    \n    const dialog = getByRole('dialog');\n    const focusableElements = dialog.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n    \n    // \xdcberpr\xfcfe, ob der Fokus im Dialog gefangen ist\n    const firstElement = focusableElements[0] as HTMLElement;\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n    \n    lastElement.focus();\n    fireEvent.keyDown(lastElement, { key: 'Tab' });\n    expect(document.activeElement).toBe(firstElement);\n    \n    firstElement.focus();\n    fireEvent.keyDown(firstElement, { key: 'Tab', shiftKey: true });\n    expect(document.activeElement).toBe(lastElement);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"komplexe-komponenten-zb-tabellen-diagramme",children:"Komplexe Komponenten (z.B. Tabellen, Diagramme)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { render } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { ComplexComponent } from '../ComplexComponent';\n\nexpect.extend(toHaveNoViolations);\n\ndescribe('ComplexComponent - Accessibility', () => {\n  it('should not have any accessibility violations', async () => {\n    const { container } = render(<ComplexComponent />);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  it('should have correct semantic structure', () => {\n    const { getByRole } = render(<ComplexComponent />);\n    \n    // F\xfcr Tabellen\n    const table = getByRole('table');\n    expect(table).toBeInTheDocument();\n    expect(getByRole('rowgroup')).toBeInTheDocument();\n    expect(getByRole('row')).toBeInTheDocument();\n    expect(getByRole('columnheader')).toBeInTheDocument();\n    expect(getByRole('cell')).toBeInTheDocument();\n    \n    // F\xfcr Diagramme\n    expect(table).toHaveAttribute('aria-label');\n    expect(table).toHaveAttribute('role', 'table');\n  });\n\n  it('should provide alternative text for visual elements', () => {\n    const { getByRole } = render(<ComplexComponent />);\n    \n    // F\xfcr Diagramme\n    const chart = getByRole('img');\n    expect(chart).toHaveAttribute('aria-label');\n    \n    // Oder f\xfcr Canvas-basierte Diagramme\n    const canvas = document.querySelector('canvas');\n    expect(canvas).toHaveAttribute('aria-label');\n    expect(canvas.parentElement).toHaveAttribute('role', 'img');\n  });\n\n  it('should be navigable with keyboard', () => {\n    const { getAllByRole } = render(<ComplexComponent />);\n    \n    // F\xfcr Tabellen\n    const cells = getAllByRole('cell');\n    cells.forEach(cell => {\n      cell.focus();\n      expect(document.activeElement).toBe(cell);\n    });\n    \n    // F\xfcr Diagramme (falls interaktiv)\n    const dataPoints = getAllByRole('button');\n    dataPoints.forEach(point => {\n      point.focus();\n      expect(document.activeElement).toBe(point);\n    });\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"tipps-f\xfcr-effektive-a11y-tests",children:"Tipps f\xfcr effektive A11y-Tests"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teste verschiedene Zust\xe4nde"}),": Teste die Komponente in verschiedenen Zust\xe4nden (z.B. disabled, loading, error)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teste mit verschiedenen Eingabemethoden"}),": Teste die Komponente mit Maus, Tastatur und Screenreader."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teste mit verschiedenen Themes"}),": Teste die Komponente mit verschiedenen Themes (z.B. light, dark)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teste mit verschiedenen Gr\xf6\xdfen"}),": Teste die Komponente mit verschiedenen Gr\xf6\xdfen (z.B. small, medium, large)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teste mit realistischen Daten"}),": Verwende realistische Daten f\xfcr die Tests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teste Edge Cases"}),": Teste Grenzf\xe4lle wie leere Daten, sehr lange Texte, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teste mit verschiedenen Browsern"}),": Teste die Komponente in verschiedenen Browsern (falls m\xf6glich)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"ressourcen",children:"Ressourcen"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/nickcolley/jest-axe",children:"jest-axe Dokumentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://testing-library.com/docs/react-testing-library/intro/",children:"React Testing Library Dokumentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.w3.org/TR/WCAG21/",children:"WCAG 2.1 Richtlinien"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.w3.org/TR/wai-aria-practices-1.1/",children:"WAI-ARIA Authoring Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://dequeuniversity.com/",children:"Deque University"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);