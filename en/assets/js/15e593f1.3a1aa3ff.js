"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[624],{5330:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"testing/testplan/Browserkompatibilit\xe4tstests","title":"Browserkompatibilit\xe4tstests","description":"Dieses Dokument beschreibt die Strategie und Implementierung von Browserkompatibilit\xe4tstests f\xfcr die Komponenten der smolitux UI-Bibliothek.","source":"@site/wiki/testing/testplan/07-Browserkompatibilit\xe4tstests.md","sourceDirName":"testing/testplan","slug":"/testing/testplan/Browserkompatibilit\xe4tstests","permalink":"/smolitux-ui/en/wiki/testing/testplan/Browserkompatibilit\xe4tstests","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/wiki/wiki/testing/testplan/07-Browserkompatibilit\xe4tstests.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Browserkompatibilitaetstests","permalink":"/smolitux-ui/en/wiki/testing/testplan/Browserkompatibilitaetstests"},"next":{"title":"CI/CD-Integration","permalink":"/smolitux-ui/en/wiki/testing/testplan/CI-CD-Integration"}}');var i=n(4848),r=n(8453);const a={},o="Browserkompatibilit\xe4tstests",l={},c=[{value:"1. Zweck von Browserkompatibilit\xe4tstests",id:"1-zweck-von-browserkompatibilit\xe4tstests",level:2},{value:"2. Einrichtung von Playwright f\xfcr Browserkompatibilit\xe4tstests",id:"2-einrichtung-von-playwright-f\xfcr-browserkompatibilit\xe4tstests",level:2},{value:"2.1 Installation und Einrichtung",id:"21-installation-und-einrichtung",level:3},{value:"2.2 Playwright-Konfiguration",id:"22-playwright-konfiguration",level:3},{value:"2.3 Storybook Integration f\xfcr Playwright-Tests",id:"23-storybook-integration-f\xfcr-playwright-tests",level:3},{value:"3. Struktur der Browserkompatibilit\xe4tstests",id:"3-struktur-der-browserkompatibilit\xe4tstests",level:2},{value:"3.1 Testordnerstruktur",id:"31-testordnerstruktur",level:3},{value:"3.2 Beispiel: Grundlegende Komponenten testen",id:"32-beispiel-grundlegende-komponenten-testen",level:3},{value:"3.3 Beispiel: Komplexe Komponenten testen",id:"33-beispiel-komplexe-komponenten-testen",level:3},{value:"4. Tests f\xfcr verschiedene Ger\xe4te und Browser",id:"4-tests-f\xfcr-verschiedene-ger\xe4te-und-browser",level:2},{value:"4.1 Responsive-Tests",id:"41-responsive-tests",level:3},{value:"4.2 Browser-spezifische Tests",id:"42-browser-spezifische-tests",level:3},{value:"5. Accessibility-Tests mit Playwright",id:"5-accessibility-tests-mit-playwright",level:2},{value:"6. Visual Comparison Tests",id:"6-visual-comparison-tests",level:2},{value:"7. Integration in CI/CD-Pipeline",id:"7-integration-in-cicd-pipeline",level:2},{value:"8. Best Practices f\xfcr Browserkompatibilit\xe4tstests",id:"8-best-practices-f\xfcr-browserkompatibilit\xe4tstests",level:2},{value:"9. Herausforderungen und L\xf6sungen",id:"9-herausforderungen-und-l\xf6sungen",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"browserkompatibilit\xe4tstests",children:"Browserkompatibilit\xe4tstests"})}),"\n",(0,i.jsx)(t.p,{children:"Dieses Dokument beschreibt die Strategie und Implementierung von Browserkompatibilit\xe4tstests f\xfcr die Komponenten der smolitux UI-Bibliothek."}),"\n",(0,i.jsx)(t.h2,{id:"1-zweck-von-browserkompatibilit\xe4tstests",children:"1. Zweck von Browserkompatibilit\xe4tstests"}),"\n",(0,i.jsx)(t.p,{children:"Browserkompatibilit\xe4tstests stellen sicher, dass die Komponenten in verschiedenen Browsern konsistent funktionieren. Diese Tests sind wichtig f\xfcr:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Sicherstellung der Funktionalit\xe4t in allen unterst\xfctzten Browsern"}),"\n",(0,i.jsx)(t.li,{children:"Erkennung von renderbedingten Unterschieden zwischen Browsern"}),"\n",(0,i.jsx)(t.li,{children:"Validierung der Interaktivit\xe4t auf verschiedenen Plattformen"}),"\n",(0,i.jsx)(t.li,{children:"\xdcberpr\xfcfung der Barrierefreiheit in verschiedenen Browsern"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"2-einrichtung-von-playwright-f\xfcr-browserkompatibilit\xe4tstests",children:"2. Einrichtung von Playwright f\xfcr Browserkompatibilit\xe4tstests"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://playwright.dev/",children:"Playwright"})," ist ein modernes Framework f\xfcr End-to-End-Tests, das mehrere Browser unterst\xfctzt."]}),"\n",(0,i.jsx)(t.h3,{id:"21-installation-und-einrichtung",children:"2.1 Installation und Einrichtung"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Installation von Playwright\nnpm install --save-dev @playwright/test\n\n# Installation der Browser\nnpx playwright install\n"})}),"\n",(0,i.jsx)(t.h3,{id:"22-playwright-konfiguration",children:"2.2 Playwright-Konfiguration"}),"\n",(0,i.jsxs)(t.p,{children:["Erstellen Sie eine ",(0,i.jsx)(t.code,{children:"playwright.config.ts"})," im Wurzelverzeichnis:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"import { PlaywrightTestConfig } from '@playwright/test';\n\nconst config: PlaywrightTestConfig = {\n  testDir: './e2e-tests',\n  timeout: 30000,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: ['html', 'list'],\n  use: {\n    trace: 'on-first-retry',\n    screenshot: 'only-on-failure',\n    video: 'on-first-retry',\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { browserName: 'chromium' },\n    },\n    {\n      name: 'firefox',\n      use: { browserName: 'firefox' },\n    },\n    {\n      name: 'webkit',\n      use: { browserName: 'webkit' },\n    },\n    // Mobile Browser-Emulation\n    {\n      name: 'Mobile Chrome',\n      use: { \n        browserName: 'chromium',\n        ...devices['Pixel 5'],\n      },\n    },\n    {\n      name: 'Mobile Safari',\n      use: {\n        browserName: 'webkit',\n        ...devices['iPhone 12'],\n      },\n    },\n  ],\n};\n\nexport default config;\n"})}),"\n",(0,i.jsx)(t.p,{children:"Vergessen Sie nicht, die Devices zu importieren:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"import { PlaywrightTestConfig, devices } from '@playwright/test';\n"})}),"\n",(0,i.jsx)(t.h3,{id:"23-storybook-integration-f\xfcr-playwright-tests",children:"2.3 Storybook Integration f\xfcr Playwright-Tests"}),"\n",(0,i.jsx)(t.p,{children:"Die Tests werden auf einem laufenden Storybook-Server ausgef\xfchrt. Daf\xfcr k\xf6nnen wir die Storybook-URL direkt in den Tests verwenden:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Storybook starten\nnpm run storybook\n\n# In einem anderen Terminal die Tests ausf\xfchren\nnpx playwright test\n"})}),"\n",(0,i.jsx)(t.h2,{id:"3-struktur-der-browserkompatibilit\xe4tstests",children:"3. Struktur der Browserkompatibilit\xe4tstests"}),"\n",(0,i.jsx)(t.h3,{id:"31-testordnerstruktur",children:"3.1 Testordnerstruktur"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"e2e-tests/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 button.spec.ts\n\u2502   \u251c\u2500\u2500 form-elements.spec.ts\n\u2502   \u251c\u2500\u2500 modal.spec.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 test-utils.ts\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 fixtures/\n    \u251c\u2500\u2500 test-data.json\n    \u2514\u2500\u2500 ...\n"})}),"\n",(0,i.jsx)(t.h3,{id:"32-beispiel-grundlegende-komponenten-testen",children:"3.2 Beispiel: Grundlegende Komponenten testen"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/components/button.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Button Component', () => {\n  test.beforeEach(async ({ page }) => {\n    // Navigiere zur Button-Geschichte im Storybook\n    await page.goto('http://localhost:6006/iframe.html?id=components-button--primary');\n  });\n\n  test('renders primary button correctly', async ({ page }) => {\n    const button = page.locator('button.bg-primary-600');\n    await expect(button).toBeVisible();\n    await expect(button).toHaveText('Primary Button');\n  });\n\n  test('handles click events', async ({ page }) => {\n    // Zur interaktiven Geschichte navigieren\n    await page.goto('http://localhost:6006/iframe.html?id=components-button--with-click-handler');\n    \n    const button = page.locator('button');\n    const clickCounter = page.locator('[data-testid=\"click-counter\"]');\n    \n    // Initial sollte der Z\xe4hler 0 sein\n    await expect(clickCounter).toHaveText('Clicks: 0');\n    \n    // Nach einem Klick sollte der Z\xe4hler 1 sein\n    await button.click();\n    await expect(clickCounter).toHaveText('Clicks: 1');\n    \n    // Nach einem weiteren Klick sollte der Z\xe4hler 2 sein\n    await button.click();\n    await expect(clickCounter).toHaveText('Clicks: 2');\n  });\n\n  test('applies hover styles correctly', async ({ page }) => {\n    const button = page.locator('button');\n    \n    // Pr\xfcfen des Standard-Stils\n    await expect(button).toHaveCSS('background-color', 'rgb(37, 99, 235)'); // bg-primary-600\n    \n    // Pr\xfcfen des Hover-Stils\n    await button.hover();\n    await expect(button).toHaveCSS('background-color', 'rgb(29, 78, 216)'); // bg-primary-700\n  });\n\n  test('respects disabled state', async ({ page }) => {\n    // Zur disabled-Geschichte navigieren\n    await page.goto('http://localhost:6006/iframe.html?id=components-button--disabled');\n    \n    const button = page.locator('button');\n    \n    // Button sollte disabled sein\n    await expect(button).toBeDisabled();\n    \n    // Button sollte die disabled-Stile haben\n    await expect(button).toHaveCSS('opacity', '0.5');\n    \n    // Button sollte nicht klickbar sein\n    const clickCounter = page.locator('[data-testid=\"click-counter\"]');\n    await button.click({ force: true }); // Versuchen, trotz disabled zu klicken\n    await expect(clickCounter).toHaveText('Clicks: 0'); // Sollte sich nicht \xe4ndern\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"33-beispiel-komplexe-komponenten-testen",children:"3.3 Beispiel: Komplexe Komponenten testen"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/components/modal.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Modal Component', () => {\n  test.beforeEach(async ({ page }) => {\n    // Navigiere zur Modal-Geschichte im Storybook\n    await page.goto('http://localhost:6006/iframe.html?id=components-modal--default');\n  });\n\n  test('opens and closes modal correctly', async ({ page }) => {\n    const openButton = page.locator('button', { hasText: 'Open Modal' });\n    \n    // Modal sollte zun\xe4chst nicht sichtbar sein\n    await expect(page.locator('[role=\"dialog\"]')).not.toBeVisible();\n    \n    // Modal \xf6ffnen\n    await openButton.click();\n    \n    // Modal sollte sichtbar sein\n    const modal = page.locator('[role=\"dialog\"]');\n    await expect(modal).toBeVisible();\n    \n    // Pr\xfcfen des Modal-Titels\n    await expect(modal.locator('h2')).toHaveText('Modal Title');\n    \n    // Modal schlie\xdfen\n    const closeButton = modal.locator('button', { hasText: 'Close' });\n    await closeButton.click();\n    \n    // Modal sollte nicht mehr sichtbar sein\n    await expect(modal).not.toBeVisible();\n  });\n\n  test('closes modal when clicking on overlay', async ({ page }) => {\n    const openButton = page.locator('button', { hasText: 'Open Modal' });\n    \n    await openButton.click();\n    const modal = page.locator('[role=\"dialog\"]');\n    await expect(modal).toBeVisible();\n    \n    // Auf den Overlay klicken (au\xdferhalb des Modal-Inhalts)\n    await page.mouse.click(10, 10);\n    \n    // Modal sollte nicht mehr sichtbar sein\n    await expect(modal).not.toBeVisible();\n  });\n\n  test('prevents closing modal when closeOnOverlayClick is false', async ({ page }) => {\n    // Zur entsprechenden Geschichte navigieren\n    await page.goto('http://localhost:6006/iframe.html?id=components-modal--prevent-outside-click');\n    \n    const openButton = page.locator('button', { hasText: 'Open Modal' });\n    await openButton.click();\n    \n    const modal = page.locator('[role=\"dialog\"]');\n    await expect(modal).toBeVisible();\n    \n    // Auf den Overlay klicken\n    await page.mouse.click(10, 10);\n    \n    // Modal sollte immer noch sichtbar sein\n    await expect(modal).toBeVisible();\n  });\n\n  test('handles keyboard navigation correctly', async ({ page }) => {\n    const openButton = page.locator('button', { hasText: 'Open Modal' });\n    await openButton.click();\n    \n    const modal = page.locator('[role=\"dialog\"]');\n    await expect(modal).toBeVisible();\n    \n    // Tab-Navigation innerhalb des Modals testen\n    await page.keyboard.press('Tab');\n    \n    // Der erste fokussierbare Elementtyp kann je nach Modal-Implementierung variieren\n    // Hier nehmen wir an, dass es ein Button ist\n    await expect(page.locator('button:focus')).toBeVisible();\n    \n    // ESC-Taste zum Schlie\xdfen\n    await page.keyboard.press('Escape');\n    \n    // Modal sollte nicht mehr sichtbar sein\n    await expect(modal).not.toBeVisible();\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"4-tests-f\xfcr-verschiedene-ger\xe4te-und-browser",children:"4. Tests f\xfcr verschiedene Ger\xe4te und Browser"}),"\n",(0,i.jsx)(t.h3,{id:"41-responsive-tests",children:"4.1 Responsive-Tests"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/responsive/responsive.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Responsive Design Tests', () => {\n  test('table component adapts to screen size', async ({ page }) => {\n    // Zur Tabellen-Geschichte navigieren\n    await page.goto('http://localhost:6006/iframe.html?id=components-table--responsive');\n    \n    // Desktop-Layout\n    await page.setViewportSize({ width: 1024, height: 768 });\n    \n    // Alle Spalten sollten sichtbar sein\n    await expect(page.locator('th')).toHaveCount(5);\n    \n    // Mobile-Layout\n    await page.setViewportSize({ width: 375, height: 667 });\n    \n    // Weniger Spalten sollten sichtbar sein oder eine andere mobile Ansicht\n    // z.B. eine umgestufte Tabelle oder horizontales Scrollen\n    await expect(page.locator('.mobile-indicator')).toBeVisible();\n  });\n\n  test('sidebar collapses on mobile', async ({ page }) => {\n    await page.goto('http://localhost:6006/iframe.html?id=components-layout--dashboard-layout');\n    \n    // Desktop-Layout\n    await page.setViewportSize({ width: 1024, height: 768 });\n    \n    // Sidebar sollte ge\xf6ffnet sein\n    await expect(page.locator('.sidebar')).toBeVisible();\n    await expect(page.locator('.sidebar')).toHaveCSS('width', '240px');\n    \n    // Mobile-Layout\n    await page.setViewportSize({ width: 375, height: 667 });\n    \n    // Sidebar sollte eingeklappt oder versteckt sein\n    await expect(page.locator('.sidebar')).toHaveCSS('width', '0px');\n    \n    // Hamburger-Men\xfc sollte sichtbar sein\n    await expect(page.locator('.hamburger-menu')).toBeVisible();\n    \n    // Klick auf Hamburger-Men\xfc sollte Sidebar \xf6ffnen\n    await page.locator('.hamburger-menu').click();\n    await expect(page.locator('.sidebar')).toHaveCSS('width', '240px');\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"42-browser-spezifische-tests",children:"4.2 Browser-spezifische Tests"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/browser/browser-compatibility.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Browser Compatibility Tests', () => {\n  test('date picker renders correctly across browsers', async ({ page, browserName }) => {\n    await page.goto('http://localhost:6006/iframe.html?id=components-datepicker--default');\n    \n    // Datepicker \xf6ffnen\n    await page.locator('input').click();\n    \n    // Datepicker sollte sichtbar sein\n    await expect(page.locator('.datepicker')).toBeVisible();\n    \n    // Browserabh\xe4ngige Pr\xfcfungen\n    if (browserName === 'webkit') {\n      // Safari-spezifische Pr\xfcfungen\n      test.info().annotations.push({ type: 'Browser-specific', description: 'Safari tests' });\n    } else if (browserName === 'firefox') {\n      // Firefox-spezifische Pr\xfcfungen\n      test.info().annotations.push({ type: 'Browser-specific', description: 'Firefox tests' });\n    }\n    \n    // Datum ausw\xe4hlen\n    await page.locator('.datepicker .day', { hasText: '15' }).click();\n    \n    // Datepicker sollte geschlossen sein\n    await expect(page.locator('.datepicker')).not.toBeVisible();\n    \n    // Eingabefeld sollte das ausgew\xe4hlte Datum enthalten\n    await expect(page.locator('input')).toHaveValue(/15/);\n  });\n\n  test('form validation works consistently across browsers', async ({ page, browserName }) => {\n    await page.goto('http://localhost:6006/iframe.html?id=components-form--validation');\n    \n    // Formular absenden ohne Eingaben\n    await page.locator('button[type=\"submit\"]').click();\n    \n    // Validierungsfehlermeldungen sollten angezeigt werden\n    await expect(page.locator('.error-message')).toBeVisible();\n    \n    // Browser-spezifische Validierungspr\xfcfungen\n    if (browserName === 'webkit') {\n      // Pr\xfcfen auf native Safari-Validierungsmeldungen\n    } else if (browserName === 'firefox') {\n      // Pr\xfcfen auf native Firefox-Validierungsmeldungen\n    }\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"5-accessibility-tests-mit-playwright",children:"5. Accessibility-Tests mit Playwright"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/accessibility/a11y.spec.ts\nimport { test, expect } from '@playwright/test';\nimport AxeBuilder from '@axe-core/playwright';\n\ntest.describe('Accessibility Tests', () => {\n  test('button component meets accessibility standards', async ({ page }) => {\n    await page.goto('http://localhost:6006/iframe.html?id=components-button--primary');\n    \n    const results = await new AxeBuilder({ page }).analyze();\n    expect(results.violations).toEqual([]);\n  });\n\n  test('form components are keyboard navigable', async ({ page }) => {\n    await page.goto('http://localhost:6006/iframe.html?id=components-form--login-form');\n    \n    // Tab-Navigation testen\n    await page.keyboard.press('Tab');\n    await expect(page.locator('input[name=\"username\"]')).toBeFocused();\n    \n    await page.keyboard.press('Tab');\n    await expect(page.locator('input[name=\"password\"]')).toBeFocused();\n    \n    await page.keyboard.press('Tab');\n    await expect(page.locator('button[type=\"submit\"]')).toBeFocused();\n    \n    // Enter-Taste zum Absenden des Formulars\n    await page.keyboard.press('Enter');\n    await expect(page.locator('.submit-indicator')).toBeVisible();\n  });\n\n  test('modal traps focus correctly', async ({ page }) => {\n    await page.goto('http://localhost:6006/iframe.html?id=components-modal--default');\n    \n    // Modal \xf6ffnen\n    await page.locator('button', { hasText: 'Open Modal' }).click();\n    \n    // Erste Tab-Navigation sollte den ersten Element im Modal fokussieren\n    await page.keyboard.press('Tab');\n    await expect(page.locator('.modal button:focus')).toBeVisible();\n    \n    // Tab durch alle fokussierbaren Elemente im Modal\n    let focusStaysInModal = true;\n    for (let i = 0; i < 10; i++) {\n      await page.keyboard.press('Tab');\n      const focusedElementInModal = await page.evaluate(() => {\n        return document.activeElement && document.querySelector('.modal')?.contains(document.activeElement);\n      });\n      \n      if (!focusedElementInModal) {\n        focusStaysInModal = false;\n        break;\n      }\n    }\n    \n    // Fokus sollte im Modal bleiben\n    expect(focusStaysInModal).toBe(true);\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"6-visual-comparison-tests",children:"6. Visual Comparison Tests"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// e2e-tests/visual/visual.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Visual Comparison Tests', () => {\n  test('alert component appears consistently across browsers', async ({ page, browserName }) => {\n    // Skip Aufzeichnung von Screenshots w\xe4hrend der Tests\n    test.skip(process.env.CI === 'true', 'Visual comparison tests are flaky in CI');\n    \n    await page.goto('http://localhost:6006/iframe.html?id=components-alert--info');\n    \n    // Screenshot machen\n    const screenshot = await page.screenshot();\n    \n    // Screenshot mit Referenz vergleichen (browserabh\xe4ngig)\n    expect(screenshot).toMatchSnapshot(`alert-info-${browserName}.png`);\n  });\n\n  test('theme switch changes appearance correctly', async ({ page }) => {\n    await page.goto('http://localhost:6006/iframe.html?id=theme-theming--theme-switch');\n    \n    // Light Mode Screenshot\n    const lightModeScreenshot = await page.screenshot();\n    \n    // Wechseln zum Dark Mode\n    await page.locator('button', { hasText: 'Switch to Dark' }).click();\n    \n    // Warten auf Farb\xe4nderungen\n    await expect(page.locator('body')).toHaveClass(/dark/);\n    \n    // Dark Mode Screenshot\n    const darkModeScreenshot = await page.screenshot();\n    \n    // Sicherstellen, dass die Screenshots unterschiedlich sind\n    expect(Buffer.compare(lightModeScreenshot, darkModeScreenshot)).not.toBe(0);\n  });\n});\n"})}),"\n",(0,i.jsx)(t.h2,{id:"7-integration-in-cicd-pipeline",children:"7. Integration in CI/CD-Pipeline"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"# .github/workflows/browser-tests.yml\nname: Browser Compatibility Tests\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  browser-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Install Playwright browsers\n        run: npx playwright install --with-deps\n      - name: Build Storybook\n        run: npm run build-storybook\n      - name: Start Storybook server\n        run: npx http-server storybook-static -p 6006 &\n      - name: Wait for Storybook to start\n        run: npx wait-on http://localhost:6006\n      - name: Run Playwright tests\n        run: npx playwright test\n      - name: Upload test report\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n"})}),"\n",(0,i.jsx)(t.h2,{id:"8-best-practices-f\xfcr-browserkompatibilit\xe4tstests",children:"8. Best Practices f\xfcr Browserkompatibilit\xe4tstests"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Alle unterst\xfctzten Browser testen"}),": Chrome, Firefox, Safari und Edge"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Mobile Browser ber\xfccksichtigen"}),": iOS Safari und Android Chrome"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Responsive-Tests"}),": Verschiedene Viewport-Gr\xf6\xdfen testen"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Visuelles Rendering \xfcberpr\xfcfen"}),": Screenshots f\xfcr visuelle Konsistenz"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Interaktivit\xe4t testen"}),": Maus- und Tastaturinteraktionen"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Accessibility validieren"}),": Standardkonforme A11y-Implementierung in allen Browsern"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Ger\xe4teabh\xe4ngige Features testen"}),": Touch-Events, Hover-States, etc."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Performance-Metriken erheben"}),": Ladezeiten, Interaktivit\xe4t, etc."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"9-herausforderungen-und-l\xf6sungen",children:"9. Herausforderungen und L\xf6sungen"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Herausforderung"}),(0,i.jsx)(t.th,{children:"L\xf6sung"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Flakiness in Tests"})}),(0,i.jsx)(t.td,{children:"Stabile Selektoren verwenden, ausreichende Timeouts und Retry-Strategien implementieren"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Unterschiede im Rendering"})}),(0,i.jsx)(t.td,{children:"Flexible visuelle Vergleiche mit Toleranzwerten"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Inkonsistente Verhaltensweisen"})}),(0,i.jsx)(t.td,{children:"Browser-spezifische Tests und Fallbacks"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Performance-Unterschiede"})}),(0,i.jsx)(t.td,{children:"Angemessene Timeouts f\xfcr verschiedene Browser"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.strong,{children:"Mobile Emulatoren vs. reale Ger\xe4te"})}),(0,i.jsx)(t.td,{children:"Kritische Szenarien auf realen Ger\xe4ten testen"})]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);