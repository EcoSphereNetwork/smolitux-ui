"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9961],{1592:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"guides/form-validation","title":"Formularvalidierung","description":"Die Smolitux UI Bibliothek bietet ein umfassendes System zur Formularvalidierung, das einfach zu verwenden und flexibel ist.","source":"@site/wiki/guides/form-validation.md","sourceDirName":"guides","slug":"/guides/form-validation","permalink":"/smolitux-ui/en/wiki/guides/form-validation","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/wiki/wiki/guides/form-validation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Animationen und \xdcberg\xe4nge","permalink":"/smolitux-ui/en/wiki/guides/animations"},"next":{"title":"Internationalisierung (i18n)","permalink":"/smolitux-ui/en/wiki/guides/internationalization"}}');var t=i(4848),s=i(8453);const l={},a="Formularvalidierung",d={},o=[{value:"\xdcberblick",id:"\xfcberblick",level:2},{value:"Grundlegende Verwendung",id:"grundlegende-verwendung",level:2},{value:"Einfaches Formular mit Validierung",id:"einfaches-formular-mit-validierung",level:3},{value:"Verwendung mit Smolitux UI Komponenten",id:"verwendung-mit-smolitux-ui-komponenten",level:3},{value:"Validierungsstrategien",id:"validierungsstrategien",level:2},{value:"Vorgefertigte Validatoren",id:"vorgefertigte-validatoren",level:2},{value:"Eigene Validatoren",id:"eigene-validatoren",level:2},{value:"Asynchrone Validierung",id:"asynchrone-validierung",level:2},{value:"Abh\xe4ngige Validierung",id:"abh\xe4ngige-validierung",level:2},{value:"Formularkontext",id:"formularkontext",level:2},{value:"Zusammenfassung",id:"zusammenfassung",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"formularvalidierung",children:"Formularvalidierung"})}),"\n",(0,t.jsx)(n.p,{children:"Die Smolitux UI Bibliothek bietet ein umfassendes System zur Formularvalidierung, das einfach zu verwenden und flexibel ist."}),"\n",(0,t.jsx)(n.h2,{id:"\xfcberblick",children:"\xdcberblick"}),"\n",(0,t.jsx)(n.p,{children:"Das Validierungssystem besteht aus mehreren Komponenten:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hooks"}),": ",(0,t.jsx)(n.code,{children:"useForm"}),", ",(0,t.jsx)(n.code,{children:"useField"}),", ",(0,t.jsx)(n.code,{children:"useValidation"})," f\xfcr die Verwaltung von Formulardaten und Validierung"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validatoren"}),": Vorgefertigte Funktionen zur Validierung von Eingaben"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Komponenten"}),": ",(0,t.jsx)(n.code,{children:"Form"})," und ",(0,t.jsx)(n.code,{children:"FormField"})," f\xfcr die einfache Integration in React-Anwendungen"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"grundlegende-verwendung",children:"Grundlegende Verwendung"}),"\n",(0,t.jsx)(n.h3,{id:"einfaches-formular-mit-validierung",children:"Einfaches Formular mit Validierung"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { useForm, useField, required, email } from '@smolitux/core';\n\nfunction ContactForm() {\n  const form = useForm({\n    initialValues: {\n      name: '',\n      email: '',\n      message: ''\n    },\n    onSubmit: (values) => {\n      console.log('Form submitted:', values);\n      // Hier k\xf6nnen Sie die Daten an einen Server senden\n    }\n  });\n\n  const nameField = useField('name', form, {\n    validators: [required('Name ist erforderlich')]\n  });\n\n  const emailField = useField('email', form, {\n    validators: [\n      required('E-Mail ist erforderlich'),\n      email('Bitte geben Sie eine g\xfcltige E-Mail-Adresse ein')\n    ]\n  });\n\n  const messageField = useField('message', form, {\n    validators: [required('Nachricht ist erforderlich')]\n  });\n\n  return (\n    <form onSubmit={form.handleSubmit}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          {...nameField.inputProps}\n        />\n        {nameField.error && <div className=\"error\">{nameField.error}</div>}\n      </div>\n\n      <div>\n        <label htmlFor=\"email\">E-Mail</label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          {...emailField.inputProps}\n        />\n        {emailField.error && <div className=\"error\">{emailField.error}</div>}\n      </div>\n\n      <div>\n        <label htmlFor=\"message\">Nachricht</label>\n        <textarea\n          id=\"message\"\n          {...messageField.inputProps}\n        />\n        {messageField.error && <div className=\"error\">{messageField.error}</div>}\n      </div>\n\n      <button type=\"submit\" disabled={form.isSubmitting || !form.isValid}>\n        Absenden\n      </button>\n    </form>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"verwendung-mit-smolitux-ui-komponenten",children:"Verwendung mit Smolitux UI Komponenten"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { \n  Form, \n  FormField, \n  Input, \n  TextArea, \n  Button, \n  required, \n  email \n} from '@smolitux/core';\n\nfunction ContactForm() {\n  const handleSubmit = (values) => {\n    console.log('Form submitted:', values);\n    // Hier k\xf6nnen Sie die Daten an einen Server senden\n  };\n\n  return (\n    <Form\n      initialValues={{\n        name: '',\n        email: '',\n        message: ''\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting, isValid }) => (\n        <>\n          <FormField\n            name=\"name\"\n            label=\"Name\"\n            validators={[required('Name ist erforderlich')]}\n          >\n            {({ field, error }) => (\n              <Input {...field} error={error} />\n            )}\n          </FormField>\n\n          <FormField\n            name=\"email\"\n            label=\"E-Mail\"\n            validators={[\n              required('E-Mail ist erforderlich'),\n              email('Bitte geben Sie eine g\xfcltige E-Mail-Adresse ein')\n            ]}\n          >\n            {({ field, error }) => (\n              <Input type=\"email\" {...field} error={error} />\n            )}\n          </FormField>\n\n          <FormField\n            name=\"message\"\n            label=\"Nachricht\"\n            validators={[required('Nachricht ist erforderlich')]}\n          >\n            {({ field, error }) => (\n              <TextArea {...field} error={error} />\n            )}\n          </FormField>\n\n          <Button type=\"submit\" disabled={isSubmitting || !isValid}>\n            Absenden\n          </Button>\n        </>\n      )}\n    </Form>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"validierungsstrategien",children:"Validierungsstrategien"}),"\n",(0,t.jsx)(n.p,{children:"Das Validierungssystem unterst\xfctzt verschiedene Strategien:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"onChange"}),": Validierung bei jeder \xc4nderung des Feldwerts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"onBlur"}),": Validierung, wenn das Feld den Fokus verliert"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"onSubmit"}),": Validierung nur beim Absenden des Formulars"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const form = useForm({\n  // ...\n  validationStrategy: 'onBlur' // 'onChange', 'onBlur', oder 'onSubmit'\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"vorgefertigte-validatoren",children:"Vorgefertigte Validatoren"}),"\n",(0,t.jsx)(n.p,{children:"Die Bibliothek enth\xe4lt viele vorgefertigte Validatoren:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"required"}),": Pr\xfcft, ob ein Wert vorhanden ist"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"email"}),": Pr\xfcft, ob ein Wert eine g\xfcltige E-Mail-Adresse ist"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"minLength"}),": Pr\xfcft, ob ein Wert eine Mindestl\xe4nge hat"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"maxLength"}),": Pr\xfcft, ob ein Wert eine maximale L\xe4nge nicht \xfcberschreitet"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pattern"}),": Pr\xfcft, ob ein Wert einem regul\xe4ren Ausdruck entspricht"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"number"}),": Pr\xfcft, ob ein Wert eine Zahl ist"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"min"}),": Pr\xfcft, ob ein Zahlenwert gr\xf6\xdfer oder gleich einem Mindestwert ist"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"max"}),": Pr\xfcft, ob ein Zahlenwert kleiner oder gleich einem Maximalwert ist"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"url"}),": Pr\xfcft, ob ein Wert eine g\xfcltige URL ist"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"date"}),": Pr\xfcft, ob ein Wert ein g\xfcltiges Datum ist"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"eigene-validatoren",children:"Eigene Validatoren"}),"\n",(0,t.jsx)(n.p,{children:"Sie k\xf6nnen auch eigene Validatoren erstellen:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { createValidator } from '@smolitux/core';\n\nconst passwordStrength = createValidator((value) => {\n  if (!value) return true; // Leere Werte werden vom required-Validator abgefangen\n  \n  const hasUpperCase = /[A-Z]/.test(value);\n  const hasLowerCase = /[a-z]/.test(value);\n  const hasNumbers = /\\d/.test(value);\n  const hasSpecialChars = /[!@#$%^&*(),.?\":{}|<>]/.test(value);\n  \n  const isStrong = hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChars;\n  \n  return isStrong ? true : 'Das Passwort muss Gro\xdf- und Kleinbuchstaben, Zahlen und Sonderzeichen enthalten';\n});\n\n// Verwendung\nconst passwordField = useField('password', form, {\n  validators: [\n    required('Passwort ist erforderlich'),\n    minLength(8, 'Das Passwort muss mindestens 8 Zeichen lang sein'),\n    passwordStrength\n  ]\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"asynchrone-validierung",children:"Asynchrone Validierung"}),"\n",(0,t.jsx)(n.p,{children:"Das System unterst\xfctzt auch asynchrone Validierung:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { createAsyncValidator } from '@smolitux/core';\n\nconst usernameAvailable = createAsyncValidator(async (value) => {\n  if (!value) return true;\n  \n  try {\n    const response = await fetch(`/api/check-username?username=${value}`);\n    const data = await response.json();\n    \n    return data.available ? true : 'Dieser Benutzername ist bereits vergeben';\n  } catch (error) {\n    console.error('Fehler bei der \xdcberpr\xfcfung des Benutzernamens:', error);\n    return 'Fehler bei der \xdcberpr\xfcfung des Benutzernamens';\n  }\n});\n\n// Verwendung\nconst usernameField = useField('username', form, {\n  validators: [\n    required('Benutzername ist erforderlich'),\n    minLength(3, 'Der Benutzername muss mindestens 3 Zeichen lang sein'),\n    usernameAvailable\n  ]\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"abh\xe4ngige-validierung",children:"Abh\xe4ngige Validierung"}),"\n",(0,t.jsx)(n.p,{children:"Sie k\xf6nnen auch Validierungen erstellen, die von anderen Feldern abh\xe4ngen:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { createDependentValidator } from '@smolitux/core';\n\nconst passwordsMatch = createDependentValidator((value, values) => {\n  if (!value) return true;\n  \n  return value === values.password ? true : 'Die Passw\xf6rter stimmen nicht \xfcberein';\n});\n\n// Verwendung\nconst confirmPasswordField = useField('confirmPassword', form, {\n  validators: [\n    required('Passwortbest\xe4tigung ist erforderlich'),\n    passwordsMatch\n  ]\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"formularkontext",children:"Formularkontext"}),"\n",(0,t.jsxs)(n.p,{children:["Mit dem ",(0,t.jsx)(n.code,{children:"useFormContext"})," Hook k\xf6nnen Sie auf Formulardaten und -methoden in verschachtelten Komponenten zugreifen:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Form, useFormContext, Button } from '@smolitux/core';\n\nfunction SubmitButton() {\n  const { isSubmitting, isValid } = useFormContext();\n  \n  return (\n    <Button type=\"submit\" disabled={isSubmitting || !isValid}>\n      Absenden\n    </Button>\n  );\n}\n\nfunction ContactForm() {\n  return (\n    <Form\n      initialValues={{ /* ... */ }}\n      onSubmit={/* ... */}\n    >\n      {/* Formularfelder */}\n      <SubmitButton />\n    </Form>\n  );\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"zusammenfassung",children:"Zusammenfassung"}),"\n",(0,t.jsx)(n.p,{children:"Das Formularvalidierungssystem der Smolitux UI Bibliothek bietet:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Einfache und flexible API f\xfcr die Formularvalidierung"}),"\n",(0,t.jsx)(n.li,{children:"Vorgefertigte Validatoren f\xfcr h\xe4ufige Anwendungsf\xe4lle"}),"\n",(0,t.jsx)(n.li,{children:"Unterst\xfctzung f\xfcr benutzerdefinierte und asynchrone Validierung"}),"\n",(0,t.jsx)(n.li,{children:"Integration mit Smolitux UI Komponenten"}),"\n",(0,t.jsx)(n.li,{children:"Verschiedene Validierungsstrategien"}),"\n",(0,t.jsx)(n.li,{children:"Kontextbasierter Zugriff auf Formulardaten und -methoden"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var r=i(6540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);