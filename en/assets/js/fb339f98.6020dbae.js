"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9983],{5433:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"examples/form-examples","title":"Formular-Beispiele","description":"Diese Seite enth\xe4lt Beispiele f\xfcr die Verwendung von Smolitux-UI-Formularkomponenten.","source":"@site/docs/examples/form-examples.md","sourceDirName":"examples","slug":"/examples/form-examples","permalink":"/smolitux-ui/en/docs/examples/form-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/docs/examples/form-examples.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"wikiSidebar","previous":{"title":"Teststrategie","permalink":"/smolitux-ui/en/docs/testing/test-strategy"},"next":{"title":"API-Referenz","permalink":"/smolitux-ui/en/docs/api/reference"}}');var a=r(4848),i=r(8453);const s={sidebar_position:1},l="Formular-Beispiele",o={},d=[{value:"Einfaches Anmeldeformular",id:"einfaches-anmeldeformular",level:2},{value:"Registrierungsformular",id:"registrierungsformular",level:2},{value:"Mehrstufiges Formular",id:"mehrstufiges-formular",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"formular-beispiele",children:"Formular-Beispiele"})}),"\n",(0,a.jsx)(n.p,{children:"Diese Seite enth\xe4lt Beispiele f\xfcr die Verwendung von Smolitux-UI-Formularkomponenten."}),"\n",(0,a.jsx)(n.h2,{id:"einfaches-anmeldeformular",children:"Einfaches Anmeldeformular"}),"\n",(0,a.jsx)(n.p,{children:"Ein einfaches Anmeldeformular mit E-Mail und Passwort."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import React from \'react\';\nimport { Form, FormField, Input, Button, Stack } from \'@smolitux/ui\';\n\nfunction LoginForm() {\n  const handleSubmit = (values) => {\n    console.log(\'Form submitted:\', values);\n    // Hier w\xfcrde die Anmeldelogik implementiert werden\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Stack spacing="md">\n        <FormField\n          label="E-Mail"\n          name="email"\n          required\n          validations={{\n            required: \'E-Mail ist erforderlich\',\n            pattern: {\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n              message: \'Ung\xfcltige E-Mail-Adresse\'\n            }\n          }}\n        >\n          <Input type="email" placeholder="name@example.com" />\n        </FormField>\n\n        <FormField\n          label="Passwort"\n          name="password"\n          required\n          validations={{\n            required: \'Passwort ist erforderlich\',\n            minLength: {\n              value: 8,\n              message: \'Passwort muss mindestens 8 Zeichen lang sein\'\n            }\n          }}\n        >\n          <Input type="password" placeholder="Ihr Passwort" />\n        </FormField>\n\n        <Button type="submit" variant="primary" fullWidth>\n          Anmelden\n        </Button>\n      </Stack>\n    </Form>\n  );\n}\n\nexport default LoginForm;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"registrierungsformular",children:"Registrierungsformular"}),"\n",(0,a.jsx)(n.p,{children:"Ein umfassenderes Registrierungsformular mit mehreren Feldern und Validierungen."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import React from \'react\';\nimport { \n  Form, \n  FormField, \n  Input, \n  Checkbox, \n  Select, \n  Button, \n  Stack, \n  Grid \n} from \'@smolitux/ui\';\n\nfunction RegistrationForm() {\n  const handleSubmit = (values) => {\n    console.log(\'Registration submitted:\', values);\n    // Hier w\xfcrde die Registrierungslogik implementiert werden\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Stack spacing="lg">\n        <Grid columns={2} gap="md">\n          <FormField\n            label="Vorname"\n            name="firstName"\n            required\n            validations={{ required: \'Vorname ist erforderlich\' }}\n          >\n            <Input placeholder="Vorname" />\n          </FormField>\n\n          <FormField\n            label="Nachname"\n            name="lastName"\n            required\n            validations={{ required: \'Nachname ist erforderlich\' }}\n          >\n            <Input placeholder="Nachname" />\n          </FormField>\n        </Grid>\n\n        <FormField\n          label="E-Mail"\n          name="email"\n          required\n          validations={{\n            required: \'E-Mail ist erforderlich\',\n            pattern: {\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n              message: \'Ung\xfcltige E-Mail-Adresse\'\n            }\n          }}\n        >\n          <Input type="email" placeholder="name@example.com" />\n        </FormField>\n\n        <FormField\n          label="Passwort"\n          name="password"\n          required\n          validations={{\n            required: \'Passwort ist erforderlich\',\n            minLength: {\n              value: 8,\n              message: \'Passwort muss mindestens 8 Zeichen lang sein\'\n            },\n            pattern: {\n              value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n              message: \'Passwort muss mindestens einen Gro\xdfbuchstaben, einen Kleinbuchstaben, eine Zahl und ein Sonderzeichen enthalten\'\n            }\n          }}\n        >\n          <Input type="password" placeholder="Passwort erstellen" />\n        </FormField>\n\n        <FormField\n          label="Passwort best\xe4tigen"\n          name="confirmPassword"\n          required\n          validations={{\n            required: \'Passwortbest\xe4tigung ist erforderlich\',\n            validate: (value, values) => \n              value === values.password || \'Passw\xf6rter stimmen nicht \xfcberein\'\n          }}\n        >\n          <Input type="password" placeholder="Passwort best\xe4tigen" />\n        </FormField>\n\n        <FormField\n          label="Land"\n          name="country"\n          required\n          validations={{ required: \'Land ist erforderlich\' }}\n        >\n          <Select\n            options={[\n              { value: \'de\', label: \'Deutschland\' },\n              { value: \'at\', label: \'\xd6sterreich\' },\n              { value: \'ch\', label: \'Schweiz\' },\n              { value: \'other\', label: \'Anderes Land\' }\n            ]}\n            placeholder="Land ausw\xe4hlen"\n          />\n        </FormField>\n\n        <FormField\n          name="terms"\n          validations={{ required: \'Sie m\xfcssen den Nutzungsbedingungen zustimmen\' }}\n        >\n          <Checkbox label="Ich stimme den Nutzungsbedingungen zu" required />\n        </FormField>\n\n        <Button type="submit" variant="primary" fullWidth>\n          Registrieren\n        </Button>\n      </Stack>\n    </Form>\n  );\n}\n\nexport default RegistrationForm;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"mehrstufiges-formular",children:"Mehrstufiges Formular"}),"\n",(0,a.jsx)(n.p,{children:"Ein mehrstufiges Formular mit Fortschrittsanzeige."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import React, { useState } from \'react\';\nimport { \n  Form, \n  FormField, \n  Input, \n  Button, \n  Stack, \n  Stepper, \n  Card,\n  Flex\n} from \'@smolitux/ui\';\n\nfunction MultiStepForm() {\n  const [step, setStep] = useState(0);\n  const [formData, setFormData] = useState({});\n\n  const steps = [\n    { title: \'Pers\xf6nliche Daten\', fields: [\'firstName\', \'lastName\', \'email\'] },\n    { title: \'Adresse\', fields: [\'street\', \'city\', \'zipCode\', \'country\'] },\n    { title: \'Abschluss\', fields: [] }\n  ];\n\n  const handleNext = (values) => {\n    setFormData({ ...formData, ...values });\n    setStep(step + 1);\n  };\n\n  const handlePrevious = () => {\n    setStep(step - 1);\n  };\n\n  const handleSubmit = (values) => {\n    const finalData = { ...formData, ...values };\n    console.log(\'Form submitted:\', finalData);\n    // Hier w\xfcrde die finale \xdcbermittlung stattfinden\n  };\n\n  const renderStep = () => {\n    switch (step) {\n      case 0:\n        return (\n          <Form onSubmit={handleNext} defaultValues={formData}>\n            <Stack spacing="md">\n              <FormField\n                label="Vorname"\n                name="firstName"\n                required\n                validations={{ required: \'Vorname ist erforderlich\' }}\n              >\n                <Input placeholder="Vorname" />\n              </FormField>\n\n              <FormField\n                label="Nachname"\n                name="lastName"\n                required\n                validations={{ required: \'Nachname ist erforderlich\' }}\n              >\n                <Input placeholder="Nachname" />\n              </FormField>\n\n              <FormField\n                label="E-Mail"\n                name="email"\n                required\n                validations={{\n                  required: \'E-Mail ist erforderlich\',\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: \'Ung\xfcltige E-Mail-Adresse\'\n                  }\n                }}\n              >\n                <Input type="email" placeholder="name@example.com" />\n              </FormField>\n\n              <Flex justifyContent="flex-end">\n                <Button type="submit" variant="primary">\n                  Weiter\n                </Button>\n              </Flex>\n            </Stack>\n          </Form>\n        );\n      case 1:\n        return (\n          <Form onSubmit={handleNext} defaultValues={formData}>\n            <Stack spacing="md">\n              <FormField\n                label="Stra\xdfe und Hausnummer"\n                name="street"\n                required\n                validations={{ required: \'Stra\xdfe ist erforderlich\' }}\n              >\n                <Input placeholder="Stra\xdfe und Hausnummer" />\n              </FormField>\n\n              <FormField\n                label="Stadt"\n                name="city"\n                required\n                validations={{ required: \'Stadt ist erforderlich\' }}\n              >\n                <Input placeholder="Stadt" />\n              </FormField>\n\n              <FormField\n                label="Postleitzahl"\n                name="zipCode"\n                required\n                validations={{ required: \'Postleitzahl ist erforderlich\' }}\n              >\n                <Input placeholder="Postleitzahl" />\n              </FormField>\n\n              <FormField\n                label="Land"\n                name="country"\n                required\n                validations={{ required: \'Land ist erforderlich\' }}\n              >\n                <Input placeholder="Land" />\n              </FormField>\n\n              <Flex justifyContent="space-between">\n                <Button variant="secondary" onClick={handlePrevious}>\n                  Zur\xfcck\n                </Button>\n                <Button type="submit" variant="primary">\n                  Weiter\n                </Button>\n              </Flex>\n            </Stack>\n          </Form>\n        );\n      case 2:\n        return (\n          <Stack spacing="lg">\n            <Card>\n              <Stack spacing="md">\n                <h3>Zusammenfassung</h3>\n                <p><strong>Name:</strong> {formData.firstName} {formData.lastName}</p>\n                <p><strong>E-Mail:</strong> {formData.email}</p>\n                <p><strong>Adresse:</strong> {formData.street}, {formData.zipCode} {formData.city}, {formData.country}</p>\n              </Stack>\n            </Card>\n\n            <Flex justifyContent="space-between">\n              <Button variant="secondary" onClick={handlePrevious}>\n                Zur\xfcck\n              </Button>\n              <Button variant="primary" onClick={() => handleSubmit({})}>\n                Absenden\n              </Button>\n            </Flex>\n          </Stack>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Stack spacing="xl">\n      <Stepper activeStep={step} steps={steps.map(s => s.title)} />\n      {renderStep()}\n    </Stack>\n  );\n}\n\nexport default MultiStepForm;\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const a={},i=t.createContext(a);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);