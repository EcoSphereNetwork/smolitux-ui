"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8321],{785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"testing/testplan/Integrationstests","title":"Integrationstests f\xfcr komplexe Komponenten","description":"Dieses Dokument beschreibt die Strategie und Implementierung von Integrationstests f\xfcr komplexere Komponenten der smolitux UI-Bibliothek.","source":"@site/wiki/testing/testplan/04-Integrationstests.md","sourceDirName":"testing/testplan","slug":"/testing/testplan/Integrationstests","permalink":"/smolitux-ui/en/wiki/testing/testplan/Integrationstests","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/wiki/wiki/testing/testplan/04-Integrationstests.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Unit-Tests f\xfcr smolitux UI Komponenten","permalink":"/smolitux-ui/en/wiki/testing/testplan/Unit-Tests"},"next":{"title":"Spezielle Komponententests","permalink":"/smolitux-ui/en/wiki/testing/testplan/Spezielle-Komponententests"}}');var i=t(4848),o=t(8453);const r={},l="Integrationstests f\xfcr komplexe Komponenten",a={},m=[{value:"1. Ziel von Integrationstests",id:"1-ziel-von-integrationstests",level:2},{value:"2. Integrationstests-Strategie",id:"2-integrationstests-strategie",level:2},{value:"3. Zu testende komplexe Komponenten",id:"3-zu-testende-komplexe-komponenten",level:2},{value:"4. Beispiel: Modal mit Formular",id:"4-beispiel-modal-mit-formular",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"integrationstests-f\xfcr-komplexe-komponenten",children:"Integrationstests f\xfcr komplexe Komponenten"})}),"\n",(0,i.jsx)(n.p,{children:"Dieses Dokument beschreibt die Strategie und Implementierung von Integrationstests f\xfcr komplexere Komponenten der smolitux UI-Bibliothek."}),"\n",(0,i.jsx)(n.h2,{id:"1-ziel-von-integrationstests",children:"1. Ziel von Integrationstests"}),"\n",(0,i.jsx)(n.p,{children:"Integrationstests dienen dazu, das Zusammenspiel mehrerer Komponenten zu \xfcberpr\xfcfen. Im Gegensatz zu Unit-Tests, die einzelne Komponenten isoliert testen, pr\xfcfen Integrationstests, ob die Komponenten korrekt interagieren. Diese Tests sind besonders wichtig f\xfcr:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Komponenten, die andere Komponenten enthalten"}),"\n",(0,i.jsx)(n.li,{children:"Komponenten mit komplexem Zustandsmanagement"}),"\n",(0,i.jsx)(n.li,{children:"Interaktive Komponenten mit mehreren Zust\xe4nden"}),"\n",(0,i.jsx)(n.li,{children:"Komponenten, die mit externen Services oder APIs interagieren"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-integrationstests-strategie",children:"2. Integrationstests-Strategie"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Komponentenhierarchien testen"}),": \xdcberpr\xfcfen, ob verschachtelte Komponenten korrekt funktionieren"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interaktionsfl\xfcsse testen"}),": Vollst\xe4ndige Benutzerinteraktionsabl\xe4ufe validieren"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zustands\xfcberg\xe4nge testen"}),": Korrekte Zustands\xe4nderungen \xfcberpr\xfcfen"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rand- und Fehlerf\xe4lle testen"}),": Verhalten bei ungew\xf6hnlichen Inputs oder Fehlern pr\xfcfen"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-zu-testende-komplexe-komponenten",children:"3. Zu testende komplexe Komponenten"}),"\n",(0,i.jsx)(n.p,{children:"Folgende Komponententypen sollten mit Integrationstests abgedeckt werden:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dialog-Komponenten (Modal, Dialog, Drawer)"}),"\n",(0,i.jsx)(n.li,{children:"Formular-Komponenten (FormControl mit verschachtelten Elementen)"}),"\n",(0,i.jsx)(n.li,{children:"Datum- und Zeit-Komponenten (DatePicker, TimePicker)"}),"\n",(0,i.jsx)(n.li,{children:"Tabellen (mit Sortierung, Filterung, Paginierung)"}),"\n",(0,i.jsx)(n.li,{children:"Toast/Notification-System"}),"\n",(0,i.jsx)(n.li,{children:"Menu-/Navigation-Komponenten"}),"\n",(0,i.jsx)(n.li,{children:"Medienwiedergabe-Komponenten"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4-beispiel-modal-mit-formular",children:"4. Beispiel: Modal mit Formular"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"// Modal.int.test.tsx\nimport React, { useState } from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Modal } from '../Modal';\nimport { Button } from '../../Button/Button';\nimport { Input } from '../../Input/Input';\nimport { FormControl } from '../../FormControl/FormControl';\n\n// Testkomponente, die das vollst\xe4ndige Szenario darstellt\nconst ModalWithForm = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [formValue, setFormValue] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmitted(true);\n    setIsOpen(false);\n  };\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>Open Modal</Button>\n      \n      <Modal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        title=\"Test Form\"\n        footer={\n          <>\n            <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" form=\"test-form\">\n              Submit\n            </Button>\n          </>\n        }\n      >\n        <form id=\"test-form\" onSubmit={handleSubmit}>\n          <FormControl label=\"Test Input\">\n            <Input \n              value={formValue}\n              onChange={(e) => setFormValue(e.target.value)}\n              placeholder=\"Enter value\"\n            />\n          </FormControl>\n        </form>\n      </Modal>\n      \n    {submitted && <div data-testid=\"success-message\">Form submitted!</div>}\n  </div>\n);\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"Dieser Test stellt sicher, dass ein Formular innerhalb eines Modals korrekt\nge\xf6ffnet, ausgef\xfcllt und abgeschickt werden kann."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);