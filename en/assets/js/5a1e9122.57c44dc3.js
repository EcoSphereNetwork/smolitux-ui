"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5321],{1329:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"testing/implementation/automated-a11y-tests","title":"Automatisierte Barrierefreiheitstests","description":"Diese Dokumentation beschreibt die Implementierung und Verwendung der automatisierten Barrierefreiheitstests f\xfcr die Smolitux UI Komponenten.","source":"@site/docs/testing/implementation/automated-a11y-tests.md","sourceDirName":"testing/implementation","slug":"/testing/implementation/automated-a11y-tests","permalink":"/smolitux-ui/en/docs/testing/implementation/automated-a11y-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/docs/testing/implementation/automated-a11y-tests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"wikiSidebar","previous":{"title":"Barrierefreiheitstests f\xfcr Smolitux UI Komponenten","permalink":"/smolitux-ui/en/docs/testing/implementation/accessibility-tests"},"next":{"title":"Komponententests f\xfcr Smolitux UI","permalink":"/smolitux-ui/en/docs/testing/implementation/component-tests"}}');var s=t(4848),r=t(8453);const o={},l="Automatisierte Barrierefreiheitstests",a={},c=[{value:"\xdcberblick",id:"\xfcberblick",level:2},{value:"Einrichtung",id:"einrichtung",level:2},{value:"Installation",id:"installation",level:3},{value:"Jest-Konfiguration",id:"jest-konfiguration",level:3},{value:"Verwendung",id:"verwendung",level:2},{value:"Grundlegende Tests",id:"grundlegende-tests",level:3},{value:"Tests mit Optionen",id:"tests-mit-optionen",level:3},{value:"ARIA-Attribute testen",id:"aria-attribute-testen",level:3},{value:"Fokusierbarkeit testen",id:"fokusierbarkeit-testen",level:3},{value:"Farbkontrast testen",id:"farbkontrast-testen",level:3},{value:"Verf\xfcgbare Funktionen",id:"verf\xfcgbare-funktionen",level:2},{value:"<code>testA11y(component, options)</code>",id:"testa11ycomponent-options",level:3},{value:"<code>hasCorrectAriaAttributes(element, attributes)</code>",id:"hascorrectariaattributeselement-attributes",level:3},{value:"<code>hasCorrectRole(element, role)</code>",id:"hascorrectroleelement-role",level:3},{value:"<code>isFocusable(element)</code>",id:"isfocusableelement",level:3},{value:"<code>hasVisibleFocusIndicator(element)</code>",id:"hasvisiblefocusindicatorelement",level:3},{value:"<code>hasAdequateColorContrast(foregroundColor, backgroundColor, isLargeText)</code>",id:"hasadequatecolorcontrastforegroundcolor-backgroundcolor-islargetext",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Tests f\xfcr alle Komponenten",id:"1-tests-f\xfcr-alle-komponenten",level:3},{value:"2. Tests f\xfcr verschiedene Zust\xe4nde",id:"2-tests-f\xfcr-verschiedene-zust\xe4nde",level:3},{value:"3. Spezifische ARIA-Tests",id:"3-spezifische-aria-tests",level:3},{value:"4. Tastaturnavigation testen",id:"4-tastaturnavigation-testen",level:3},{value:"Integration in CI/CD",id:"integration-in-cicd",level:2},{value:"GitHub Actions Beispiel",id:"github-actions-beispiel",level:3},{value:"Fazit",id:"fazit",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"automatisierte-barrierefreiheitstests",children:"Automatisierte Barrierefreiheitstests"})}),"\n",(0,s.jsx)(n.p,{children:"Diese Dokumentation beschreibt die Implementierung und Verwendung der automatisierten Barrierefreiheitstests f\xfcr die Smolitux UI Komponenten."}),"\n",(0,s.jsx)(n.h2,{id:"\xfcberblick",children:"\xdcberblick"}),"\n",(0,s.jsxs)(n.p,{children:["Die Smolitux UI Bibliothek verwendet automatisierte Barrierefreiheitstests, um sicherzustellen, dass alle Komponenten den WCAG 2.1 AA-Standards entsprechen. Diese Tests werden mit Hilfe der ",(0,s.jsx)(n.code,{children:"@smolitux/testing"})," Bibliothek durchgef\xfchrt, die auf ",(0,s.jsx)(n.code,{children:"jest-axe"})," basiert."]}),"\n",(0,s.jsx)(n.h2,{id:"einrichtung",children:"Einrichtung"}),"\n",(0,s.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @smolitux/testing jest-axe @types/jest-axe\n"})}),"\n",(0,s.jsx)(n.h3,{id:"jest-konfiguration",children:"Jest-Konfiguration"}),"\n",(0,s.jsxs)(n.p,{children:["In der ",(0,s.jsx)(n.code,{children:"jest.config.js"})," Datei:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  // ... andere Konfigurationen\n  setupFilesAfterEnv: [\n    // ... andere Setup-Dateien\n    './jest.setup.js'\n  ]\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In der ",(0,s.jsx)(n.code,{children:"jest.setup.js"})," Datei:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { toHaveNoViolations } from 'jest-axe';\n\nexpect.extend(toHaveNoViolations);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"verwendung",children:"Verwendung"}),"\n",(0,s.jsx)(n.h3,{id:"grundlegende-tests",children:"Grundlegende Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { a11y } from '@smolitux/testing';\nimport { Button } from '@smolitux/core';\n\ndescribe('Button Accessibility', () => {\n  it('should not have accessibility violations', async () => {\n    const { violations } = await a11y.testA11y(<Button>Klick mich</Button>);\n    expect(violations).toHaveLength(0);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tests-mit-optionen",children:"Tests mit Optionen"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { a11y } from '@smolitux/testing';\nimport { Button } from '@smolitux/core';\n\ndescribe('Button Accessibility', () => {\n  it('should not have accessibility violations with custom options', async () => {\n    const { violations } = await a11y.testA11y(\n      <Button>Klick mich</Button>,\n      {\n        failOnViolation: true, // Test schl\xe4gt fehl, wenn Verst\xf6\xdfe gefunden werden\n        disabledRules: ['color-contrast'], // Regeln, die ignoriert werden sollen\n        axeOptions: {\n          rules: {\n            'button-name': { enabled: false }\n          }\n        }\n      }\n    );\n    expect(violations).toHaveLength(0);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"aria-attribute-testen",children:"ARIA-Attribute testen"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { render } from '@testing-library/react';\nimport { a11y } from '@smolitux/testing';\nimport { Button } from '@smolitux/core';\n\ndescribe('Button ARIA Attributes', () => {\n  it('should have correct ARIA attributes when disabled', () => {\n    const { getByRole } = render(<Button isDisabled>Klick mich</Button>);\n    const button = getByRole('button');\n    \n    expect(\n      a11y.hasCorrectAriaAttributes(button, {\n        'aria-disabled': 'true'\n      })\n    ).toBe(true);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"fokusierbarkeit-testen",children:"Fokusierbarkeit testen"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { render } from '@testing-library/react';\nimport { a11y } from '@smolitux/testing';\nimport { Button } from '@smolitux/core';\n\ndescribe('Button Focus', () => {\n  it('should be focusable', () => {\n    const { getByRole } = render(<Button>Klick mich</Button>);\n    const button = getByRole('button');\n    \n    expect(a11y.isFocusable(button)).toBe(true);\n  });\n  \n  it('should have visible focus indicator', () => {\n    const { getByRole } = render(<Button>Klick mich</Button>);\n    const button = getByRole('button');\n    \n    button.focus();\n    expect(a11y.hasVisibleFocusIndicator(button)).toBe(true);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"farbkontrast-testen",children:"Farbkontrast testen"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import { a11y } from '@smolitux/testing';\n\ndescribe('Color Contrast', () => {\n  it('should have adequate color contrast', () => {\n    // F\xfcr normalen Text (WCAG AA: 4.5:1)\n    expect(a11y.hasAdequateColorContrast('#ffffff', '#2563eb', false)).toBe(true);\n    \n    // F\xfcr gro\xdfen Text (WCAG AA: 3:1)\n    expect(a11y.hasAdequateColorContrast('#ffffff', '#4b5563', true)).toBe(true);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"verf\xfcgbare-funktionen",children:"Verf\xfcgbare Funktionen"}),"\n",(0,s.jsx)(n.h3,{id:"testa11ycomponent-options",children:(0,s.jsx)(n.code,{children:"testA11y(component, options)"})}),"\n",(0,s.jsx)(n.p,{children:"F\xfchrt einen Barrierefreiheitstest f\xfcr eine Komponente durch."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"component"}),": Die zu testende React-Komponente"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"options"}),": Optionen f\xfcr den Test","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"failOnViolation"}),": Ob der Test fehlschlagen soll, wenn Verst\xf6\xdfe gefunden werden (Standard: ",(0,s.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"disabledRules"}),": Regeln, die ignoriert werden sollen"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"axeOptions"}),": Zus\xe4tzliche axe-Konfiguration"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"R\xfcckgabewert:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"violations"}),": Array von gefundenen Verst\xf6\xdfen"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"passes"}),": Array von bestandenen Tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"incomplete"}),": Array von unvollst\xe4ndigen Tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"renderResult"}),": Das Ergebnis des Renderns der Komponente"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hascorrectariaattributeselement-attributes",children:(0,s.jsx)(n.code,{children:"hasCorrectAriaAttributes(element, attributes)"})}),"\n",(0,s.jsx)(n.p,{children:"Pr\xfcft, ob ein Element die korrekten ARIA-Attribute hat."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"element"}),": Das zu pr\xfcfende Element"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"attributes"}),": Die erwarteten ARIA-Attribute"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"R\xfcckgabewert:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"boolean"}),": ",(0,s.jsx)(n.code,{children:"true"}),", wenn alle Attribute korrekt sind"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hascorrectroleelement-role",children:(0,s.jsx)(n.code,{children:"hasCorrectRole(element, role)"})}),"\n",(0,s.jsx)(n.p,{children:"Pr\xfcft, ob ein Element die korrekte Rolle hat."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"element"}),": Das zu pr\xfcfende Element"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"role"}),": Die erwartete Rolle"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"R\xfcckgabewert:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"boolean"}),": ",(0,s.jsx)(n.code,{children:"true"}),", wenn die Rolle korrekt ist"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"isfocusableelement",children:(0,s.jsx)(n.code,{children:"isFocusable(element)"})}),"\n",(0,s.jsx)(n.p,{children:"Pr\xfcft, ob ein Element fokussierbar ist."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"element"}),": Das zu pr\xfcfende Element"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"R\xfcckgabewert:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"boolean"}),": ",(0,s.jsx)(n.code,{children:"true"}),", wenn das Element fokussierbar ist"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hasvisiblefocusindicatorelement",children:(0,s.jsx)(n.code,{children:"hasVisibleFocusIndicator(element)"})}),"\n",(0,s.jsx)(n.p,{children:"Pr\xfcft, ob ein Element einen sichtbaren Fokusindikator hat."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"element"}),": Das zu pr\xfcfende Element"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"R\xfcckgabewert:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"boolean"}),": ",(0,s.jsx)(n.code,{children:"true"}),", wenn das Element einen sichtbaren Fokusindikator hat"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hasadequatecolorcontrastforegroundcolor-backgroundcolor-islargetext",children:(0,s.jsx)(n.code,{children:"hasAdequateColorContrast(foregroundColor, backgroundColor, isLargeText)"})}),"\n",(0,s.jsx)(n.p,{children:"Pr\xfcft, ob ein Element einen ausreichenden Farbkontrast hat."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameter:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"foregroundColor"}),": Die Vordergrundfarbe (Text)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"backgroundColor"}),": Die Hintergrundfarbe"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isLargeText"}),": Ob es sich um gro\xdfen Text handelt (>= 18pt oder >= 14pt und fett)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"R\xfcckgabewert:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"boolean"}),": ",(0,s.jsx)(n.code,{children:"true"}),", wenn der Kontrast ausreichend ist (WCAG AA)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-tests-f\xfcr-alle-komponenten",children:"1. Tests f\xfcr alle Komponenten"}),"\n",(0,s.jsx)(n.p,{children:"Jede Komponente sollte mindestens einen grundlegenden Barrierefreiheitstest haben:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"describe('ComponentName Accessibility', () => {\n  it('should not have accessibility violations', async () => {\n    const { violations } = await a11y.testA11y(<ComponentName />);\n    expect(violations).toHaveLength(0);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-tests-f\xfcr-verschiedene-zust\xe4nde",children:"2. Tests f\xfcr verschiedene Zust\xe4nde"}),"\n",(0,s.jsx)(n.p,{children:"Teste Komponenten in verschiedenen Zust\xe4nden:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"describe('Button Accessibility', () => {\n  it('should not have accessibility violations in default state', async () => {\n    const { violations } = await a11y.testA11y(<Button>Klick mich</Button>);\n    expect(violations).toHaveLength(0);\n  });\n  \n  it('should not have accessibility violations when disabled', async () => {\n    const { violations } = await a11y.testA11y(<Button isDisabled>Klick mich</Button>);\n    expect(violations).toHaveLength(0);\n  });\n  \n  it('should not have accessibility violations when loading', async () => {\n    const { violations } = await a11y.testA11y(<Button isLoading>Klick mich</Button>);\n    expect(violations).toHaveLength(0);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-spezifische-aria-tests",children:"3. Spezifische ARIA-Tests"}),"\n",(0,s.jsx)(n.p,{children:"Teste spezifische ARIA-Attribute f\xfcr verschiedene Zust\xe4nde:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"describe('Button ARIA Attributes', () => {\n  it('should have correct ARIA attributes when disabled', () => {\n    const { getByRole } = render(<Button isDisabled>Klick mich</Button>);\n    const button = getByRole('button');\n    \n    expect(\n      a11y.hasCorrectAriaAttributes(button, {\n        'aria-disabled': 'true'\n      })\n    ).toBe(true);\n  });\n  \n  it('should have correct ARIA attributes when loading', () => {\n    const { getByRole } = render(<Button isLoading>Klick mich</Button>);\n    const button = getByRole('button');\n    \n    expect(\n      a11y.hasCorrectAriaAttributes(button, {\n        'aria-busy': 'true'\n      })\n    ).toBe(true);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-tastaturnavigation-testen",children:"4. Tastaturnavigation testen"}),"\n",(0,s.jsx)(n.p,{children:"Teste die Tastaturnavigation f\xfcr interaktive Komponenten:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"describe('Button Keyboard Navigation', () => {\n  it('should be activatable with Enter key', () => {\n    const handleClick = jest.fn();\n    const { getByRole } = render(<Button onClick={handleClick}>Klick mich</Button>);\n    const button = getByRole('button');\n    \n    button.focus();\n    fireEvent.keyDown(button, { key: 'Enter', code: 'Enter' });\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n  \n  it('should be activatable with Space key', () => {\n    const handleClick = jest.fn();\n    const { getByRole } = render(<Button onClick={handleClick}>Klick mich</Button>);\n    const button = getByRole('button');\n    \n    button.focus();\n    fireEvent.keyDown(button, { key: ' ', code: 'Space' });\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"integration-in-cicd",children:"Integration in CI/CD"}),"\n",(0,s.jsx)(n.p,{children:"Die Barrierefreiheitstests sollten in die CI/CD-Pipeline integriert werden, um sicherzustellen, dass keine \xc4nderungen die Barrierefreiheit beeintr\xe4chtigen."}),"\n",(0,s.jsx)(n.h3,{id:"github-actions-beispiel",children:"GitHub Actions Beispiel"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"name: Accessibility Tests\n\non:\n  push:\n    branches: [ main, development ]\n  pull_request:\n    branches: [ main, development ]\n\njobs:\n  a11y:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Install dependencies\n        run: npm ci\n      - name: Run accessibility tests\n        run: npm run test:a11y\n"})}),"\n",(0,s.jsx)(n.h2,{id:"fazit",children:"Fazit"}),"\n",(0,s.jsx)(n.p,{children:"Die automatisierten Barrierefreiheitstests sind ein wichtiger Bestandteil der Qualit\xe4tssicherung f\xfcr die Smolitux UI Komponenten. Sie helfen dabei, sicherzustellen, dass alle Komponenten den WCAG 2.1 AA-Standards entsprechen und f\xfcr alle Benutzer zug\xe4nglich sind."}),"\n",(0,s.jsx)(n.p,{children:"Durch die Integration in die CI/CD-Pipeline wird sichergestellt, dass keine \xc4nderungen die Barrierefreiheit beeintr\xe4chtigen und dass alle neuen Komponenten von Anfang an barrierefrei sind."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);