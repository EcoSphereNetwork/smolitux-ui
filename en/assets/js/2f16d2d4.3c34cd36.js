"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[720],{791:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"testing/implementation/component-tests","title":"Komponententests f\xfcr Smolitux UI","description":"Dieses Dokument beschreibt die implementierten Unit-Tests und Integrationstests f\xfcr die Smolitux UI-Bibliothek.","source":"@site/wiki/testing/implementation/component-tests.md","sourceDirName":"testing/implementation","slug":"/testing/implementation/component-tests","permalink":"/smolitux-ui/en/wiki/testing/implementation/component-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/wiki/wiki/testing/implementation/component-tests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Automatisierte Barrierefreiheitstests","permalink":"/smolitux-ui/en/wiki/testing/implementation/automated-a11y-tests"},"next":{"title":"Snapshot-Tests f\xfcr Smolitux UI","permalink":"/smolitux-ui/en/wiki/testing/implementation/snapshot-tests"}}');var s=t(4848),i=t(8453);const o={},l="Komponententests f\xfcr Smolitux UI",a={},d=[{value:"\xdcberblick",id:"\xfcberblick",level:2},{value:"Unit-Tests",id:"unit-tests",level:2},{value:"Button-Komponente",id:"button-komponente",level:3},{value:"Card-Komponente",id:"card-komponente",level:3},{value:"Checkbox-Komponente",id:"checkbox-komponente",level:3},{value:"Input-Komponente",id:"input-komponente",level:3},{value:"Radio-Komponente",id:"radio-komponente",level:3},{value:"Select-Komponente",id:"select-komponente",level:3},{value:"TabView-Komponente",id:"tabview-komponente",level:3},{value:"Integrationstests",id:"integrationstests",level:2},{value:"Formular-Integration",id:"formular-integration",level:3},{value:"Theme-Integration",id:"theme-integration",level:3},{value:"Testabdeckung",id:"testabdeckung",level:2},{value:"N\xe4chste Schritte",id:"n\xe4chste-schritte",level:2},{value:"Fazit",id:"fazit",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"komponententests-f\xfcr-smolitux-ui",children:"Komponententests f\xfcr Smolitux UI"})}),"\n",(0,s.jsx)(n.p,{children:"Dieses Dokument beschreibt die implementierten Unit-Tests und Integrationstests f\xfcr die Smolitux UI-Bibliothek."}),"\n",(0,s.jsx)(n.h2,{id:"\xfcberblick",children:"\xdcberblick"}),"\n",(0,s.jsx)(n.p,{children:"Die folgenden Komponenten wurden mit Unit-Tests abgedeckt:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Button"}),"\n",(0,s.jsx)(n.li,{children:"Card"}),"\n",(0,s.jsx)(n.li,{children:"Checkbox"}),"\n",(0,s.jsx)(n.li,{children:"Input"}),"\n",(0,s.jsx)(n.li,{children:"Radio"}),"\n",(0,s.jsx)(n.li,{children:"Select"}),"\n",(0,s.jsx)(n.li,{children:"TabView"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Zus\xe4tzlich wurden Integrationstests f\xfcr folgende Szenarien implementiert:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Formulare mit verschiedenen Formular-Elementen"}),"\n",(0,s.jsx)(n.li,{children:"Theme-Integration"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"unit-tests",children:"Unit-Tests"}),"\n",(0,s.jsx)(n.h3,{id:"button-komponente",children:"Button-Komponente"}),"\n",(0,s.jsx)(n.p,{children:"Die Button-Komponente wurde umfassend getestet, um sicherzustellen, dass sie korrekt funktioniert und alle Props korrekt verarbeitet."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"test('renders correctly with default props', () => {\n  render(<Button>Click me</Button>);\n  expect(screen.getByRole('button', { name: /Click me/i })).toBeInTheDocument();\n  expect(screen.getByRole('button')).toHaveClass('bg-primary-600'); // Prim\xe4r-Variante als Default\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"card-komponente",children:"Card-Komponente"}),"\n",(0,s.jsx)(n.p,{children:"Die Card-Komponente wurde getestet, um sicherzustellen, dass sie korrekt gerendert wird und alle Props korrekt verarbeitet."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"test('renders with different variants', () => {\n  const { rerender } = render(<Card variant=\"elevated\">Elevated Card</Card>);\n  expect(screen.getByText('Elevated Card').parentElement).toHaveClass('shadow-md');\n\n  rerender(<Card variant=\"outlined\">Outlined Card</Card>);\n  expect(screen.getByText('Outlined Card').parentElement).toHaveClass('border');\n\n  rerender(<Card variant=\"flat\">Flat Card</Card>);\n  expect(screen.getByText('Flat Card').parentElement).toHaveClass('bg-white');\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"checkbox-komponente",children:"Checkbox-Komponente"}),"\n",(0,s.jsx)(n.p,{children:"Die Checkbox-Komponente wurde getestet, um sicherzustellen, dass sie korrekt gerendert wird und alle Props korrekt verarbeitet."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"test('handles change events', async () => {\n  const handleChange = jest.fn();\n  render(<Checkbox onChange={handleChange} />);\n  \n  const checkbox = screen.getByRole('checkbox');\n  await userEvent.click(checkbox);\n  \n  expect(handleChange).toHaveBeenCalledTimes(1);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"input-komponente",children:"Input-Komponente"}),"\n",(0,s.jsx)(n.p,{children:"Die Input-Komponente wurde getestet, um sicherzustellen, dass sie korrekt gerendert wird und alle Props korrekt verarbeitet."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"test('shows error message when provided', () => {\n  render(<Input error=\"Required field\" />);\n  expect(screen.getByText('Required field')).toBeInTheDocument();\n  expect(screen.getByRole('textbox')).toHaveAttribute('aria-invalid', 'true');\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"radio-komponente",children:"Radio-Komponente"}),"\n",(0,s.jsx)(n.p,{children:"Die Radio-Komponente und RadioGroup wurden getestet, um sicherzustellen, dass sie korrekt gerendert werden und alle Props korrekt verarbeiten."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'test(\'sets the correct radio as checked\', () => {\n  render(\n    <RadioGroup name="options" value="option2">\n      <Radio value="option1" label="Option 1" />\n      <Radio value="option2" label="Option 2" />\n      <Radio value="option3" label="Option 3" />\n    </RadioGroup>\n  );\n  \n  expect(screen.getByLabelText(\'Option 1\')).not.toBeChecked();\n  expect(screen.getByLabelText(\'Option 2\')).toBeChecked();\n  expect(screen.getByLabelText(\'Option 3\')).not.toBeChecked();\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"select-komponente",children:"Select-Komponente"}),"\n",(0,s.jsx)(n.p,{children:"Die Select-Komponente wurde getestet, um sicherzustellen, dass sie korrekt gerendert wird und alle Props korrekt verarbeitet."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"test('renders all options correctly', () => {\n  render(<Select options={options} />);\n  \n  const selectElement = screen.getByRole('combobox');\n  const optionElements = screen.getAllByRole('option');\n  \n  expect(optionElements).toHaveLength(3);\n  expect(optionElements[0]).toHaveTextContent('Option 1');\n  expect(optionElements[1]).toHaveTextContent('Option 2');\n  expect(optionElements[2]).toHaveTextContent('Option 3');\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tabview-komponente",children:"TabView-Komponente"}),"\n",(0,s.jsx)(n.p,{children:"Die TabView-Komponente wurde getestet, um sicherzustellen, dass sie korrekt gerendert wird und alle Props korrekt verarbeitet."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"test('changes active tab when clicked', async () => {\n  render(\n    <TabView>\n      <Tab label=\"Tab 1\">\n        <TabPanel>Content 1</TabPanel>\n      </Tab>\n      <Tab label=\"Tab 2\">\n        <TabPanel>Content 2</TabPanel>\n      </Tab>\n      <Tab label=\"Tab 3\">\n        <TabPanel>Content 3</TabPanel>\n      </Tab>\n    </TabView>\n  );\n  \n  // Initially, the first tab is active\n  expect(screen.getByText('Content 1')).toBeInTheDocument();\n  \n  // Click on the second tab\n  await userEvent.click(screen.getByText('Tab 2'));\n  \n  // Now the second tab should be active\n  expect(screen.queryByText('Content 1')).not.toBeInTheDocument();\n  expect(screen.getByText('Content 2')).toBeInTheDocument();\n  expect(screen.queryByText('Content 3')).not.toBeInTheDocument();\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"integrationstests",children:"Integrationstests"}),"\n",(0,s.jsx)(n.h3,{id:"formular-integration",children:"Formular-Integration"}),"\n",(0,s.jsx)(n.p,{children:"Der Formular-Integrationstest stellt sicher, dass alle Formular-Elemente korrekt zusammenarbeiten."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'test(\'handles form submission with all form elements\', async () => {\n  const handleSubmit = jest.fn(e => e.preventDefault());\n  \n  render(\n    <form data-testid="test-form" onSubmit={handleSubmit}>\n      <Input label="Name" name="name" placeholder="Enter your name" />\n      <Input label="Email" name="email" type="email" placeholder="Enter your email" />\n      <Select \n        label="Country" \n        name="country"\n        options={[\n          { value: \'de\', label: \'Germany\' },\n          { value: \'fr\', label: \'France\' },\n          { value: \'uk\', label: \'United Kingdom\' }\n        ]} \n      />\n      <RadioGroup name="gender" label="Gender">\n        <Radio value="male" label="Male" />\n        <Radio value="female" label="Female" />\n        <Radio value="other" label="Other" />\n      </RadioGroup>\n      <Checkbox name="terms" label="I agree to the terms and conditions" />\n      <Button type="submit">Submit</Button>\n    </form>\n  );\n  \n  // Fill out the form\n  await userEvent.type(screen.getByLabelText(\'Name\'), \'John Doe\');\n  await userEvent.type(screen.getByLabelText(\'Email\'), \'john@example.com\');\n  \n  // Select a country\n  await userEvent.selectOptions(screen.getByLabelText(\'Country\'), \'fr\');\n  \n  // Select a gender\n  await userEvent.click(screen.getByLabelText(\'Male\'));\n  \n  // Check the terms checkbox\n  await userEvent.click(screen.getByLabelText(\'I agree to the terms and conditions\'));\n  \n  // Submit the form\n  await userEvent.click(screen.getByRole(\'button\', { name: \'Submit\' }));\n  \n  expect(handleSubmit).toHaveBeenCalledTimes(1);\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"theme-integration",children:"Theme-Integration"}),"\n",(0,s.jsx)(n.p,{children:"Der Theme-Integrationstest stellt sicher, dass alle Komponenten korrekt auf Theme\xe4nderungen reagieren."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"test('components render correctly with light theme', () => {\n  render(\n    <ThemeProvider initialTheme=\"light\">\n      <Card>\n        <h2>Theme Test</h2>\n        <Input label=\"Test Input\" />\n        <Button>Test Button</Button>\n      </Card>\n    </ThemeProvider>\n  );\n  \n  // In light theme, the card should have a white background\n  expect(screen.getByText('Theme Test').closest('.bg-white')).toBeInTheDocument();\n  \n  // The button should have primary color classes\n  expect(screen.getByRole('button')).toHaveClass('bg-primary-600');\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testabdeckung",children:"Testabdeckung"}),"\n",(0,s.jsx)(n.p,{children:"Die implementierten Tests decken die folgenden Aspekte der Komponenten ab:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rendering"}),": Korrekte Darstellung der Komponenten"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Props"}),": Korrekte Verarbeitung aller Props"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interaktionen"}),": Korrekte Reaktion auf Benutzerinteraktionen"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zust\xe4nde"}),": Korrekte Darstellung verschiedener Zust\xe4nde"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Accessibility"}),": Korrekte Implementierung von Accessibility-Attributen"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integration"}),": Korrekte Zusammenarbeit der Komponenten"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"n\xe4chste-schritte",children:"N\xe4chste Schritte"}),"\n",(0,s.jsx)(n.p,{children:"Die folgenden Schritte sind als N\xe4chstes geplant:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implementierung von Unit-Tests f\xfcr weitere Komponenten"}),": Alert, Badge, Modal, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implementierung von weiteren Integrationstests"}),": Tests f\xfcr komplexere UI-Patterns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implementierung von Snapshot-Tests"}),": F\xfcr visuelle Regressionstests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Erh\xf6hung der Testabdeckung"}),": F\xfcr komplexere Komponenten und Edge-Cases"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"fazit",children:"Fazit"}),"\n",(0,s.jsx)(n.p,{children:"Die implementierten Unit-Tests und Integrationstests bieten eine solide Grundlage f\xfcr die Qualit\xe4tssicherung der Smolitux UI-Bibliothek. Die Tests stellen sicher, dass die Komponenten korrekt funktionieren und alle Props korrekt verarbeiten. Die Integrationstests stellen sicher, dass die Komponenten korrekt zusammenarbeiten."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);