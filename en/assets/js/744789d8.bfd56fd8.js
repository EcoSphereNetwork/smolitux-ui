"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7196],{3277:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"testing/implementation/accessibility-tests","title":"Barrierefreiheitstests f\xfcr Smolitux UI Komponenten","description":"Dieser Leitfaden beschreibt die Implementierung von Barrierefreiheitstests (Accessibility Tests) f\xfcr die Smolitux UI Komponenten, um sicherzustellen, dass alle Komponenten den WCAG 2.1 AA-Standards entsprechen.","source":"@site/docs/testing/implementation/accessibility-tests.md","sourceDirName":"testing/implementation","slug":"/testing/implementation/accessibility-tests","permalink":"/smolitux-ui/en/docs/testing/implementation/accessibility-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/docs/testing/implementation/accessibility-tests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"wikiSidebar","previous":{"title":"Teststandards und Best Practices f\xfcr Smolitux UI","permalink":"/smolitux-ui/en/docs/testing/testing-standards"},"next":{"title":"Automatisierte Barrierefreiheitstests","permalink":"/smolitux-ui/en/docs/testing/implementation/automated-a11y-tests"}}');var i=t(4848),r=t(8453);const l={},a="Barrierefreiheitstests f\xfcr Smolitux UI Komponenten",o={},d=[{value:"Warum Barrierefreiheitstests?",id:"warum-barrierefreiheitstests",level:2},{value:"Testmethoden",id:"testmethoden",level:2},{value:"1. Automatisierte Tests mit jest-axe",id:"1-automatisierte-tests-mit-jest-axe",level:3},{value:"Installation",id:"installation",level:4},{value:"Beispiel-Implementierung",id:"beispiel-implementierung",level:4},{value:"2. Manuelle Tests mit Screenreadern",id:"2-manuelle-tests-mit-screenreadern",level:3},{value:"Zu testende Screenreader:",id:"zu-testende-screenreader",level:4},{value:"Testprozess:",id:"testprozess",level:4},{value:"3. Tastaturnavigationstests",id:"3-tastaturnavigationstests",level:3},{value:"Zu testende Aspekte:",id:"zu-testende-aspekte",level:4},{value:"Beispiel-Testfall:",id:"beispiel-testfall",level:4},{value:"4. Farbkontrast und visuelle Tests",id:"4-farbkontrast-und-visuelle-tests",level:3},{value:"Tools:",id:"tools",level:4},{value:"Zu testende Aspekte:",id:"zu-testende-aspekte-1",level:4},{value:"Barrierefreiheits-Checkliste f\xfcr Komponenten",id:"barrierefreiheits-checkliste-f\xfcr-komponenten",level:2},{value:"Semantik und Struktur",id:"semantik-und-struktur",level:3},{value:"ARIA-Attribute",id:"aria-attribute",level:3},{value:"Tastaturnavigation",id:"tastaturnavigation",level:3},{value:"Visuelles Design",id:"visuelles-design",level:3},{value:"Screenreader-Unterst\xfctzung",id:"screenreader-unterst\xfctzung",level:3},{value:"Integration in den Entwicklungsprozess",id:"integration-in-den-entwicklungsprozess",level:2},{value:"1. Automatisierte Tests in CI/CD",id:"1-automatisierte-tests-in-cicd",level:3},{value:"2. Pull-Request-Checkliste",id:"2-pull-request-checkliste",level:3},{value:"3. Dokumentation",id:"3-dokumentation",level:3},{value:"Ressourcen und Tools",id:"ressourcen-und-tools",level:2},{value:"Fazit",id:"fazit",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"barrierefreiheitstests-f\xfcr-smolitux-ui-komponenten",children:"Barrierefreiheitstests f\xfcr Smolitux UI Komponenten"})}),"\n",(0,i.jsx)(n.p,{children:"Dieser Leitfaden beschreibt die Implementierung von Barrierefreiheitstests (Accessibility Tests) f\xfcr die Smolitux UI Komponenten, um sicherzustellen, dass alle Komponenten den WCAG 2.1 AA-Standards entsprechen."}),"\n",(0,i.jsx)(n.h2,{id:"warum-barrierefreiheitstests",children:"Warum Barrierefreiheitstests?"}),"\n",(0,i.jsx)(n.p,{children:"Barrierefreiheit ist ein wesentlicher Aspekt moderner Webanwendungen. Durch die Implementierung von Barrierefreiheitstests stellen wir sicher, dass:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Alle Benutzer, unabh\xe4ngig von ihren F\xe4higkeiten, unsere Komponenten nutzen k\xf6nnen"}),"\n",(0,i.jsx)(n.li,{children:"Wir gesetzliche Anforderungen erf\xfcllen"}),"\n",(0,i.jsx)(n.li,{children:"Die Benutzererfahrung f\xfcr alle verbessert wird"}),"\n",(0,i.jsx)(n.li,{children:"SEO-Vorteile erzielt werden"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testmethoden",children:"Testmethoden"}),"\n",(0,i.jsx)(n.h3,{id:"1-automatisierte-tests-mit-jest-axe",children:"1. Automatisierte Tests mit jest-axe"}),"\n",(0,i.jsxs)(n.p,{children:["Wir verwenden ",(0,i.jsx)(n.a,{href:"https://github.com/nickcolley/jest-axe",children:"jest-axe"})," f\xfcr automatisierte Barrierefreiheitstests in unseren Jest-Tests."]}),"\n",(0,i.jsx)(n.h4,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev jest-axe @types/jest-axe\n"})}),"\n",(0,i.jsx)(n.h4,{id:"beispiel-implementierung",children:"Beispiel-Implementierung"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { render } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { Button } from '../Button';\n\nexpect.extend(toHaveNoViolations);\n\ndescribe('Button Accessibility', () => {\n  it('should not have accessibility violations', async () => {\n    const { container } = render(<Button>Click me</Button>);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  it('should not have accessibility violations when disabled', async () => {\n    const { container } = render(<Button isDisabled>Disabled Button</Button>);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  it('should not have accessibility violations as icon button with aria-label', async () => {\n    const { container } = render(\n      <Button isIconButton leftIcon={<span>\ud83d\udd0d</span>} aria-label=\"Search\" />\n    );\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-manuelle-tests-mit-screenreadern",children:"2. Manuelle Tests mit Screenreadern"}),"\n",(0,i.jsx)(n.p,{children:"Automatisierte Tests k\xf6nnen nicht alle Barrierefreiheitsprobleme erkennen. Daher sind manuelle Tests mit Screenreadern unerl\xe4sslich."}),"\n",(0,i.jsx)(n.h4,{id:"zu-testende-screenreader",children:"Zu testende Screenreader:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NVDA"})," (Windows)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"VoiceOver"})," (macOS/iOS)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"JAWS"})," (Windows, kommerziell)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TalkBack"})," (Android)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"testprozess",children:"Testprozess:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Komponente mit Screenreader navigieren"}),"\n",(0,i.jsx)(n.li,{children:"\xdcberpr\xfcfen, ob alle Informationen korrekt vorgelesen werden"}),"\n",(0,i.jsx)(n.li,{children:"\xdcberpr\xfcfen, ob alle interaktiven Elemente bedienbar sind"}),"\n",(0,i.jsx)(n.li,{children:"Testen mit ausschlie\xdflicher Tastaturnavigation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-tastaturnavigationstests",children:"3. Tastaturnavigationstests"}),"\n",(0,i.jsx)(n.p,{children:"Alle interaktiven Komponenten m\xfcssen vollst\xe4ndig mit der Tastatur bedienbar sein."}),"\n",(0,i.jsx)(n.h4,{id:"zu-testende-aspekte",children:"Zu testende Aspekte:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fokusreihenfolge"}),": Logische Tab-Reihenfolge"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fokus-Sichtbarkeit"}),": Deutlich sichtbarer Fokusindikator"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tastaturaktivierung"}),": Aktivierung mit Enter/Space"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tastaturnavigation"}),": F\xfcr komplexe Komponenten (z.B. Dropdown mit Pfeiltasten)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tastaturfallen"}),': Keine "Fallen", aus denen man nicht herausnavigieren kann']}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"beispiel-testfall",children:"Beispiel-Testfall:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { render, fireEvent } from '@testing-library/react';\nimport { Button } from '../Button';\n\ndescribe('Button Keyboard Navigation', () => {\n  it('should be focusable with tab key', () => {\n    const { getByRole } = render(<Button>Click me</Button>);\n    const button = getByRole('button');\n    \n    // Pr\xfcfen, ob der Button fokussierbar ist\n    button.focus();\n    expect(document.activeElement).toBe(button);\n  });\n\n  it('should be activatable with Enter key', () => {\n    const handleClick = jest.fn();\n    const { getByRole } = render(<Button onClick={handleClick}>Click me</Button>);\n    const button = getByRole('button');\n    \n    button.focus();\n    fireEvent.keyDown(button, { key: 'Enter', code: 'Enter' });\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('should be activatable with Space key', () => {\n    const handleClick = jest.fn();\n    const { getByRole } = render(<Button onClick={handleClick}>Click me</Button>);\n    const button = getByRole('button');\n    \n    button.focus();\n    fireEvent.keyDown(button, { key: ' ', code: 'Space' });\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-farbkontrast-und-visuelle-tests",children:"4. Farbkontrast und visuelle Tests"}),"\n",(0,i.jsx)(n.p,{children:"Wir m\xfcssen sicherstellen, dass alle Komponenten ausreichenden Farbkontrast bieten."}),"\n",(0,i.jsx)(n.h4,{id:"tools",children:"Tools:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storybook a11y addon"}),": Automatische Kontrastpr\xfcfung"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lighthouse"}),": F\xfcr umfassendere Pr\xfcfungen"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WebAIM Color Contrast Checker"}),": F\xfcr manuelle \xdcberpr\xfcfungen"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"zu-testende-aspekte-1",children:"Zu testende Aspekte:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Text zu Hintergrund: Mindestens 4.5:1 (AA) oder 7:1 (AAA)"}),"\n",(0,i.jsx)(n.li,{children:"Gro\xdfe Texte: Mindestens 3:1 (AA)"}),"\n",(0,i.jsx)(n.li,{children:"UI-Komponenten und grafische Objekte: Mindestens 3:1"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"barrierefreiheits-checkliste-f\xfcr-komponenten",children:"Barrierefreiheits-Checkliste f\xfcr Komponenten"}),"\n",(0,i.jsx)(n.p,{children:"F\xfcr jede Komponente sollten folgende Aspekte \xfcberpr\xfcft werden:"}),"\n",(0,i.jsx)(n.h3,{id:"semantik-und-struktur",children:"Semantik und Struktur"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Korrekte HTML-Elemente werden verwendet"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Semantische Struktur ist logisch"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","\xdcberschriften werden korrekt verwendet"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"aria-attribute",children:"ARIA-Attribute"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Korrekte ARIA-Rollen werden verwendet"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","ARIA-Attribute werden korrekt gesetzt"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","ARIA-Zust\xe4nde werden aktualisiert (z.B. aria-expanded, aria-selected)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tastaturnavigation",children:"Tastaturnavigation"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Alle interaktiven Elemente sind mit der Tastatur bedienbar"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Fokusreihenfolge ist logisch"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Fokusindikator ist deutlich sichtbar"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Keine Tastaturfallen"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"visuelles-design",children:"Visuelles Design"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Ausreichender Farbkontrast"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Informationen werden nicht nur durch Farbe vermittelt"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Text ist auf 200% vergr\xf6\xdferbar ohne Funktionsverlust"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Responsive Design funktioniert bei verschiedenen Viewport-Gr\xf6\xdfen"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"screenreader-unterst\xfctzung",children:"Screenreader-Unterst\xfctzung"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Alle Inhalte sind f\xfcr Screenreader zug\xe4nglich"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Alternative Texte f\xfcr Bilder und Icons"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Status\xe4nderungen werden angek\xfcndigt"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Komplexe Komponenten haben klare Anweisungen"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-in-den-entwicklungsprozess",children:"Integration in den Entwicklungsprozess"}),"\n",(0,i.jsx)(n.h3,{id:"1-automatisierte-tests-in-cicd",children:"1. Automatisierte Tests in CI/CD"}),"\n",(0,i.jsx)(n.p,{children:"Barrierefreiheitstests sollten in die CI/CD-Pipeline integriert werden:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Beispiel f\xfcr GitHub Actions\njobs:\n  accessibility:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm ci\n      - name: Run accessibility tests\n        run: npm run test:a11y\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-pull-request-checkliste",children:"2. Pull-Request-Checkliste"}),"\n",(0,i.jsx)(n.p,{children:"Jeder Pull Request sollte eine Barrierefreiheits-Checkliste enthalten:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"## Barrierefreiheits-Checkliste\n- [ ] Automatisierte Tests bestanden\n- [ ] Manuelle Screenreader-Tests durchgef\xfchrt\n- [ ] Tastaturnavigation getestet\n- [ ] Farbkontrast \xfcberpr\xfcft\n- [ ] ARIA-Attribute korrekt implementiert\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-dokumentation",children:"3. Dokumentation"}),"\n",(0,i.jsx)(n.p,{children:"Jede Komponente sollte einen Abschnitt zur Barrierefreiheit in ihrer Dokumentation enthalten:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"## Barrierefreiheit\n\nDie Button-Komponente wurde f\xfcr optimale Barrierefreiheit entwickelt:\n\n- Verwendet native Button-Elemente f\xfcr optimale Screenreader-Unterst\xfctzung\n- Unterst\xfctzt Tastaturaktivierung mit Enter und Space\n- Bietet sichtbaren Fokusindikator\n- Setzt korrekte ARIA-Attribute f\xfcr verschiedene Zust\xe4nde\n- Erf\xfcllt WCAG 2.1 AA-Kontrastanforderungen\n"})}),"\n",(0,i.jsx)(n.h2,{id:"ressourcen-und-tools",children:"Ressourcen und Tools"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.w3.org/TR/WCAG21/",children:"WCAG 2.1 Richtlinien"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/nickcolley/jest-axe",children:"jest-axe"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://storybook.js.org/addons/@storybook/addon-a11y",children:"Storybook a11y addon"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developers.google.com/web/tools/lighthouse",children:"Lighthouse"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://webaim.org/resources/contrastchecker/",children:"WebAIM Color Contrast Checker"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.nvaccess.org/",children:"NVDA Screenreader"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.deque.com/axe/",children:"axe DevTools"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fazit",children:"Fazit"}),"\n",(0,i.jsx)(n.p,{children:"Die Implementierung umfassender Barrierefreiheitstests ist ein kontinuierlicher Prozess. Durch die Integration dieser Tests in unseren Entwicklungsprozess stellen wir sicher, dass die Smolitux UI Komponenten f\xfcr alle Benutzer zug\xe4nglich sind und den WCAG 2.1 AA-Standards entsprechen."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);