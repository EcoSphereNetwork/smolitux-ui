"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5036],{6473:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"testing/test-strategy","title":"Teststrategie","description":"Diese Teststrategie beschreibt den Ansatz f\xfcr das Testen von Smolitux-UI-Komponenten.","source":"@site/docs/testing/test-strategy.md","sourceDirName":"testing","slug":"/testing/test-strategy","permalink":"/smolitux-ui/docs/testing/test-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/docs/testing/test-strategy.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"wikiSidebar","previous":{"title":"Zug\xe4nglichkeitsrichtlinien","permalink":"/smolitux-ui/docs/guidelines/accessibility"},"next":{"title":"Formular-Beispiele","permalink":"/smolitux-ui/docs/examples/form-examples"}}');var i=t(4848),r=t(8453);const l={sidebar_position:1},o="Teststrategie",c={},d=[{value:"\xdcbersicht",id:"\xfcbersicht",level:2},{value:"Testebenen",id:"testebenen",level:2},{value:"1. Unit-Tests",id:"1-unit-tests",level:3},{value:"2. Komponententests",id:"2-komponententests",level:3},{value:"3. Integrationstests",id:"3-integrationstests",level:3},{value:"4. Visuelle Regressionstests",id:"4-visuelle-regressionstests",level:3},{value:"5. Zug\xe4nglichkeitstests",id:"5-zug\xe4nglichkeitstests",level:3},{value:"6. End-to-End-Tests",id:"6-end-to-end-tests",level:3},{value:"Testabdeckung",id:"testabdeckung",level:2},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"Testdaten",id:"testdaten",level:2},{value:"Testumgebungen",id:"testumgebungen",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Verantwortlichkeiten",id:"verantwortlichkeiten",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"teststrategie",children:"Teststrategie"})}),"\n",(0,i.jsx)(n.p,{children:"Diese Teststrategie beschreibt den Ansatz f\xfcr das Testen von Smolitux-UI-Komponenten."}),"\n",(0,i.jsx)(n.h2,{id:"\xfcbersicht",children:"\xdcbersicht"}),"\n",(0,i.jsx)(n.p,{children:"Smolitux-UI verwendet einen umfassenden Testansatz, der verschiedene Testebenen und -methoden kombiniert, um eine hohe Qualit\xe4t und Zuverl\xe4ssigkeit der Komponenten zu gew\xe4hrleisten."}),"\n",(0,i.jsx)(n.h2,{id:"testebenen",children:"Testebenen"}),"\n",(0,i.jsx)(n.h3,{id:"1-unit-tests",children:"1. Unit-Tests"}),"\n",(0,i.jsx)(n.p,{children:"Unit-Tests pr\xfcfen die kleinsten testbaren Teile der Anwendung isoliert."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Werkzeuge"}),": Jest, React Testing Library"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Beispiel"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react';\nimport Button from './Button';\n\ntest('renders button with text', () => {\n  render(<Button>Klick mich</Button>);\n  expect(screen.getByText('Klick mich')).toBeInTheDocument();\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-komponententests",children:"2. Komponententests"}),"\n",(0,i.jsx)(n.p,{children:"Komponententests pr\xfcfen das Verhalten einzelner Komponenten, einschlie\xdflich ihrer Interaktionen."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Werkzeuge"}),": Jest, React Testing Library, user-event"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Beispiel"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Button from './Button';\n\ntest('calls onClick when clicked', async () => {\n  const handleClick = jest.fn();\n  render(<Button onClick={handleClick}>Klick mich</Button>);\n  \n  await userEvent.click(screen.getByText('Klick mich'));\n  expect(handleClick).toHaveBeenCalledTimes(1);\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-integrationstests",children:"3. Integrationstests"}),"\n",(0,i.jsx)(n.p,{children:"Integrationstests pr\xfcfen das Zusammenspiel mehrerer Komponenten."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Werkzeuge"}),": Jest, React Testing Library"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Beispiel"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport Form from './Form';\nimport Button from './Button';\nimport Input from './Input';\n\ntest('form submission with input data', async () => {\n  const handleSubmit = jest.fn();\n  render(\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"username\" />\n      <Button type=\"submit\">Absenden</Button>\n    </Form>\n  );\n  \n  await userEvent.type(screen.getByRole('textbox'), 'testuser');\n  await userEvent.click(screen.getByText('Absenden'));\n  \n  expect(handleSubmit).toHaveBeenCalledWith({ username: 'testuser' });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-visuelle-regressionstests",children:"4. Visuelle Regressionstests"}),"\n",(0,i.jsx)(n.p,{children:"Visuelle Regressionstests pr\xfcfen das Erscheinungsbild der Komponenten."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Werkzeuge"}),": Storybook, Chromatic, Percy"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Prozess"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Komponenten in Storybook dokumentieren"}),"\n",(0,i.jsx)(n.li,{children:"Snapshots mit Chromatic oder Percy erstellen"}),"\n",(0,i.jsx)(n.li,{children:"Visuelle \xc4nderungen \xfcberpr\xfcfen und genehmigen"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-zug\xe4nglichkeitstests",children:"5. Zug\xe4nglichkeitstests"}),"\n",(0,i.jsx)(n.p,{children:"Zug\xe4nglichkeitstests pr\xfcfen die Konformit\xe4t mit Zug\xe4nglichkeitsstandards."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Werkzeuge"}),": jest-axe, Storybook a11y addon"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Beispiel"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { render } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport Button from './Button';\n\nexpect.extend(toHaveNoViolations);\n\ntest('button has no accessibility violations', async () => {\n  const { container } = render(<Button>Klick mich</Button>);\n  const results = await axe(container);\n  expect(results).toHaveNoViolations();\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"6-end-to-end-tests",children:"6. End-to-End-Tests"}),"\n",(0,i.jsx)(n.p,{children:"End-to-End-Tests pr\xfcfen das Verhalten der Komponenten in einer realen Umgebung."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Werkzeuge"}),": Cypress, Playwright"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Beispiel"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Cypress-Test\ndescribe('Button Component', () => {\n  it('should trigger action on click', () => {\n    cy.visit('/button-demo');\n    cy.get('[data-testid=\"submit-button\"]').click();\n    cy.get('[data-testid=\"result\"]').should('have.text', 'Button clicked');\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testabdeckung",children:"Testabdeckung"}),"\n",(0,i.jsx)(n.p,{children:"Smolitux-UI strebt eine Testabdeckung von mindestens 80% f\xfcr alle Komponenten an. Die Testabdeckung wird mit Jest gemessen und in CI/CD-Pipelines \xfcberwacht."}),"\n",(0,i.jsx)(n.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(n.p,{children:"Alle Tests werden in der CI/CD-Pipeline ausgef\xfchrt:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pull Request"}),": Unit-Tests, Komponententests, Zug\xe4nglichkeitstests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Merge in main"}),": Alle Tests, einschlie\xdflich visueller Regressionstests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Release"}),": End-to-End-Tests in verschiedenen Browsern"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testdaten",children:"Testdaten"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mocks"}),": F\xfcr externe Abh\xe4ngigkeiten"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fixtures"}),": F\xfcr komplexe Datenstrukturen"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Factories"}),": F\xfcr die Generierung von Testdaten"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testumgebungen",children:"Testumgebungen"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lokal"}),": Entwicklungsumgebung f\xfcr schnelles Feedback"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CI"}),": Isolierte Umgebung f\xfcr konsistente Tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Staging"}),": Produktions\xe4hnliche Umgebung f\xfcr End-to-End-Tests"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testbarkeit"}),": Komponenten sollten von Anfang an testbar gestaltet werden"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolation"}),": Tests sollten isoliert und unabh\xe4ngig voneinander sein"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Wartbarkeit"}),": Tests sollten einfach zu verstehen und zu warten sein"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Geschwindigkeit"}),": Tests sollten schnell ausgef\xfchrt werden k\xf6nnen"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zuverl\xe4ssigkeit"}),": Tests sollten konsistente Ergebnisse liefern"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"verantwortlichkeiten",children:"Verantwortlichkeiten"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Entwickler"}),": Unit-Tests, Komponententests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"QA-Team"}),": Integrationstests, End-to-End-Tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Accessibility-Experten"}),": Zug\xe4nglichkeitstests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Design-Team"}),": Visuelle Regressionstests"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);