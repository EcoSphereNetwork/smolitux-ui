"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1855],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},9930:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"testing/testplan/Visuelle-Tests","title":"Visuelle Regressionstests","description":"Dieses Dokument beschreibt die Strategie und Implementierung von visuellen Regressionstests f\xfcr die Komponenten der smolitux UI-Bibliothek.","source":"@site/wiki/testing/testplan/06-Visuelle-Tests.md","sourceDirName":"testing/testplan","slug":"/testing/testplan/Visuelle-Tests","permalink":"/smolitux-ui/wiki/testing/testplan/Visuelle-Tests","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/wiki/wiki/testing/testplan/06-Visuelle-Tests.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Spezielle Komponententests","permalink":"/smolitux-ui/wiki/testing/testplan/Spezielle-Komponententests"},"next":{"title":"Browserkompatibilitaetstests","permalink":"/smolitux-ui/wiki/testing/testplan/Browserkompatibilitaetstests"}}');var o=t(4848),i=t(8453);const r={},l="Visuelle Regressionstests",a={},d=[{value:"1. Zweck visueller Regressionstests",id:"1-zweck-visueller-regressionstests",level:2},{value:"2. Tools f\xfcr visuelle Regressionstests",id:"2-tools-f\xfcr-visuelle-regressionstests",level:2},{value:"2.1 Chromatic",id:"21-chromatic",level:3},{value:"2.2 Storybook",id:"22-storybook",level:3},{value:"2.3 Jest-Snapshots",id:"23-jest-snapshots",level:3},{value:"3. Einrichtung von Storybook f\xfcr visuelle Tests",id:"3-einrichtung-von-storybook-f\xfcr-visuelle-tests",level:2},{value:"3.1 Storybook-Konfiguration",id:"31-storybook-konfiguration",level:3},{value:"3.2 Theme-Provider in Storybook",id:"32-theme-provider-in-storybook",level:3},{value:"4. Story-Struktur f\xfcr visuelle Tests",id:"4-story-struktur-f\xfcr-visuelle-tests",level:2},{value:"4.1 Beispiel: Button-Stories",id:"41-beispiel-button-stories",level:3},{value:"4.2 Beispiel: Komponenten-Zust\xe4nde in Stories",id:"42-beispiel-komponenten-zust\xe4nde-in-stories",level:3},{value:"5. Chromatic-Integration mit GitHub Actions",id:"5-chromatic-integration-mit-github-actions",level:2},{value:"6. Best Practices f\xfcr visuelle Tests",id:"6-best-practices-f\xfcr-visuelle-tests",level:2},{value:"7. Workflow f\xfcr visuelle Tests",id:"7-workflow-f\xfcr-visuelle-tests",level:2},{value:"8. Visuelle Testdokumentation",id:"8-visuelle-testdokumentation",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"visuelle-regressionstests",children:"Visuelle Regressionstests"})}),"\n",(0,o.jsx)(n.p,{children:"Dieses Dokument beschreibt die Strategie und Implementierung von visuellen Regressionstests f\xfcr die Komponenten der smolitux UI-Bibliothek."}),"\n",(0,o.jsx)(n.h2,{id:"1-zweck-visueller-regressionstests",children:"1. Zweck visueller Regressionstests"}),"\n",(0,o.jsx)(n.p,{children:"Visuelle Regressionstests sind eine wichtige Erg\xe4nzung zu Unit- und Integrationstests, da sie sicherstellen, dass das visuelle Erscheinungsbild der Komponenten konsistent bleibt. Diese Tests sind besonders wichtig f\xfcr:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Erkennung unbeabsichtigter \xc4nderungen im Design"}),"\n",(0,o.jsx)(n.li,{children:"Sicherstellung der korrekten Darstellung in verschiedenen Zust\xe4nden"}),"\n",(0,o.jsx)(n.li,{children:"Validierung der visuellen Konsistenz \xfcber alle Komponenten hinweg"}),"\n",(0,o.jsx)(n.li,{children:"\xdcberpr\xfcfung von Design\xe4nderungen und Theme-Anwendungen"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"2-tools-f\xfcr-visuelle-regressionstests",children:"2. Tools f\xfcr visuelle Regressionstests"}),"\n",(0,o.jsx)(n.h3,{id:"21-chromatic",children:"2.1 Chromatic"}),"\n",(0,o.jsx)(n.p,{children:"Chromatic ist ein Tool f\xfcr visuelle Regressionstests, das eng mit Storybook integriert ist. Es erfasst Snapshots aller Storybook-Stories und vergleicht sie mit fr\xfcheren Versionen."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Installation\nnpm install --save-dev chromatic\n\n# Ausf\xfchrung\nnpx chromatic --project-token=<your-token>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"22-storybook",children:"2.2 Storybook"}),"\n",(0,o.jsx)(n.p,{children:"Storybook dient als Grundlage f\xfcr visuelle Tests. Jede Komponente sollte Stories f\xfcr ihre verschiedenen Zust\xe4nde haben. Diese Stories werden dann f\xfcr die visuellen Tests verwendet."}),"\n",(0,o.jsx)(n.h3,{id:"23-jest-snapshots",children:"2.3 Jest-Snapshots"}),"\n",(0,o.jsx)(n.p,{children:"Jest-Snapshots k\xf6nnen f\xfcr kleinere, weniger komplexe visuelle Tests verwendet werden:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// Button.snapshot.test.tsx\nimport React from 'react';\nimport { render } from '@testing-library/react';\nimport { Button } from '../Button';\n\ndescribe('Button Snapshots', () => {\n  test('primary button matches snapshot', () => {\n    const { container } = render(<Button variant=\"primary\">Primary</Button>);\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test('secondary button matches snapshot', () => {\n    const { container } = render(<Button variant=\"secondary\">Secondary</Button>);\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  test('disabled button matches snapshot', () => {\n    const { container } = render(<Button disabled>Disabled</Button>);\n    expect(container.firstChild).toMatchSnapshot();\n  });\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"3-einrichtung-von-storybook-f\xfcr-visuelle-tests",children:"3. Einrichtung von Storybook f\xfcr visuelle Tests"}),"\n",(0,o.jsx)(n.h3,{id:"31-storybook-konfiguration",children:"3.1 Storybook-Konfiguration"}),"\n",(0,o.jsxs)(n.p,{children:["Die ",(0,o.jsx)(n.code,{children:".storybook/main.js"}),"-Datei sollte f\xfcr visuelle Tests konfiguriert werden:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  stories: [\n    '../packages/@smolitux/**/*.stories.@(tsx|mdx)',\n  ],\n  addons: [\n    '@storybook/addon-links',\n    '@storybook/addon-essentials',\n    '@storybook/addon-interactions',\n    '@storybook/addon-a11y',\n    '@storybook/addon-viewport', // F\xfcr responsive Tests\n  ],\n  typescript: {\n    check: false,\n    reactDocgen: 'react-docgen-typescript',\n  },\n  core: {\n    builder: '@storybook/builder-webpack5',\n  },\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"32-theme-provider-in-storybook",children:"3.2 Theme-Provider in Storybook"}),"\n",(0,o.jsxs)(n.p,{children:["Erstellen Sie eine ",(0,o.jsx)(n.code,{children:".storybook/preview.js"})," f\xfcr globale Dekorationen:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import React from 'react';\nimport { ThemeProvider } from '@smolitux/theme';\n\nexport const parameters = {\n  actions: { argTypesRegex: '^on[A-Z].*' },\n  controls: {\n    matchers: {\n      color: /(background|color)$/i,\n      date: /Date$/,\n    },\n  },\n  layout: 'padded',\n  backgrounds: {\n    default: 'light',\n    values: [\n      { name: 'light', value: '#ffffff' },\n      { name: 'dark', value: '#1a202c' },\n    ],\n  },\n};\n\nexport const decorators = [\n  (Story, context) => {\n    // Bestimme Theme basierend auf ausgew\xe4hltem Hintergrund\n    const themeMode = context.globals.backgrounds?.value === '#1a202c' ? 'dark' : 'light';\n    \n    return (\n      <ThemeProvider initialTheme={themeMode}>\n        <Story />\n      </ThemeProvider>\n    );\n  },\n];\n\n// F\xfcge Theme-Wechsel-Tool hinzu\nexport const globalTypes = {\n  theme: {\n    name: 'Theme',\n    description: 'Global theme for components',\n    defaultValue: 'light',\n    toolbar: {\n      icon: 'circlehollow',\n      items: [\n        { value: 'light', icon: 'sun', title: 'Light' },\n        { value: 'dark', icon: 'moon', title: 'Dark' },\n      ],\n      showName: true,\n    },\n  },\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"4-story-struktur-f\xfcr-visuelle-tests",children:"4. Story-Struktur f\xfcr visuelle Tests"}),"\n",(0,o.jsx)(n.p,{children:"Jede Komponente sollte Stories f\xfcr ihre verschiedenen Zust\xe4nde haben:"}),"\n",(0,o.jsx)(n.h3,{id:"41-beispiel-button-stories",children:"4.1 Beispiel: Button-Stories"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// Button.stories.tsx\nimport React from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Button } from './Button';\n\nconst meta: Meta<typeof Button> = {\n  title: 'Components/Button',\n  component: Button,\n  argTypes: {\n    variant: {\n      control: { type: 'select' },\n      options: ['primary', 'secondary', 'outline', 'ghost'],\n      description: 'The visual style of the button',\n    },\n    size: {\n      control: { type: 'select' },\n      options: ['sm', 'md', 'lg'],\n      description: 'The size of the button',\n    },\n    disabled: {\n      control: 'boolean',\n      description: 'Whether the button is disabled',\n    },\n    loading: {\n      control: 'boolean',\n      description: 'Whether the button is in loading state',\n    },\n    fullWidth: {\n      control: 'boolean',\n      description: 'Whether the button should take full width',\n    },\n    leftIcon: {\n      control: { disable: true },\n      description: 'Icon to display on the left side',\n    },\n    rightIcon: {\n      control: { disable: true },\n      description: 'Icon to display on the right side',\n    },\n  },\n  parameters: {\n    controls: { expanded: true },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Primary: Story = {\n  args: {\n    children: 'Primary Button',\n    variant: 'primary',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    children: 'Secondary Button',\n    variant: 'secondary',\n  },\n};\n\nexport const Outline: Story = {\n  args: {\n    children: 'Outline Button',\n    variant: 'outline',\n  },\n};\n\nexport const Ghost: Story = {\n  args: {\n    children: 'Ghost Button',\n    variant: 'ghost',\n  },\n};\n\nexport const Small: Story = {\n  args: {\n    children: 'Small Button',\n    size: 'sm',\n  },\n};\n\nexport const Medium: Story = {\n  args: {\n    children: 'Medium Button',\n    size: 'md',\n  },\n};\n\nexport const Large: Story = {\n  args: {\n    children: 'Large Button',\n    size: 'lg',\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    children: 'Disabled Button',\n    disabled: true,\n  },\n};\n\nexport const Loading: Story = {\n  args: {\n    children: 'Loading Button',\n    loading: true,\n  },\n};\n\nexport const FullWidth: Story = {\n  args: {\n    children: 'Full Width Button',\n    fullWidth: true,\n  },\n};\n\nexport const WithLeftIcon: Story = {\n  args: {\n    children: 'Button with Left Icon',\n    leftIcon: <span>\ud83d\udc48</span>,\n  },\n};\n\nexport const WithRightIcon: Story = {\n  args: {\n    children: 'Button with Right Icon',\n    rightIcon: <span>\ud83d\udc49</span>,\n  },\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"42-beispiel-komponenten-zust\xe4nde-in-stories",children:"4.2 Beispiel: Komponenten-Zust\xe4nde in Stories"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// Input.stories.tsx\nimport React from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Input } from './Input';\n\nconst meta: Meta<typeof Input> = {\n  title: 'Components/Input',\n  component: Input,\n  argTypes: {\n    // Kontrolldefinitionen hier...\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Input>;\n\nexport const Default: Story = {\n  args: {\n    placeholder: 'Enter text...',\n  },\n};\n\nexport const WithLabel: Story = {\n  args: {\n    label: 'Email',\n    placeholder: 'Enter your email',\n  },\n};\n\nexport const WithValue: Story = {\n  args: {\n    label: 'Username',\n    value: 'john.doe',\n  },\n};\n\nexport const WithError: Story = {\n  args: {\n    label: 'Password',\n    type: 'password',\n    value: '123',\n    error: 'Password must be at least 8 characters',\n  },\n};\n\nexport const WithHelperText: Story = {\n  args: {\n    label: 'Username',\n    helperText: 'Your unique identifier',\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    label: 'Read Only Field',\n    value: 'Cannot be changed',\n    disabled: true,\n  },\n};\n\nexport const WithIcons: Story = {\n  args: {\n    label: 'Search',\n    placeholder: 'Search...',\n    leftIcon: <span>\ud83d\udd0d</span>,\n    rightIcon: <span>\u274c</span>,\n  },\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"5-chromatic-integration-mit-github-actions",children:"5. Chromatic-Integration mit GitHub Actions"}),"\n",(0,o.jsx)(n.p,{children:"F\xfcr die automatische Ausf\xfchrung von visuellen Tests bei jedem Pull Request:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/visual-testing.yml\nname: Visual Tests\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  visual-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'npm'\n      - run: npm ci\n      - name: Run Chromatic\n        uses: chromaui/action@v1\n        with:\n          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"6-best-practices-f\xfcr-visuelle-tests",children:"6. Best Practices f\xfcr visuelle Tests"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Vollst\xe4ndige Abdeckung"}),": Erstellen Sie Stories f\xfcr alle Komponenten und Zust\xe4nde"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Konsistente Benennung"}),": Verwenden Sie konsistente Namenskonventionen f\xfcr Stories"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Responsive Tests"}),": Testen Sie das Erscheinungsbild in verschiedenen Viewport-Gr\xf6\xdfen"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Theme-Tests"}),": Testen Sie Light- und Dark-Mode-Varianten"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Komponenteninteraktion"}),": Tests f\xfcr interaktive Zust\xe4nde (hover, focus, active)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Animationen und \xdcberg\xe4nge"}),": Deaktivieren Sie Animationen f\xfcr stabile visuelle Tests"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"7-workflow-f\xfcr-visuelle-tests",children:"7. Workflow f\xfcr visuelle Tests"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Entwicklung"}),": Entwickler erstellen/\xe4ndern eine Komponente und ihre Stories"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lokale Tests"}),": Testen mit lokalem Storybook"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Pull Request"}),": \xc4nderungen werden gepr\xfcft und Chromatic erfasst Snapshots"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Review"}),": Das Team \xfcberpr\xfcft visuelle \xc4nderungen in der Chromatic-UI"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Akzeptanz"}),": \xc4nderungen werden als neue Baseline akzeptiert oder abgelehnt"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Integration"}),": Nach Genehmigung werden \xc4nderungen in den Hauptzweig integriert"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"8-visuelle-testdokumentation",children:"8. Visuelle Testdokumentation"}),"\n",(0,o.jsx)(n.p,{children:"Zus\xe4tzlich zu den automatisierten Tests sollte eine visuelle Testdokumentation gef\xfchrt werden:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown",children:"# Visuelle Testdokumentation\n\n## Button-Komponente\n\n### Getestete Zust\xe4nde\n- [x] Primary, Secondary, Outline, Ghost Varianten\n- [x] Small, Medium, Large Gr\xf6\xdfen\n- [x] Disabled Zustand\n- [x] Loading Zustand\n- [x] Mit Icons (links/rechts)\n- [x] Full Width\n\n### Responsive Tests\n- [x] Mobile (320px)\n- [x] Tablet (768px)\n- [x] Desktop (1024px+)\n\n### Theme Tests\n- [x] Light Mode\n- [x] Dark Mode\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);