"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5874],{8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var r=i(6540);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},9500:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"guides/reorganize","title":"reorganize","description":"**ESNRepo-Template_","source":"@site/docs/guides/reorganize.md","sourceDirName":"guides","slug":"/guides/reorganize","permalink":"/smolitux-ui/docs/guides/reorganize","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/docs/guides/reorganize.md","tags":[],"version":"current","frontMatter":{},"sidebar":"wikiSidebar","previous":{"title":"Konkrete Schritte f\xfcr die erste MVP-Entwicklung mit Resonance UI","permalink":"/smolitux-ui/docs/guides/mvp-development"},"next":{"title":"Entwicklungsanleitung","permalink":"/smolitux-ui/docs/development/guide"}}');var s=i(4848),o=i(8453);const t={},l="Repository Reorganization Guide",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Options",id:"options",level:3},{value:"Process",id:"process",level:2},{value:"Template Structure",id:"template-structure",level:2},{value:"Required Directories",id:"required-directories",level:3},{value:"Required Files",id:"required-files",level:3},{value:"Optional Directories",id:"optional-directories",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Error Messages",id:"error-messages",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Reorganization",id:"basic-reorganization",level:3},{value:"Safe Reorganization",id:"safe-reorganization",level:3},{value:"Multiple Repositories",id:"multiple-repositories",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"ESN_Repo-Template"})})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"repository-reorganization-guide",children:"Repository Reorganization Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide explains how to use the repository reorganization script to align existing repositories with the template structure."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["The reorganization script (",(0,s.jsx)(n.code,{children:"scripts/reorganize.py"}),") helps you:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Analyze existing repository structure"}),"\n",(0,s.jsx)(n.li,{children:"Compare it with the template structure"}),"\n",(0,s.jsx)(n.li,{children:"Create a plan for reorganization"}),"\n",(0,s.jsx)(n.li,{children:"Execute the reorganization"}),"\n",(0,s.jsx)(n.li,{children:"Generate a report of changes"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Navigate to your repository\ncd /path/to/your/repo\n\n# Run the reorganization script\n/path/to/template/scripts/reorganize.py .\n"})}),"\n",(0,s.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Show help\n./scripts/reorganize.py --help\n\n# Dry run (show what would be done without making changes)\n./scripts/reorganize.py --dry-run /path/to/repo\n\n# Specify custom branch name\n./scripts/reorganize.py --branch-name feature/restructure /path/to/repo\n\n# Use different template\n./scripts/reorganize.py --template-path /path/to/template /path/to/repo\n"})}),"\n",(0,s.jsx)(n.h2,{id:"process",children:"Process"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Analysis"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Scans current repository structure"}),"\n",(0,s.jsx)(n.li,{children:"Identifies missing directories and files"}),"\n",(0,s.jsx)(n.li,{children:"Finds files that need reorganization"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Planning"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Creates a plan for necessary changes"}),"\n",(0,s.jsx)(n.li,{children:"Shows proposed file moves and creations"}),"\n",(0,s.jsx)(n.li,{children:"Asks for confirmation"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Execution"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Creates new directories"}),"\n",(0,s.jsx)(n.li,{children:"Copies template files"}),"\n",(0,s.jsx)(n.li,{children:"Moves existing files to appropriate locations"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Reporting"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Generates a detailed report of changes"}),"\n",(0,s.jsxs)(n.li,{children:["Saves report to ",(0,s.jsx)(n.code,{children:"reorganization_report.md"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"template-structure",children:"Template Structure"}),"\n",(0,s.jsx)(n.p,{children:"The script enforces the following structure:"}),"\n",(0,s.jsx)(n.h3,{id:"required-directories",children:"Required Directories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:".github/workflows/   # GitHub Actions workflows\ndocs/               # Documentation\nsrc/                # Source code\ntests/              # Tests\nscripts/            # Utility scripts\n"})}),"\n",(0,s.jsx)(n.h3,{id:"required-files",children:"Required Files"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"README.md                 # Project documentation\nLICENSE                   # Project license\n.gitignore               # Git ignore rules\npyproject.toml           # Project configuration\n.pre-commit-config.yaml  # Pre-commit hooks\nDockerfile               # Docker configuration\ndocker-compose.yml       # Docker Compose config\nMakefile                 # Build automation\nmkdocs.yml              # Documentation config\n"})}),"\n",(0,s.jsx)(n.h3,{id:"optional-directories",children:"Optional Directories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:".devcontainer/     # Dev container config\ndocs/api/          # API documentation\ndocs/guides/       # User guides\ndocs/development/  # Development docs\ntests/unit/        # Unit tests\ntests/integration/ # Integration tests\ntests/e2e/        # End-to-end tests\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before Running"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Commit or stash pending changes"}),"\n",(0,s.jsx)(n.li,{children:"Back up important files"}),"\n",(0,s.jsx)(n.li,{children:"Review current structure"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"During Execution"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Review the analysis carefully"}),"\n",(0,s.jsx)(n.li,{children:"Check proposed changes"}),"\n",(0,s.jsx)(n.li,{children:"Use dry-run first"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After Completion"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Review the generated report"}),"\n",(0,s.jsx)(n.li,{children:"Test repository functionality"}),"\n",(0,s.jsx)(n.li,{children:"Update documentation if needed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Permission Errors"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"chmod +x scripts/reorganize.py\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Git Issues"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure you're in a git repository"}),"\n",(0,s.jsx)(n.li,{children:"Check for uncommitted changes"}),"\n",(0,s.jsx)(n.li,{children:"Verify branch permissions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Missing Dependencies"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"poetry install\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"error-messages",children:"Error Messages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Error: Not a git repository"}),": Run from repository root"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Permission denied"}),": Check file permissions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Branch exists"}),": Choose different branch name"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"basic-reorganization",children:"Basic Reorganization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd my-project\n/path/to/template/scripts/reorganize.py .\n"})}),"\n",(0,s.jsx)(n.h3,{id:"safe-reorganization",children:"Safe Reorganization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 1. Create new branch\ngit checkout -b refactor/reorganize\n\n# 2. Run with dry-run first\n./scripts/reorganize.py --dry-run .\n\n# 3. Run actual reorganization\n./scripts/reorganize.py .\n\n# 4. Review changes\ngit diff\n\n# 5. Push changes\ngit push origin refactor/reorganize\n"})}),"\n",(0,s.jsx)(n.h3,{id:"multiple-repositories",children:"Multiple Repositories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\nREPOS=(\n    "/path/to/repo1"\n    "/path/to/repo2"\n)\n\nfor repo in "${REPOS[@]}"; do\n    echo "Reorganizing $repo..."\n    ./scripts/reorganize.py "$repo"\ndone\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);