"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5314],{8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(s.Provider,{value:n},e.children)}},9657:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"components/forms/timepicker","title":"TimePicker","description":"Die TimePicker-Komponente erm\xf6glicht es Benutzern, eine Uhrzeit auszuw\xe4hlen oder direkt einzugeben.","source":"@site/docs/components/forms/timepicker.md","sourceDirName":"components/forms","slug":"/components/forms/timepicker","permalink":"/smolitux-ui/docs/components/forms/timepicker","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/docs/components/forms/timepicker.md","tags":[],"version":"current","frontMatter":{},"sidebar":"wikiSidebar","previous":{"title":"TextArea","permalink":"/smolitux-ui/docs/components/forms/textarea"},"next":{"title":"Accordion","permalink":"/smolitux-ui/docs/components/disclosure/accordion"}}');var r=t(4848),s=t(8453);const d={},l="TimePicker",a={},c=[{value:"Import",id:"import",level:2},{value:"Verwendung",id:"verwendung",level:2},{value:"Einfacher TimePicker",id:"einfacher-timepicker",level:3},{value:"TimePicker mit Standardwert",id:"timepicker-mit-standardwert",level:3},{value:"TimePicker mit Label",id:"timepicker-mit-label",level:3},{value:"TimePicker mit Hilfetext",id:"timepicker-mit-hilfetext",level:3},{value:"TimePicker mit Fehlermeldung",id:"timepicker-mit-fehlermeldung",level:3},{value:"TimePicker mit verschiedenen Formaten",id:"timepicker-mit-verschiedenen-formaten",level:3},{value:"TimePicker mit/ohne Sekunden",id:"timepicker-mitohne-sekunden",level:3},{value:"TimePicker mit Zeitintervallen",id:"timepicker-mit-zeitintervallen",level:3},{value:"TimePicker mit Min/Max-Zeit",id:"timepicker-mit-minmax-zeit",level:3},{value:"TimePicker mit verschiedenen Gr\xf6\xdfen",id:"timepicker-mit-verschiedenen-gr\xf6\xdfen",level:3},{value:"TimePicker mit Icon",id:"timepicker-mit-icon",level:3},{value:"TimePicker mit voller Breite",id:"timepicker-mit-voller-breite",level:3},{value:"Kontrollierter TimePicker",id:"kontrollierter-timepicker",level:3},{value:"TimePicker mit Validierung",id:"timepicker-mit-validierung",level:3},{value:"Props",id:"props",level:2},{value:"TimeValue Interface",id:"timevalue-interface",level:3},{value:"Barrierefreiheit",id:"barrierefreiheit",level:2},{value:"Beispiele",id:"beispiele",level:2},{value:"Terminplaner",id:"terminplaner",level:3},{value:"\xd6ffnungszeiten-Editor",id:"\xf6ffnungszeiten-editor",level:3},{value:"Zeiterfassung",id:"zeiterfassung",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"timepicker",children:"TimePicker"})}),"\n",(0,r.jsx)(n.p,{children:"Die TimePicker-Komponente erm\xf6glicht es Benutzern, eine Uhrzeit auszuw\xe4hlen oder direkt einzugeben."}),"\n",(0,r.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { TimePicker } from '@smolitux/core';\n"})}),"\n",(0,r.jsx)(n.h2,{id:"verwendung",children:"Verwendung"}),"\n",(0,r.jsx)(n.h3,{id:"einfacher-timepicker",children:"Einfacher TimePicker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"<TimePicker />\n"})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-standardwert",children:"TimePicker mit Standardwert"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker defaultValue="14:30" />\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-label",children:"TimePicker mit Label"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="Startzeit" \n  placeholder="Zeit ausw\xe4hlen" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-hilfetext",children:"TimePicker mit Hilfetext"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="Besprechungszeit" \n  helperText="Bitte w\xe4hlen Sie eine Zeit w\xe4hrend der Gesch\xe4ftszeiten" \n  placeholder="Zeit ausw\xe4hlen" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-fehlermeldung",children:"TimePicker mit Fehlermeldung"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="Lieferzeit" \n  error="Die gew\xe4hlte Zeit liegt au\xdferhalb unserer Lieferzeiten" \n  placeholder="Zeit ausw\xe4hlen" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-verschiedenen-formaten",children:"TimePicker mit verschiedenen Formaten"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="24-Stunden-Format" \n  format="24h" \n  defaultValue="14:30" \n  className="mb-4" \n/>\n\n<TimePicker \n  label="12-Stunden-Format" \n  format="12h" \n  defaultValue="02:30 PM" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mitohne-sekunden",children:"TimePicker mit/ohne Sekunden"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="Mit Sekunden" \n  hideSeconds={false} \n  defaultValue="14:30:00" \n  className="mb-4" \n/>\n\n<TimePicker \n  label="Ohne Sekunden" \n  hideSeconds={true} \n  defaultValue="14:30" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-zeitintervallen",children:"TimePicker mit Zeitintervallen"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="15-Minuten-Intervall" \n  minuteStep={15} \n  defaultValue="14:30" \n  className="mb-4" \n/>\n\n<TimePicker \n  label="30-Minuten-Intervall" \n  minuteStep={30} \n  defaultValue="14:30" \n  className="mb-4" \n/>\n\n<TimePicker \n  label="15-Sekunden-Intervall" \n  secondStep={15} \n  hideSeconds={false} \n  defaultValue="14:30:00" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-minmax-zeit",children:"TimePicker mit Min/Max-Zeit"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="Gesch\xe4ftszeiten" \n  minTime="09:00" \n  maxTime="17:00" \n  placeholder="Zeit ausw\xe4hlen" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-verschiedenen-gr\xf6\xdfen",children:"TimePicker mit verschiedenen Gr\xf6\xdfen"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="Klein" \n  size="sm" \n  defaultValue="14:30" \n  className="mb-4" \n/>\n\n<TimePicker \n  label="Mittel" \n  size="md" \n  defaultValue="14:30" \n  className="mb-4" \n/>\n\n<TimePicker \n  label="Gro\xdf" \n  size="lg" \n  defaultValue="14:30" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-icon",children:"TimePicker mit Icon"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="Mit Icon" \n  leftIcon={<ClockIcon className="w-5 h-5 text-gray-400" />} \n  defaultValue="14:30" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-voller-breite",children:"TimePicker mit voller Breite"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<TimePicker \n  label="Volle Breite" \n  fullWidth \n  defaultValue="14:30" \n/>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"kontrollierter-timepicker",children:"Kontrollierter TimePicker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function ControlledTimePickerExample() {\n  const [time, setTime] = useState({ hours: 14, minutes: 30 });\n  \n  const handleTimeChange = (newTime) => {\n    setTime(newTime);\n  };\n  \n  return (\n    <div>\n      <TimePicker \n        label=\"Kontrollierter TimePicker\" \n        value={time} \n        onChange={handleTimeChange} \n      />\n      <p className=\"mt-2\">\n        Ausgew\xe4hlte Zeit: {time.hours}:{time.minutes.toString().padStart(2, '0')}\n        {time.period ? ` ${time.period}` : ''}\n      </p>\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"timepicker-mit-validierung",children:"TimePicker mit Validierung"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function ValidatedTimePickerExample() {\n  const [time, setTime] = useState(null);\n  const [error, setError] = useState('');\n  \n  const handleTimeChange = (newTime) => {\n    setTime(newTime);\n    \n    // Gesch\xe4ftszeiten: 9:00 - 17:00\n    const businessStart = { hours: 9, minutes: 0 };\n    const businessEnd = { hours: 17, minutes: 0 };\n    \n    if (!newTime) {\n      setError('Bitte w\xe4hlen Sie eine Zeit aus');\n    } else if (\n      newTime.hours < businessStart.hours || \n      (newTime.hours === businessStart.hours && newTime.minutes < businessStart.minutes) ||\n      newTime.hours > businessEnd.hours ||\n      (newTime.hours === businessEnd.hours && newTime.minutes > businessEnd.minutes)\n    ) {\n      setError('Die Zeit muss zwischen 9:00 und 17:00 Uhr liegen');\n    } else {\n      setError('');\n    }\n  };\n  \n  return (\n    <TimePicker \n      label=\"Validierter TimePicker\" \n      value={time} \n      onChange={handleTimeChange} \n      error={error}\n      placeholder=\"Gesch\xe4ftszeit w\xe4hlen\"\n    />\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Prop"}),(0,r.jsx)(n.th,{children:"Typ"}),(0,r.jsx)(n.th,{children:"Standard"}),(0,r.jsx)(n.th,{children:"Beschreibung"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"value"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TimeValue | string"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Ausgew\xe4hlte Zeit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"defaultValue"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TimeValue | string"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Standard-Ausgew\xe4hlte Zeit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"onChange"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"(time: TimeValue) => void"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Callback bei Auswahl einer Zeit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"label"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Text-Label"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"helperText"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Hilfetext"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"error"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Fehlermeldung"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"format"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'12h' | '24h'"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'24h'"})}),(0,r.jsx)(n.td,{children:"Format der Zeit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"hideSeconds"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:"Nur Stunden und Minuten anzeigen, keine Sekunden"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"placeholder"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'Zeit ausw\xe4hlen'"})}),(0,r.jsx)(n.td,{children:"Platzhaltertext"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"size"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'sm' | 'md' | 'lg'"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'md'"})}),(0,r.jsx)(n.td,{children:"Gr\xf6\xdfe des TimePickers"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"fullWidth"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsx)(n.td,{children:"Volle Breite"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"leftIcon"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ReactNode"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Icons vor dem Input anzeigen"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"portalTarget"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"HTMLElement | null"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Portierung des Popups"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"closeOnSelect"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"boolean"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:"Automatisches Schlie\xdfen nach Auswahl"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"zIndex"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"1000"})}),(0,r.jsx)(n.td,{children:"Z-Index f\xfcr den Popup"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"minuteStep"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"1"})}),(0,r.jsx)(n.td,{children:"Zeitintervall in Minuten"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"secondStep"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"1"})}),(0,r.jsx)(n.td,{children:"Zeitintervall in Sekunden"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"minTime"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TimeValue | string"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Minimale w\xe4hlbare Zeit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"maxTime"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TimeValue | string"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Maximale w\xe4hlbare Zeit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"className"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"-"}),(0,r.jsx)(n.td,{children:"Zus\xe4tzliche CSS-Klassen"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"timevalue-interface",children:"TimeValue Interface"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Eigenschaft"}),(0,r.jsx)(n.th,{children:"Typ"}),(0,r.jsx)(n.th,{children:"Beschreibung"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"hours"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"Stunden"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"minutes"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"Minuten"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"seconds"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"Sekunden (optional)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"period"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'AM' | 'PM'"})}),(0,r.jsx)(n.td,{children:"Tageszeit f\xfcr 12-Stunden-Format (optional)"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"barrierefreiheit",children:"Barrierefreiheit"}),"\n",(0,r.jsx)(n.p,{children:"Die TimePicker-Komponente ist f\xfcr Barrierefreiheit optimiert:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verwendet ARIA-Attribute f\xfcr bessere Screenreader-Unterst\xfctzung"}),"\n",(0,r.jsx)(n.li,{children:"Unterst\xfctzt Tastaturnavigation (Tab, Pfeiltasten, Enter, Escape)"}),"\n",(0,r.jsx)(n.li,{children:"Labels sind korrekt mit den Eingabefeldern verkn\xfcpft"}),"\n",(0,r.jsx)(n.li,{children:"Ausreichender Kontrast f\xfcr Texte und Bedienelemente"}),"\n",(0,r.jsx)(n.li,{children:"Zeitwerte k\xf6nnen auch direkt als Text eingegeben werden"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"beispiele",children:"Beispiele"}),"\n",(0,r.jsx)(n.h3,{id:"terminplaner",children:"Terminplaner"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function AppointmentScheduler() {\n  const [date, setDate] = useState(null);\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [title, setTitle] = useState(\'\');\n  const [description, setDescription] = useState(\'\');\n  \n  const handleStartTimeChange = (time) => {\n    setStartTime(time);\n    \n    // Wenn die Endzeit vor der Startzeit liegt, setze die Endzeit auf Startzeit + 1 Stunde\n    if (endTime && (\n      time.hours > endTime.hours || \n      (time.hours === endTime.hours && time.minutes >= endTime.minutes)\n    )) {\n      const newEndHours = time.hours + 1 > 23 ? 23 : time.hours + 1;\n      setEndTime({\n        ...time,\n        hours: newEndHours\n      });\n    }\n  };\n  \n  const handleEndTimeChange = (time) => {\n    setEndTime(time);\n  };\n  \n  const isFormValid = () => {\n    return date && startTime && endTime && title;\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (!isFormValid()) {\n      alert(\'Bitte f\xfcllen Sie alle Pflichtfelder aus\');\n      return;\n    }\n    \n    const appointment = {\n      date,\n      startTime,\n      endTime,\n      title,\n      description\n    };\n    \n    console.log(\'Termin erstellt:\', appointment);\n    // Hier w\xfcrde normalerweise ein API-Aufruf erfolgen\n    \n    // Formular zur\xfccksetzen\n    setDate(null);\n    setStartTime(null);\n    setEndTime(null);\n    setTitle(\'\');\n    setDescription(\'\');\n    \n    alert(\'Termin erfolgreich erstellt!\');\n  };\n  \n  return (\n    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">\n      <h2 className="text-2xl font-bold mb-6">Termin planen</h2>\n      \n      <form onSubmit={handleSubmit} className="space-y-4">\n        <div>\n          <DatePicker \n            label="Datum"\n            value={date}\n            onChange={setDate}\n            minDate={new Date()}\n            placeholder="Datum ausw\xe4hlen"\n            fullWidth\n            required\n          />\n        </div>\n        \n        <div className="flex gap-4">\n          <div className="flex-1">\n            <TimePicker \n              label="Startzeit"\n              value={startTime}\n              onChange={handleStartTimeChange}\n              minTime="08:00"\n              maxTime="20:00"\n              minuteStep={15}\n              placeholder="Von"\n              fullWidth\n              required\n            />\n          </div>\n          \n          <div className="flex-1">\n            <TimePicker \n              label="Endzeit"\n              value={endTime}\n              onChange={handleEndTimeChange}\n              minTime={startTime ? `${startTime.hours}:${startTime.minutes}` : "08:00"}\n              maxTime="20:00"\n              minuteStep={15}\n              placeholder="Bis"\n              fullWidth\n              required\n              disabled={!startTime}\n            />\n          </div>\n        </div>\n        \n        <div>\n          <label className="block text-sm font-medium text-gray-700 mb-1">\n            Titel *\n          </label>\n          <input\n            type="text"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            className="w-full px-3 py-2 border border-gray-300 rounded-md"\n            required\n          />\n        </div>\n        \n        <div>\n          <label className="block text-sm font-medium text-gray-700 mb-1">\n            Beschreibung\n          </label>\n          <textarea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            className="w-full px-3 py-2 border border-gray-300 rounded-md"\n            rows={3}\n          />\n        </div>\n        \n        <div className="pt-2">\n          <button \n            type="submit"\n            className="w-full py-2 px-4 bg-primary-600 text-white rounded-md hover:bg-primary-700 disabled:bg-gray-400 disabled:cursor-not-allowed"\n            disabled={!isFormValid()}\n          >\n            Termin erstellen\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"\xf6ffnungszeiten-editor",children:"\xd6ffnungszeiten-Editor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function BusinessHoursEditor() {\n  const daysOfWeek = [\n    \'Montag\', \'Dienstag\', \'Mittwoch\', \'Donnerstag\', \'Freitag\', \'Samstag\', \'Sonntag\'\n  ];\n  \n  const [businessHours, setBusinessHours] = useState({\n    Montag: { open: true, hours: [{ start: { hours: 9, minutes: 0 }, end: { hours: 17, minutes: 0 } }] },\n    Dienstag: { open: true, hours: [{ start: { hours: 9, minutes: 0 }, end: { hours: 17, minutes: 0 } }] },\n    Mittwoch: { open: true, hours: [{ start: { hours: 9, minutes: 0 }, end: { hours: 17, minutes: 0 } }] },\n    Donnerstag: { open: true, hours: [{ start: { hours: 9, minutes: 0 }, end: { hours: 17, minutes: 0 } }] },\n    Freitag: { open: true, hours: [{ start: { hours: 9, minutes: 0 }, end: { hours: 16, minutes: 0 } }] },\n    Samstag: { open: false, hours: [{ start: { hours: 10, minutes: 0 }, end: { hours: 14, minutes: 0 } }] },\n    Sonntag: { open: false, hours: [{ start: { hours: 10, minutes: 0 }, end: { hours: 14, minutes: 0 } }] }\n  });\n  \n  const toggleDayOpen = (day) => {\n    setBusinessHours(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day],\n        open: !prev[day].open\n      }\n    }));\n  };\n  \n  const updateHours = (day, index, field, time) => {\n    const newHours = [...businessHours[day].hours];\n    newHours[index] = {\n      ...newHours[index],\n      [field]: time\n    };\n    \n    setBusinessHours(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day],\n        hours: newHours\n      }\n    }));\n  };\n  \n  const addHoursSlot = (day) => {\n    const lastSlot = businessHours[day].hours[businessHours[day].hours.length - 1];\n    const newStart = { \n      hours: lastSlot.end.hours, \n      minutes: lastSlot.end.minutes \n    };\n    const newEnd = { \n      hours: Math.min(23, lastSlot.end.hours + 2), \n      minutes: lastSlot.end.minutes \n    };\n    \n    setBusinessHours(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day],\n        hours: [...prev[day].hours, { start: newStart, end: newEnd }]\n      }\n    }));\n  };\n  \n  const removeHoursSlot = (day, index) => {\n    if (businessHours[day].hours.length <= 1) return;\n    \n    const newHours = businessHours[day].hours.filter((_, i) => i !== index);\n    \n    setBusinessHours(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day],\n        hours: newHours\n      }\n    }));\n  };\n  \n  const copyToAllDays = (sourceDay) => {\n    const sourceDayData = businessHours[sourceDay];\n    \n    const newBusinessHours = { ...businessHours };\n    daysOfWeek.forEach(day => {\n      if (day !== sourceDay) {\n        newBusinessHours[day] = { ...sourceDayData };\n      }\n    });\n    \n    setBusinessHours(newBusinessHours);\n  };\n  \n  const saveBusinessHours = () => {\n    console.log(\'\xd6ffnungszeiten gespeichert:\', businessHours);\n    // Hier w\xfcrde normalerweise ein API-Aufruf erfolgen\n    alert(\'\xd6ffnungszeiten erfolgreich gespeichert!\');\n  };\n  \n  return (\n    <div className="max-w-2xl mx-auto">\n      <div className="flex justify-between items-center mb-6">\n        <h2 className="text-2xl font-bold">\xd6ffnungszeiten</h2>\n        <button \n          className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"\n          onClick={saveBusinessHours}\n        >\n          Speichern\n        </button>\n      </div>\n      \n      <div className="space-y-4">\n        {daysOfWeek.map(day => (\n          <div key={day} className="border rounded-lg p-4">\n            <div className="flex justify-between items-center mb-4">\n              <div className="flex items-center">\n                <input\n                  type="checkbox"\n                  id={`day-${day}`}\n                  checked={businessHours[day].open}\n                  onChange={() => toggleDayOpen(day)}\n                  className="h-4 w-4 text-primary-600 rounded"\n                />\n                <label htmlFor={`day-${day}`} className="ml-2 font-medium">\n                  {day}\n                </label>\n              </div>\n              \n              <div className="flex space-x-2">\n                <button \n                  className="text-sm text-primary-600 hover:text-primary-800"\n                  onClick={() => copyToAllDays(day)}\n                >\n                  Auf alle Tage kopieren\n                </button>\n              </div>\n            </div>\n            \n            {businessHours[day].open && (\n              <div className="space-y-3 pl-6">\n                {businessHours[day].hours.map((slot, index) => (\n                  <div key={index} className="flex items-center space-x-2">\n                    <TimePicker \n                      value={slot.start}\n                      onChange={(time) => updateHours(day, index, \'start\', time)}\n                      size="sm"\n                      format="24h"\n                      minuteStep={15}\n                      placeholder="Von"\n                    />\n                    \n                    <span className="text-gray-500">bis</span>\n                    \n                    <TimePicker \n                      value={slot.end}\n                      onChange={(time) => updateHours(day, index, \'end\', time)}\n                      size="sm"\n                      format="24h"\n                      minuteStep={15}\n                      placeholder="Bis"\n                      minTime={`${slot.start.hours}:${slot.start.minutes}`}\n                    />\n                    \n                    <button \n                      className="p-1 text-gray-400 hover:text-gray-600"\n                      onClick={() => removeHoursSlot(day, index)}\n                      disabled={businessHours[day].hours.length <= 1}\n                    >\n                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />\n                      </svg>\n                    </button>\n                  </div>\n                ))}\n                \n                <button \n                  className="text-sm text-primary-600 hover:text-primary-800 flex items-center"\n                  onClick={() => addHoursSlot(day)}\n                >\n                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />\n                  </svg>\n                  Zeitfenster hinzuf\xfcgen\n                </button>\n              </div>\n            )}\n            \n            {!businessHours[day].open && (\n              <div className="pl-6 text-gray-500">\n                Geschlossen\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"zeiterfassung",children:"Zeiterfassung"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function TimeTracker() {\n  const [entries, setEntries] = useState([\n    { id: 1, date: \'2023-05-15\', startTime: { hours: 9, minutes: 0 }, endTime: { hours: 17, minutes: 0 }, project: \'Website-Entwicklung\', description: \'Homepage-Design\' },\n    { id: 2, date: \'2023-05-16\', startTime: { hours: 9, minutes: 30 }, endTime: { hours: 16, minutes: 45 }, project: \'App-Entwicklung\', description: \'Bug-Fixes\' }\n  ]);\n  \n  const [newEntry, setNewEntry] = useState({\n    date: new Date().toISOString().split(\'T\')[0],\n    startTime: { hours: 9, minutes: 0 },\n    endTime: { hours: 17, minutes: 0 },\n    project: \'\',\n    description: \'\'\n  });\n  \n  const projects = [\'Website-Entwicklung\', \'App-Entwicklung\', \'Kundensupport\', \'Meetings\', \'Dokumentation\'];\n  \n  const handleInputChange = (field, value) => {\n    setNewEntry(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  \n  const calculateDuration = (start, end) => {\n    const startMinutes = start.hours * 60 + start.minutes;\n    const endMinutes = end.hours * 60 + end.minutes;\n    const durationMinutes = endMinutes - startMinutes;\n    \n    if (durationMinutes <= 0) return \'0h 0m\';\n    \n    const hours = Math.floor(durationMinutes / 60);\n    const minutes = durationMinutes % 60;\n    \n    return `${hours}h ${minutes}m`;\n  };\n  \n  const addEntry = () => {\n    if (!newEntry.date || !newEntry.startTime || !newEntry.endTime || !newEntry.project) {\n      alert(\'Bitte f\xfcllen Sie alle Pflichtfelder aus\');\n      return;\n    }\n    \n    const startMinutes = newEntry.startTime.hours * 60 + newEntry.startTime.minutes;\n    const endMinutes = newEntry.endTime.hours * 60 + newEntry.endTime.minutes;\n    \n    if (endMinutes <= startMinutes) {\n      alert(\'Die Endzeit muss nach der Startzeit liegen\');\n      return;\n    }\n    \n    const newId = entries.length > 0 ? Math.max(...entries.map(e => e.id)) + 1 : 1;\n    \n    setEntries([\n      ...entries,\n      {\n        id: newId,\n        ...newEntry\n      }\n    ]);\n    \n    // Formular zur\xfccksetzen\n    setNewEntry({\n      date: new Date().toISOString().split(\'T\')[0],\n      startTime: { hours: 9, minutes: 0 },\n      endTime: { hours: 17, minutes: 0 },\n      project: \'\',\n      description: \'\'\n    });\n  };\n  \n  const deleteEntry = (id) => {\n    setEntries(entries.filter(entry => entry.id !== id));\n  };\n  \n  const totalHours = entries.reduce((total, entry) => {\n    const startMinutes = entry.startTime.hours * 60 + entry.startTime.minutes;\n    const endMinutes = entry.endTime.hours * 60 + entry.endTime.minutes;\n    return total + (endMinutes - startMinutes);\n  }, 0);\n  \n  const formatTotalHours = () => {\n    const hours = Math.floor(totalHours / 60);\n    const minutes = totalHours % 60;\n    return `${hours}h ${minutes}m`;\n  };\n  \n  return (\n    <div className="max-w-4xl mx-auto">\n      <h2 className="text-2xl font-bold mb-6">Zeiterfassung</h2>\n      \n      <div className="bg-white p-6 rounded-lg shadow-md mb-6">\n        <h3 className="text-lg font-medium mb-4">Neue Zeiterfassung</h3>\n        \n        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">\n          <div>\n            <label className="block text-sm font-medium text-gray-700 mb-1">\n              Datum *\n            </label>\n            <input\n              type="date"\n              value={newEntry.date}\n              onChange={(e) => handleInputChange(\'date\', e.target.value)}\n              className="w-full px-3 py-2 border border-gray-300 rounded-md"\n              required\n            />\n          </div>\n          \n          <div>\n            <label className="block text-sm font-medium text-gray-700 mb-1">\n              Projekt *\n            </label>\n            <select\n              value={newEntry.project}\n              onChange={(e) => handleInputChange(\'project\', e.target.value)}\n              className="w-full px-3 py-2 border border-gray-300 rounded-md"\n              required\n            >\n              <option value="">Projekt ausw\xe4hlen</option>\n              {projects.map(project => (\n                <option key={project} value={project}>{project}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n        \n        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">\n          <div>\n            <label className="block text-sm font-medium text-gray-700 mb-1">\n              Startzeit *\n            </label>\n            <TimePicker \n              value={newEntry.startTime}\n              onChange={(time) => handleInputChange(\'startTime\', time)}\n              format="24h"\n              minuteStep={15}\n              fullWidth\n            />\n          </div>\n          \n          <div>\n            <label className="block text-sm font-medium text-gray-700 mb-1">\n              Endzeit *\n            </label>\n            <TimePicker \n              value={newEntry.endTime}\n              onChange={(time) => handleInputChange(\'endTime\', time)}\n              format="24h"\n              minuteStep={15}\n              fullWidth\n            />\n          </div>\n        </div>\n        \n        <div className="mb-4">\n          <label className="block text-sm font-medium text-gray-700 mb-1">\n            Beschreibung\n          </label>\n          <textarea\n            value={newEntry.description}\n            onChange={(e) => handleInputChange(\'description\', e.target.value)}\n            className="w-full px-3 py-2 border border-gray-300 rounded-md"\n            rows={2}\n          />\n        </div>\n        \n        <button \n          className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"\n          onClick={addEntry}\n        >\n          Eintrag hinzuf\xfcgen\n        </button>\n      </div>\n      \n      <div className="bg-white rounded-lg shadow-md overflow-hidden">\n        <div className="p-4 bg-gray-50 border-b flex justify-between items-center">\n          <h3 className="text-lg font-medium">Zeiterfassungen</h3>\n          <div className="text-sm">\n            Gesamtzeit: <span className="font-medium">{formatTotalHours()}</span>\n          </div>\n        </div>\n        \n        <div className="overflow-x-auto">\n          <table className="min-w-full divide-y divide-gray-200">\n            <thead className="bg-gray-50">\n              <tr>\n                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Datum</th>\n                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Projekt</th>\n                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Startzeit</th>\n                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Endzeit</th>\n                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dauer</th>\n                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Beschreibung</th>\n                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Aktionen</th>\n              </tr>\n            </thead>\n            <tbody className="bg-white divide-y divide-gray-200">\n              {entries.map(entry => (\n                <tr key={entry.id}>\n                  <td className="px-6 py-4 whitespace-nowrap">{entry.date}</td>\n                  <td className="px-6 py-4 whitespace-nowrap">{entry.project}</td>\n                  <td className="px-6 py-4 whitespace-nowrap">\n                    {entry.startTime.hours}:{entry.startTime.minutes.toString().padStart(2, \'0\')}\n                  </td>\n                  <td className="px-6 py-4 whitespace-nowrap">\n                    {entry.endTime.hours}:{entry.endTime.minutes.toString().padStart(2, \'0\')}\n                  </td>\n                  <td className="px-6 py-4 whitespace-nowrap">\n                    {calculateDuration(entry.startTime, entry.endTime)}\n                  </td>\n                  <td className="px-6 py-4">{entry.description}</td>\n                  <td className="px-6 py-4 whitespace-nowrap text-right">\n                    <button \n                      className="text-red-600 hover:text-red-800"\n                      onClick={() => deleteEntry(entry.id)}\n                    >\n                      L\xf6schen\n                    </button>\n                  </td>\n                </tr>\n              ))}\n              \n              {entries.length === 0 && (\n                <tr>\n                  <td colSpan={7} className="px-6 py-4 text-center text-gray-500">\n                    Keine Eintr\xe4ge vorhanden\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);