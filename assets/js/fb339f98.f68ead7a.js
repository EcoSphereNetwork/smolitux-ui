"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9983],{5433:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"examples/form-examples","title":"Formular-Beispiele","description":"Diese Seite enth\xe4lt interaktive Beispiele f\xfcr die Verwendung der Formular-Komponenten von Smolitux UI in realen Anwendungsf\xe4llen.","source":"@site/docs/examples/form-examples.md","sourceDirName":"examples","slug":"/examples/form-examples","permalink":"/smolitux-ui/docs/examples/form-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/docs/examples/form-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"wikiSidebar","previous":{"title":"Implementierungsplan","permalink":"/smolitux-ui/docs/testing/testplan/Implementierungsplan"},"next":{"title":"Formularvalidierung Beispiele","permalink":"/smolitux-ui/docs/examples/form-validation-examples"}}');var t=a(4848),s=a(8453);const i={},o="Formular-Beispiele",l={},m=[{value:"Kontaktformular",id:"kontaktformular",level:2},{value:"Registrierungsformular",id:"registrierungsformular",level:2},{value:"Zahlungsformular",id:"zahlungsformular",level:2},{value:"Einstellungsformular",id:"einstellungsformular",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"formular-beispiele",children:"Formular-Beispiele"})}),"\n",(0,t.jsx)(e.p,{children:"Diese Seite enth\xe4lt interaktive Beispiele f\xfcr die Verwendung der Formular-Komponenten von Smolitux UI in realen Anwendungsf\xe4llen."}),"\n",(0,t.jsx)(e.h2,{id:"kontaktformular",children:"Kontaktformular"}),"\n",(0,t.jsx)(e.p,{children:"Dieses Beispiel zeigt ein vollst\xe4ndiges Kontaktformular mit verschiedenen Eingabefeldern, Validierung und Absenden-Funktionalit\xe4t."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",metastring:"live",live:!0,children:'function ContactForm() {\n  const [formData, setFormData] = React.useState({\n    name: \'\',\n    email: \'\',\n    subject: \'\',\n    message: \'\',\n    subscribe: false\n  });\n  \n  const [errors, setErrors] = React.useState({});\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  \n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === \'checkbox\' ? checked : value\n    }));\n    \n    // Fehler zur\xfccksetzen, wenn Feld ge\xe4ndert wird\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: null\n      }));\n    }\n  };\n  \n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.name.trim()) {\n      newErrors.name = \'Name ist erforderlich\';\n    }\n    \n    if (!formData.email.trim()) {\n      newErrors.email = \'E-Mail ist erforderlich\';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = \'Ung\xfcltige E-Mail-Adresse\';\n    }\n    \n    if (!formData.subject.trim()) {\n      newErrors.subject = \'Betreff ist erforderlich\';\n    }\n    \n    if (!formData.message.trim()) {\n      newErrors.message = \'Nachricht ist erforderlich\';\n    } else if (formData.message.trim().length < 10) {\n      newErrors.message = \'Nachricht muss mindestens 10 Zeichen lang sein\';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      setIsSubmitting(true);\n      \n      // Simuliere API-Aufruf\n      setTimeout(() => {\n        setIsSubmitting(false);\n        setIsSubmitted(true);\n        \n        // Formular zur\xfccksetzen\n        setFormData({\n          name: \'\',\n          email: \'\',\n          subject: \'\',\n          message: \'\',\n          subscribe: false\n        });\n        \n        // Nach 3 Sekunden die Erfolgsmeldung ausblenden\n        setTimeout(() => {\n          setIsSubmitted(false);\n        }, 3000);\n      }, 1500);\n    }\n  };\n  \n  return (\n    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">\n      <h2 className="text-xl font-bold mb-4">Kontaktieren Sie uns</h2>\n      \n      {isSubmitted && (\n        <div className="mb-4 p-3 bg-green-100 text-green-700 rounded-md">\n          Vielen Dank f\xfcr Ihre Nachricht! Wir werden uns in K\xfcrze bei Ihnen melden.\n        </div>\n      )}\n      \n      <form onSubmit={handleSubmit}>\n        <FormControl \n          label="Name" \n          error={errors.name} \n          className="mb-4"\n        >\n          <Input\n            name="name"\n            value={formData.name}\n            onChange={handleChange}\n            placeholder="Ihr Name"\n            disabled={isSubmitting}\n          />\n        </FormControl>\n        \n        <FormControl \n          label="E-Mail" \n          error={errors.email} \n          className="mb-4"\n        >\n          <Input\n            type="email"\n            name="email"\n            value={formData.email}\n            onChange={handleChange}\n            placeholder="ihre.email@beispiel.de"\n            disabled={isSubmitting}\n          />\n        </FormControl>\n        \n        <FormControl \n          label="Betreff" \n          error={errors.subject} \n          className="mb-4"\n        >\n          <Select\n            name="subject"\n            value={formData.subject}\n            onChange={handleChange}\n            disabled={isSubmitting}\n          >\n            <option value="">Bitte w\xe4hlen</option>\n            <option value="allgemein">Allgemeine Anfrage</option>\n            <option value="support">Technischer Support</option>\n            <option value="feedback">Feedback</option>\n            <option value="other">Sonstiges</option>\n          </Select>\n        </FormControl>\n        \n        <FormControl \n          label="Nachricht" \n          error={errors.message} \n          className="mb-4"\n        >\n          <TextArea\n            name="message"\n            value={formData.message}\n            onChange={handleChange}\n            placeholder="Ihre Nachricht..."\n            rows={5}\n            disabled={isSubmitting}\n          />\n        </FormControl>\n        \n        <FormControl className="mb-6">\n          <Checkbox\n            name="subscribe"\n            checked={formData.subscribe}\n            onChange={handleChange}\n            disabled={isSubmitting}\n            label="Newsletter abonnieren"\n          />\n        </FormControl>\n        \n        <Button\n          type="submit"\n          variant="primary"\n          fullWidth\n          loading={isSubmitting}\n        >\n          {isSubmitting ? \'Wird gesendet...\' : \'Absenden\'}\n        </Button>\n      </form>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"registrierungsformular",children:"Registrierungsformular"}),"\n",(0,t.jsx)(e.p,{children:"Dieses Beispiel zeigt ein Registrierungsformular mit Passwort-Validierung und Nutzungsbedingungen."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",metastring:"live",live:!0,children:'function RegistrationForm() {\n  const [formData, setFormData] = React.useState({\n    username: \'\',\n    email: \'\',\n    password: \'\',\n    confirmPassword: \'\',\n    agreeTerms: false\n  });\n  \n  const [errors, setErrors] = React.useState({});\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  \n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === \'checkbox\' ? checked : value\n    }));\n    \n    // Fehler zur\xfccksetzen, wenn Feld ge\xe4ndert wird\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: null\n      }));\n    }\n  };\n  \n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.username.trim()) {\n      newErrors.username = \'Benutzername ist erforderlich\';\n    } else if (formData.username.length < 3) {\n      newErrors.username = \'Benutzername muss mindestens 3 Zeichen lang sein\';\n    }\n    \n    if (!formData.email.trim()) {\n      newErrors.email = \'E-Mail ist erforderlich\';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = \'Ung\xfcltige E-Mail-Adresse\';\n    }\n    \n    if (!formData.password) {\n      newErrors.password = \'Passwort ist erforderlich\';\n    } else if (formData.password.length < 8) {\n      newErrors.password = \'Passwort muss mindestens 8 Zeichen lang sein\';\n    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(formData.password)) {\n      newErrors.password = \'Passwort muss mindestens einen Gro\xdfbuchstaben, einen Kleinbuchstaben und eine Zahl enthalten\';\n    }\n    \n    if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = \'Passw\xf6rter stimmen nicht \xfcberein\';\n    }\n    \n    if (!formData.agreeTerms) {\n      newErrors.agreeTerms = \'Sie m\xfcssen den Nutzungsbedingungen zustimmen\';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      setIsSubmitting(true);\n      \n      // Simuliere API-Aufruf\n      setTimeout(() => {\n        setIsSubmitting(false);\n        setIsSubmitted(true);\n      }, 1500);\n    }\n  };\n  \n  if (isSubmitted) {\n    return (\n      <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md text-center">\n        <div className="text-5xl mb-4">\ud83c\udf89</div>\n        <h2 className="text-xl font-bold mb-2">Registrierung erfolgreich!</h2>\n        <p className="mb-4">Vielen Dank f\xfcr Ihre Registrierung. Eine Best\xe4tigungs-E-Mail wurde an {formData.email} gesendet.</p>\n        <Button \n          variant="primary"\n          onClick={() => setIsSubmitted(false)}\n        >\n          Zur\xfcck zum Formular\n        </Button>\n      </div>\n    );\n  }\n  \n  return (\n    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">\n      <h2 className="text-xl font-bold mb-4">Konto erstellen</h2>\n      \n      <form onSubmit={handleSubmit}>\n        <FormControl \n          label="Benutzername" \n          error={errors.username} \n          className="mb-4"\n        >\n          <Input\n            name="username"\n            value={formData.username}\n            onChange={handleChange}\n            placeholder="Ihr Benutzername"\n            disabled={isSubmitting}\n          />\n        </FormControl>\n        \n        <FormControl \n          label="E-Mail" \n          error={errors.email} \n          className="mb-4"\n        >\n          <Input\n            type="email"\n            name="email"\n            value={formData.email}\n            onChange={handleChange}\n            placeholder="ihre.email@beispiel.de"\n            disabled={isSubmitting}\n          />\n        </FormControl>\n        \n        <FormControl \n          label="Passwort" \n          error={errors.password} \n          className="mb-4"\n        >\n          <Input\n            type="password"\n            name="password"\n            value={formData.password}\n            onChange={handleChange}\n            placeholder="Passwort"\n            disabled={isSubmitting}\n          />\n        </FormControl>\n        \n        <FormControl \n          label="Passwort best\xe4tigen" \n          error={errors.confirmPassword} \n          className="mb-6"\n        >\n          <Input\n            type="password"\n            name="confirmPassword"\n            value={formData.confirmPassword}\n            onChange={handleChange}\n            placeholder="Passwort best\xe4tigen"\n            disabled={isSubmitting}\n          />\n        </FormControl>\n        \n        <FormControl \n          error={errors.agreeTerms} \n          className="mb-6"\n        >\n          <Checkbox\n            name="agreeTerms"\n            checked={formData.agreeTerms}\n            onChange={handleChange}\n            disabled={isSubmitting}\n            label={\n              <span>\n                Ich stimme den <a href="#" className="text-blue-600 hover:underline">Nutzungsbedingungen</a> und der <a href="#" className="text-blue-600 hover:underline">Datenschutzerkl\xe4rung</a> zu\n              </span>\n            }\n          />\n        </FormControl>\n        \n        <Button\n          type="submit"\n          variant="primary"\n          fullWidth\n          loading={isSubmitting}\n        >\n          {isSubmitting ? \'Wird registriert...\' : \'Registrieren\'}\n        </Button>\n        \n        <div className="mt-4 text-center text-sm text-gray-600">\n          Bereits registriert? <a href="#" className="text-blue-600 hover:underline">Anmelden</a>\n        </div>\n      </form>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"zahlungsformular",children:"Zahlungsformular"}),"\n",(0,t.jsx)(e.p,{children:"Dieses Beispiel zeigt ein Zahlungsformular f\xfcr eine E-Commerce-Anwendung."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",metastring:"live",live:!0,children:'function PaymentForm() {\n  const [formData, setFormData] = React.useState({\n    cardName: \'\',\n    cardNumber: \'\',\n    expiryDate: \'\',\n    cvv: \'\',\n    saveCard: false\n  });\n  \n  const [errors, setErrors] = React.useState({});\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n  \n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    // Formatierung f\xfcr Kartennummer: F\xfcge Leerzeichen nach jeweils 4 Ziffern ein\n    if (name === \'cardNumber\') {\n      const formattedValue = value\n        .replace(/\\s/g, \'\')\n        .replace(/\\D/g, \'\')\n        .replace(/(.{4})/g, \'$1 \')\n        .trim()\n        .slice(0, 19); // 16 Ziffern + 3 Leerzeichen\n      \n      setFormData(prev => ({\n        ...prev,\n        [name]: formattedValue\n      }));\n      return;\n    }\n    \n    // Formatierung f\xfcr Ablaufdatum: MM/YY\n    if (name === \'expiryDate\') {\n      const formattedValue = value\n        .replace(/\\D/g, \'\')\n        .replace(/^(.{2})(.+)$/, \'$1/$2\')\n        .slice(0, 5);\n      \n      setFormData(prev => ({\n        ...prev,\n        [name]: formattedValue\n      }));\n      return;\n    }\n    \n    // Formatierung f\xfcr CVV: Nur Zahlen, max. 4 Stellen\n    if (name === \'cvv\') {\n      const formattedValue = value\n        .replace(/\\D/g, \'\')\n        .slice(0, 4);\n      \n      setFormData(prev => ({\n        ...prev,\n        [name]: formattedValue\n      }));\n      return;\n    }\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: type === \'checkbox\' ? checked : value\n    }));\n    \n    // Fehler zur\xfccksetzen, wenn Feld ge\xe4ndert wird\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: null\n      }));\n    }\n  };\n  \n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.cardName.trim()) {\n      newErrors.cardName = \'Name ist erforderlich\';\n    }\n    \n    if (!formData.cardNumber.trim()) {\n      newErrors.cardNumber = \'Kartennummer ist erforderlich\';\n    } else if (formData.cardNumber.replace(/\\s/g, \'\').length !== 16) {\n      newErrors.cardNumber = \'Kartennummer muss 16 Ziffern haben\';\n    }\n    \n    if (!formData.expiryDate) {\n      newErrors.expiryDate = \'Ablaufdatum ist erforderlich\';\n    } else if (!/^\\d{2}\\/\\d{2}$/.test(formData.expiryDate)) {\n      newErrors.expiryDate = \'Ung\xfcltiges Format (MM/YY)\';\n    } else {\n      const [month, year] = formData.expiryDate.split(\'/\');\n      const currentDate = new Date();\n      const currentYear = currentDate.getFullYear() % 100;\n      const currentMonth = currentDate.getMonth() + 1;\n      \n      if (parseInt(month) < 1 || parseInt(month) > 12) {\n        newErrors.expiryDate = \'Ung\xfcltiger Monat\';\n      } else if (\n        parseInt(year) < currentYear || \n        (parseInt(year) === currentYear && parseInt(month) < currentMonth)\n      ) {\n        newErrors.expiryDate = \'Karte ist abgelaufen\';\n      }\n    }\n    \n    if (!formData.cvv) {\n      newErrors.cvv = \'Sicherheitscode ist erforderlich\';\n    } else if (formData.cvv.length < 3) {\n      newErrors.cvv = \'Sicherheitscode muss 3-4 Ziffern haben\';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (validateForm()) {\n      setIsSubmitting(true);\n      \n      // Simuliere API-Aufruf\n      setTimeout(() => {\n        setIsSubmitting(false);\n        setIsSubmitted(true);\n      }, 1500);\n    }\n  };\n  \n  if (isSubmitted) {\n    return (\n      <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md text-center">\n        <div className="text-5xl mb-4">\u2705</div>\n        <h2 className="text-xl font-bold mb-2">Zahlung erfolgreich!</h2>\n        <p className="mb-4">Vielen Dank f\xfcr Ihren Einkauf. Eine Best\xe4tigung wurde an Ihre E-Mail-Adresse gesendet.</p>\n        <Button \n          variant="primary"\n          onClick={() => {\n            setIsSubmitted(false);\n            setFormData({\n              cardName: \'\',\n              cardNumber: \'\',\n              expiryDate: \'\',\n              cvv: \'\',\n              saveCard: false\n            });\n          }}\n        >\n          Neue Zahlung\n        </Button>\n      </div>\n    );\n  }\n  \n  return (\n    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">\n      <h2 className="text-xl font-bold mb-4">Zahlungsinformationen</h2>\n      \n      <div className="mb-6 p-4 bg-gray-50 rounded-md">\n        <div className="flex justify-between mb-2">\n          <span>Zwischensumme:</span>\n          <span>79,99 \u20ac</span>\n        </div>\n        <div className="flex justify-between mb-2">\n          <span>Versand:</span>\n          <span>4,95 \u20ac</span>\n        </div>\n        <div className="flex justify-between mb-2">\n          <span>Steuern:</span>\n          <span>15,20 \u20ac</span>\n        </div>\n        <div className="flex justify-between font-bold pt-2 border-t border-gray-200">\n          <span>Gesamtsumme:</span>\n          <span>100,14 \u20ac</span>\n        </div>\n      </div>\n      \n      <form onSubmit={handleSubmit}>\n        <FormControl \n          label="Name auf der Karte" \n          error={errors.cardName} \n          className="mb-4"\n        >\n          <Input\n            name="cardName"\n            value={formData.cardName}\n            onChange={handleChange}\n            placeholder="Max Mustermann"\n            disabled={isSubmitting}\n          />\n        </FormControl>\n        \n        <FormControl \n          label="Kartennummer" \n          error={errors.cardNumber} \n          className="mb-4"\n        >\n          <Input\n            name="cardNumber"\n            value={formData.cardNumber}\n            onChange={handleChange}\n            placeholder="1234 5678 9012 3456"\n            disabled={isSubmitting}\n          />\n        </FormControl>\n        \n        <div className="flex gap-4 mb-4">\n          <FormControl \n            label="Ablaufdatum" \n            error={errors.expiryDate} \n            className="flex-1"\n          >\n            <Input\n              name="expiryDate"\n              value={formData.expiryDate}\n              onChange={handleChange}\n              placeholder="MM/YY"\n              disabled={isSubmitting}\n            />\n          </FormControl>\n          \n          <FormControl \n            label="Sicherheitscode" \n            error={errors.cvv} \n            className="flex-1"\n          >\n            <Input\n              name="cvv"\n              value={formData.cvv}\n              onChange={handleChange}\n              placeholder="123"\n              disabled={isSubmitting}\n            />\n          </FormControl>\n        </div>\n        \n        <FormControl className="mb-6">\n          <Checkbox\n            name="saveCard"\n            checked={formData.saveCard}\n            onChange={handleChange}\n            disabled={isSubmitting}\n            label="Karte f\xfcr zuk\xfcnftige Zahlungen speichern"\n          />\n        </FormControl>\n        \n        <Button\n          type="submit"\n          variant="primary"\n          fullWidth\n          loading={isSubmitting}\n        >\n          {isSubmitting ? \'Wird verarbeitet...\' : \'Jetzt bezahlen\'}\n        </Button>\n        \n        <div className="mt-4 text-center text-sm text-gray-600">\n          Ihre Zahlungsdaten werden sicher verarbeitet.\n        </div>\n      </form>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"einstellungsformular",children:"Einstellungsformular"}),"\n",(0,t.jsx)(e.p,{children:"Dieses Beispiel zeigt ein Formular f\xfcr Benutzereinstellungen mit verschiedenen Eingabetypen."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-jsx",metastring:"live",live:!0,children:'function SettingsForm() {\n  const [formData, setFormData] = React.useState({\n    displayName: \'Max Mustermann\',\n    email: \'max@example.com\',\n    language: \'de\',\n    theme: \'light\',\n    notifications: {\n      email: true,\n      push: true,\n      sms: false\n    },\n    privacy: {\n      profileVisibility: \'public\',\n      activityTracking: true,\n      dataSharing: false\n    }\n  });\n  \n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [showToast, setShowToast] = React.useState(false);\n  \n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    if (name.includes(\'.\')) {\n      const [section, field] = name.split(\'.\');\n      setFormData(prev => ({\n        ...prev,\n        [section]: {\n          ...prev[section],\n          [field]: type === \'checkbox\' ? checked : value\n        }\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [name]: type === \'checkbox\' ? checked : value\n      }));\n    }\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // Simuliere API-Aufruf\n    setTimeout(() => {\n      setIsSubmitting(false);\n      setShowToast(true);\n      \n      // Toast nach 3 Sekunden ausblenden\n      setTimeout(() => {\n        setShowToast(false);\n      }, 3000);\n    }, 1000);\n  };\n  \n  return (\n    <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-md">\n      <h2 className="text-xl font-bold mb-6">Kontoeinstellungen</h2>\n      \n      {showToast && (\n        <div className="fixed top-4 right-4 p-4 bg-green-100 text-green-700 rounded-md shadow-md">\n          Einstellungen wurden erfolgreich gespeichert!\n        </div>\n      )}\n      \n      <form onSubmit={handleSubmit}>\n        <div className="mb-8">\n          <h3 className="text-lg font-semibold mb-4 pb-2 border-b border-gray-200">Profil</h3>\n          \n          <FormControl \n            label="Anzeigename" \n            className="mb-4"\n          >\n            <Input\n              name="displayName"\n              value={formData.displayName}\n              onChange={handleChange}\n              disabled={isSubmitting}\n            />\n          </FormControl>\n          \n          <FormControl \n            label="E-Mail-Adresse" \n            className="mb-4"\n          >\n            <Input\n              type="email"\n              name="email"\n              value={formData.email}\n              onChange={handleChange}\n              disabled={isSubmitting}\n            />\n          </FormControl>\n        </div>\n        \n        <div className="mb-8">\n          <h3 className="text-lg font-semibold mb-4 pb-2 border-b border-gray-200">Darstellung</h3>\n          \n          <FormControl \n            label="Sprache" \n            className="mb-4"\n          >\n            <Select\n              name="language"\n              value={formData.language}\n              onChange={handleChange}\n              disabled={isSubmitting}\n            >\n              <option value="de">Deutsch</option>\n              <option value="en">Englisch</option>\n              <option value="fr">Franz\xf6sisch</option>\n              <option value="es">Spanisch</option>\n            </Select>\n          </FormControl>\n          \n          <FormControl \n            label="Theme" \n            className="mb-4"\n          >\n            <RadioGroup\n              name="theme"\n              value={formData.theme}\n              onChange={handleChange}\n              disabled={isSubmitting}\n            >\n              <Radio value="light" label="Hell" />\n              <Radio value="dark" label="Dunkel" />\n              <Radio value="system" label="Systemeinstellung" />\n            </RadioGroup>\n          </FormControl>\n        </div>\n        \n        <div className="mb-8">\n          <h3 className="text-lg font-semibold mb-4 pb-2 border-b border-gray-200">Benachrichtigungen</h3>\n          \n          <FormControl className="mb-2">\n            <Checkbox\n              name="notifications.email"\n              checked={formData.notifications.email}\n              onChange={handleChange}\n              disabled={isSubmitting}\n              label="E-Mail-Benachrichtigungen"\n            />\n          </FormControl>\n          \n          <FormControl className="mb-2">\n            <Checkbox\n              name="notifications.push"\n              checked={formData.notifications.push}\n              onChange={handleChange}\n              disabled={isSubmitting}\n              label="Push-Benachrichtigungen"\n            />\n          </FormControl>\n          \n          <FormControl className="mb-4">\n            <Checkbox\n              name="notifications.sms"\n              checked={formData.notifications.sms}\n              onChange={handleChange}\n              disabled={isSubmitting}\n              label="SMS-Benachrichtigungen"\n            />\n          </FormControl>\n        </div>\n        \n        <div className="mb-8">\n          <h3 className="text-lg font-semibold mb-4 pb-2 border-b border-gray-200">Datenschutz</h3>\n          \n          <FormControl \n            label="Profilsichtbarkeit" \n            className="mb-4"\n          >\n            <Select\n              name="privacy.profileVisibility"\n              value={formData.privacy.profileVisibility}\n              onChange={handleChange}\n              disabled={isSubmitting}\n            >\n              <option value="public">\xd6ffentlich</option>\n              <option value="friends">Nur Freunde</option>\n              <option value="private">Privat</option>\n            </Select>\n          </FormControl>\n          \n          <FormControl className="mb-2">\n            <Checkbox\n              name="privacy.activityTracking"\n              checked={formData.privacy.activityTracking}\n              onChange={handleChange}\n              disabled={isSubmitting}\n              label="Aktivit\xe4tsverfolgung erlauben"\n            />\n          </FormControl>\n          \n          <FormControl className="mb-4">\n            <Checkbox\n              name="privacy.dataSharing"\n              checked={formData.privacy.dataSharing}\n              onChange={handleChange}\n              disabled={isSubmitting}\n              label="Daten mit Partnern teilen"\n            />\n          </FormControl>\n        </div>\n        \n        <div className="flex justify-end gap-4">\n          <Button\n            variant="outlined"\n            disabled={isSubmitting}\n          >\n            Abbrechen\n          </Button>\n          \n          <Button\n            type="submit"\n            variant="primary"\n            loading={isSubmitting}\n          >\n            Speichern\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n'})})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>i,x:()=>o});var r=a(6540);const t={},s=r.createContext(t);function i(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);