"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[510],{7659:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"components/forms/fileupload","title":"FileUpload","description":"Die FileUpload-Komponente erm\xf6glicht es Benutzern, Dateien hochzuladen, entweder durch Auswahl \xfcber einen Datei-Dialog oder per Drag & Drop.","source":"@site/wiki/components/forms/fileupload.md","sourceDirName":"components/forms","slug":"/components/forms/fileupload","permalink":"/smolitux-ui/wiki/components/forms/fileupload","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/wiki/wiki/components/forms/fileupload.md","tags":[],"version":"current","frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"DatePicker-Komponente: Barrierefreiheit","permalink":"/smolitux-ui/wiki/components/forms/datepicker/accessibility"},"next":{"title":"FormControl","permalink":"/smolitux-ui/wiki/components/forms/form-control"}}');var d=l(4848),s=l(8453);const r={},t="FileUpload",a={},o=[{value:"Import",id:"import",level:2},{value:"Verwendung",id:"verwendung",level:2},{value:"Einfacher FileUpload",id:"einfacher-fileupload",level:3},{value:"FileUpload mit Label und Hilfetext",id:"fileupload-mit-label-und-hilfetext",level:3},{value:"FileUpload mit benutzerdefiniertem Dropzone-Text",id:"fileupload-mit-benutzerdefiniertem-dropzone-text",level:3},{value:"FileUpload mit Dateityp-Beschr\xe4nkung",id:"fileupload-mit-dateityp-beschr\xe4nkung",level:3},{value:"FileUpload mit Gr\xf6\xdfenbeschr\xe4nkung",id:"fileupload-mit-gr\xf6\xdfenbeschr\xe4nkung",level:3},{value:"FileUpload mit Mehrfachauswahl",id:"fileupload-mit-mehrfachauswahl",level:3},{value:"FileUpload mit Vorschau",id:"fileupload-mit-vorschau",level:3},{value:"FileUpload mit Fortschrittsanzeige",id:"fileupload-mit-fortschrittsanzeige",level:3},{value:"FileUpload mit automatischem Upload",id:"fileupload-mit-automatischem-upload",level:3},{value:"FileUpload mit benutzerdefiniertem Upload-Handler",id:"fileupload-mit-benutzerdefiniertem-upload-handler",level:3},{value:"Kontrollierter FileUpload",id:"kontrollierter-fileupload",level:3},{value:"FileUpload mit Validierung",id:"fileupload-mit-validierung",level:3},{value:"Props",id:"props",level:2},{value:"FileInfo Interface",id:"fileinfo-interface",level:3},{value:"Barrierefreiheit",id:"barrierefreiheit",level:2},{value:"Beispiele",id:"beispiele",level:2},{value:"Profilbild-Upload",id:"profilbild-upload",level:3},{value:"Dokumenten-Upload mit Fortschrittsanzeige",id:"dokumenten-upload-mit-fortschrittsanzeige",level:3},{value:"Bild-Galerie-Upload",id:"bild-galerie-upload",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"fileupload",children:"FileUpload"})}),"\n",(0,d.jsx)(n.p,{children:"Die FileUpload-Komponente erm\xf6glicht es Benutzern, Dateien hochzuladen, entweder durch Auswahl \xfcber einen Datei-Dialog oder per Drag & Drop."}),"\n",(0,d.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:"import { FileUpload } from '@smolitux/core';\n"})}),"\n",(0,d.jsx)(n.h2,{id:"verwendung",children:"Verwendung"}),"\n",(0,d.jsx)(n.h3,{id:"einfacher-fileupload",children:"Einfacher FileUpload"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:"<FileUpload />\n"})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-label-und-hilfetext",children:"FileUpload mit Label und Hilfetext"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'<FileUpload \n  label="Dokumente hochladen" \n  helperText="Unterst\xfctzte Formate: PDF, DOC, DOCX (max. 5MB)" \n/>\n'})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-benutzerdefiniertem-dropzone-text",children:"FileUpload mit benutzerdefiniertem Dropzone-Text"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'<FileUpload \n  label="Bilder hochladen" \n  dropzoneText="Ziehen Sie Ihre Bilder hierher oder klicken Sie, um Dateien auszuw\xe4hlen" \n/>\n'})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-dateityp-beschr\xe4nkung",children:"FileUpload mit Dateityp-Beschr\xe4nkung"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'<FileUpload \n  label="Bilder hochladen" \n  accept="image/*" \n  helperText="Nur Bilddateien sind erlaubt" \n/>\n'})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-gr\xf6\xdfenbeschr\xe4nkung",children:"FileUpload mit Gr\xf6\xdfenbeschr\xe4nkung"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'<FileUpload \n  label="Dokumente hochladen" \n  maxSize={5 * 1024 * 1024} // 5MB\n  helperText="Maximale Dateigr\xf6\xdfe: 5MB" \n/>\n'})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-mehrfachauswahl",children:"FileUpload mit Mehrfachauswahl"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'<FileUpload \n  label="Mehrere Dateien hochladen" \n  multiple \n/>\n'})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-vorschau",children:"FileUpload mit Vorschau"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'<FileUpload \n  label="Bilder mit Vorschau" \n  accept="image/*" \n  showPreview \n/>\n'})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-fortschrittsanzeige",children:"FileUpload mit Fortschrittsanzeige"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'<FileUpload \n  label="Dateien mit Fortschrittsanzeige" \n  showProgress \n/>\n'})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-automatischem-upload",children:"FileUpload mit automatischem Upload"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'<FileUpload \n  label="Automatischer Upload" \n  autoUpload \n  uploadUrl="/api/upload" \n/>\n'})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-benutzerdefiniertem-upload-handler",children:"FileUpload mit benutzerdefiniertem Upload-Handler"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:"function CustomUploadExample() {\n  const handleUpload = async (files) => {\n    // Simuliere einen Upload-Prozess\n    for (const file of files) {\n      // Aktualisiere den Fortschritt\n      for (let progress = 0; progress <= 100; progress += 10) {\n        await new Promise(resolve => setTimeout(resolve, 200));\n        file.progress = progress;\n        // Hier w\xfcrde man normalerweise den State aktualisieren\n      }\n      \n      file.status = 'success';\n    }\n    \n    console.log('Upload abgeschlossen:', files);\n  };\n  \n  return (\n    <FileUpload \n      label=\"Benutzerdefinierter Upload\" \n      onUpload={handleUpload} \n      showProgress \n    />\n  );\n}\n"})}),"\n",(0,d.jsx)(n.h3,{id:"kontrollierter-fileupload",children:"Kontrollierter FileUpload"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'function ControlledFileUploadExample() {\n  const [files, setFiles] = useState([]);\n  \n  const handleChange = (newFiles) => {\n    setFiles(newFiles);\n  };\n  \n  return (\n    <div>\n      <FileUpload \n        label="Kontrollierter FileUpload" \n        value={files} \n        onChange={handleChange} \n        showPreview \n      />\n      \n      <div className="mt-4">\n        <h3 className="text-lg font-medium">Ausgew\xe4hlte Dateien:</h3>\n        <ul className="list-disc pl-5 mt-2">\n          {files.map(file => (\n            <li key={file.id}>\n              {file.name} ({(file.size / 1024).toFixed(2)} KB)\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,d.jsx)(n.h3,{id:"fileupload-mit-validierung",children:"FileUpload mit Validierung"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:"function ValidatedFileUploadExample() {\n  const [files, setFiles] = useState([]);\n  const [error, setError] = useState('');\n  \n  const validateFiles = (newFiles) => {\n    // Pr\xfcfe, ob alle Dateien Bilder sind\n    const invalidFiles = newFiles.filter(file => !file.type.startsWith('image/'));\n    \n    if (invalidFiles.length > 0) {\n      setError(`Folgende Dateien sind keine Bilder: ${invalidFiles.map(f => f.name).join(', ')}`);\n      return false;\n    }\n    \n    // Pr\xfcfe, ob alle Dateien kleiner als 2MB sind\n    const largeFiles = newFiles.filter(file => file.size > 2 * 1024 * 1024);\n    \n    if (largeFiles.length > 0) {\n      setError(`Folgende Dateien sind gr\xf6\xdfer als 2MB: ${largeFiles.map(f => f.name).join(', ')}`);\n      return false;\n    }\n    \n    setError('');\n    return true;\n  };\n  \n  const handleChange = (newFiles) => {\n    if (validateFiles(newFiles)) {\n      setFiles(newFiles);\n    }\n  };\n  \n  return (\n    <FileUpload \n      label=\"Bilder hochladen (max. 2MB)\" \n      accept=\"image/*\" \n      value={files} \n      onChange={handleChange} \n      error={error} \n      showPreview \n    />\n  );\n}\n"})}),"\n",(0,d.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Prop"}),(0,d.jsx)(n.th,{children:"Typ"}),(0,d.jsx)(n.th,{children:"Standard"}),(0,d.jsx)(n.th,{children:"Beschreibung"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"label"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Label f\xfcr die Dateiauswahl"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"dropzoneText"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"'Dateien hierher ziehen oder klicken, um auszuw\xe4hlen'"})}),(0,d.jsx)(n.td,{children:"Text im Dropbereich"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"helperText"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"ReactNode"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Hilfetext"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"error"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"ReactNode"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Fehlermeldung"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"value"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"FileInfo[]"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Aktuelle Dateien"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onChange"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"(files: FileInfo[]) => void"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Callback bei Datei-\xc4nderungen"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onUploadStart"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"(files: FileInfo[]) => void"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Callback bei Upload-Start"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onUploadProgress"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"(file: FileInfo, progress: number) => void"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Callback bei Upload-Fortschritt"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onUploadComplete"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"(file: FileInfo) => void"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Callback bei Upload-Abschluss"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onUploadError"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"(file: FileInfo, error: any) => void"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Callback bei Upload-Fehler"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"autoUpload"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"boolean"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"false"})}),(0,d.jsx)(n.td,{children:"Automatischer Upload"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"maxSize"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Maximale Dateigr\xf6\xdfe in Bytes"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"accept"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:'Akzeptierte Dateitypen (z.B. "image/*,.pdf")'})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"multiple"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"boolean"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"false"})}),(0,d.jsx)(n.td,{children:"Mehrfachauswahl erlauben"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"disabled"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"boolean"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"false"})}),(0,d.jsx)(n.td,{children:"Komponente deaktivieren"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"showPreview"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"boolean"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"false"})}),(0,d.jsx)(n.td,{children:"Vorschau anzeigen"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"showProgress"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"boolean"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"false"})}),(0,d.jsx)(n.td,{children:"Fortschrittsanzeige anzeigen"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"uploadUrl"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"URL f\xfcr automatischen Upload"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"uploadMethod"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"'POST' | 'PUT'"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"'POST'"})}),(0,d.jsx)(n.td,{children:"HTTP-Methode f\xfcr Upload"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"uploadHeaders"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Record<string, string>"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"HTTP-Header f\xfcr Upload"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"uploadFieldName"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"'file'"})}),(0,d.jsx)(n.td,{children:"Feldname f\xfcr Upload"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"className"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"-"}),(0,d.jsx)(n.td,{children:"Zus\xe4tzliche CSS-Klassen"})]})]})]}),"\n",(0,d.jsx)(n.h3,{id:"fileinfo-interface",children:"FileInfo Interface"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Eigenschaft"}),(0,d.jsx)(n.th,{children:"Typ"}),(0,d.jsx)(n.th,{children:"Beschreibung"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"id"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"Eindeutige ID des Files"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"name"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"Original-Dateiname"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"type"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"MIME-Typ"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"size"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"Dateigr\xf6\xdfe in Bytes"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"file"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"File"})}),(0,d.jsx)(n.td,{children:"Datei-Objekt"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"progress"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"Fortschritt (0-100)"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"error"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"Fehler"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"status"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"'idle' | 'uploading' | 'success' | 'error'"})}),(0,d.jsx)(n.td,{children:"Status"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"previewUrl"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"Vorschau-URL"})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"barrierefreiheit",children:"Barrierefreiheit"}),"\n",(0,d.jsx)(n.p,{children:"Die FileUpload-Komponente ist f\xfcr Barrierefreiheit optimiert:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Verwendet native ",(0,d.jsx)(n.code,{children:'<input type="file">'})," Elemente f\xfcr korrekte Semantik"]}),"\n",(0,d.jsx)(n.li,{children:"Labels sind korrekt mit den Eingabefeldern verkn\xfcpft"}),"\n",(0,d.jsx)(n.li,{children:"Unterst\xfctzt Tastaturnavigation"}),"\n",(0,d.jsx)(n.li,{children:"Bietet visuelle und textuelle R\xfcckmeldung zum Upload-Status"}),"\n",(0,d.jsx)(n.li,{children:"Fehlermeldungen werden klar kommuniziert"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"beispiele",children:"Beispiele"}),"\n",(0,d.jsx)(n.h3,{id:"profilbild-upload",children:"Profilbild-Upload"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'function ProfileImageUpload() {\n  const [image, setImage] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  \n  const handleImageChange = (files) => {\n    if (files.length > 0) {\n      setImage(files[0]);\n      setIsUploading(true);\n      \n      // Simuliere einen Upload\n      setTimeout(() => {\n        setIsUploading(false);\n        files[0].status = \'success\';\n        files[0].progress = 100;\n      }, 2000);\n    } else {\n      setImage(null);\n    }\n  };\n  \n  const handleRemoveImage = () => {\n    setImage(null);\n  };\n  \n  return (\n    <div className="max-w-md mx-auto">\n      <h2 className="text-xl font-bold mb-4">Profilbild \xe4ndern</h2>\n      \n      <div className="flex items-center mb-6">\n        <div className="relative mr-4">\n          {image && image.previewUrl ? (\n            <img \n              src={image.previewUrl} \n              alt="Profilbild" \n              className="w-24 h-24 rounded-full object-cover"\n            />\n          ) : (\n            <div className="w-24 h-24 rounded-full bg-gray-200 flex items-center justify-center text-gray-500">\n              <svg className="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />\n              </svg>\n            </div>\n          )}\n          \n          {isUploading && (\n            <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-full">\n              <svg className="animate-spin h-8 w-8 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">\n                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>\n                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\n              </svg>\n            </div>\n          )}\n        </div>\n        \n        <div>\n          <FileUpload \n            accept="image/*"\n            onChange={handleImageChange}\n            showPreview\n            dropzoneText="Bild ausw\xe4hlen"\n            helperText="JPG, PNG oder GIF (max. 2MB)"\n            maxSize={2 * 1024 * 1024}\n            className="mb-2"\n          />\n          \n          {image && (\n            <button \n              className="text-sm text-red-600 hover:text-red-800"\n              onClick={handleRemoveImage}\n            >\n              Bild entfernen\n            </button>\n          )}\n        </div>\n      </div>\n      \n      <div className="flex justify-end">\n        <button className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700">\n          Speichern\n        </button>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,d.jsx)(n.h3,{id:"dokumenten-upload-mit-fortschrittsanzeige",children:"Dokumenten-Upload mit Fortschrittsanzeige"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'function DocumentUpload() {\n  const [documents, setDocuments] = useState([]);\n  \n  const handleDocumentsChange = (files) => {\n    setDocuments(files);\n  };\n  \n  const handleUpload = async () => {\n    // Simuliere einen Upload-Prozess f\xfcr jede Datei\n    const updatedDocuments = [...documents];\n    \n    for (let i = 0; i < updatedDocuments.length; i++) {\n      const doc = updatedDocuments[i];\n      \n      if (doc.status !== \'idle\') continue;\n      \n      doc.status = \'uploading\';\n      setDocuments([...updatedDocuments]);\n      \n      // Simuliere Fortschritt\n      for (let progress = 0; progress <= 100; progress += 10) {\n        await new Promise(resolve => setTimeout(resolve, 200));\n        doc.progress = progress;\n        setDocuments([...updatedDocuments]);\n      }\n      \n      // Simuliere Erfolg oder Fehler (zuf\xe4llig)\n      if (Math.random() > 0.2) {\n        doc.status = \'success\';\n      } else {\n        doc.status = \'error\';\n        doc.error = \'Upload fehlgeschlagen. Bitte versuchen Sie es erneut.\';\n      }\n      \n      setDocuments([...updatedDocuments]);\n    }\n  };\n  \n  const handleRemove = (id) => {\n    setDocuments(documents.filter(doc => doc.id !== id));\n  };\n  \n  const handleRetry = async (id) => {\n    const doc = documents.find(d => d.id === id);\n    if (!doc) return;\n    \n    doc.status = \'uploading\';\n    doc.error = undefined;\n    doc.progress = 0;\n    setDocuments([...documents]);\n    \n    // Simuliere Fortschritt\n    for (let progress = 0; progress <= 100; progress += 10) {\n      await new Promise(resolve => setTimeout(resolve, 200));\n      doc.progress = progress;\n      setDocuments([...documents]);\n    }\n    \n    doc.status = \'success\';\n    setDocuments([...documents]);\n  };\n  \n  return (\n    <div className="max-w-2xl mx-auto">\n      <h2 className="text-xl font-bold mb-4">Dokumente hochladen</h2>\n      \n      <FileUpload \n        label="Dokumente ausw\xe4hlen"\n        accept=".pdf,.doc,.docx,.txt"\n        multiple\n        value={documents}\n        onChange={handleDocumentsChange}\n        helperText="Unterst\xfctzte Formate: PDF, DOC, DOCX, TXT (max. 10MB pro Datei)"\n        maxSize={10 * 1024 * 1024}\n        className="mb-6"\n      />\n      \n      {documents.length > 0 && (\n        <div className="mb-6">\n          <div className="flex justify-between items-center mb-2">\n            <h3 className="font-medium">Ausgew\xe4hlte Dokumente</h3>\n            <button \n              className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"\n              onClick={handleUpload}\n              disabled={documents.every(doc => doc.status !== \'idle\')}\n            >\n              Alle hochladen\n            </button>\n          </div>\n          \n          <div className="border rounded-md divide-y">\n            {documents.map(doc => (\n              <div key={doc.id} className="p-3">\n                <div className="flex justify-between items-center mb-2">\n                  <div className="flex items-center">\n                    <svg className="w-5 h-5 text-gray-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />\n                    </svg>\n                    <span className="font-medium">{doc.name}</span>\n                  </div>\n                  \n                  <div className="flex items-center">\n                    <span className="text-sm text-gray-500 mr-2">\n                      {(doc.size / 1024).toFixed(2)} KB\n                    </span>\n                    \n                    {doc.status === \'idle\' && (\n                      <button \n                        className="text-gray-500 hover:text-gray-700"\n                        onClick={() => handleRemove(doc.id)}\n                      >\n                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />\n                        </svg>\n                      </button>\n                    )}\n                    \n                    {doc.status === \'error\' && (\n                      <button \n                        className="text-yellow-500 hover:text-yellow-700"\n                        onClick={() => handleRetry(doc.id)}\n                      >\n                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />\n                        </svg>\n                      </button>\n                    )}\n                    \n                    {doc.status === \'success\' && (\n                      <svg className="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />\n                      </svg>\n                    )}\n                  </div>\n                </div>\n                \n                {(doc.status === \'uploading\' || doc.status === \'success\') && (\n                  <div className="w-full bg-gray-200 rounded-full h-2.5">\n                    <div \n                      className={`h-2.5 rounded-full ${doc.status === \'success\' ? \'bg-green-500\' : \'bg-blue-500\'}`}\n                      style={{ width: `${doc.progress}%` }}\n                    ></div>\n                  </div>\n                )}\n                \n                {doc.status === \'error\' && (\n                  <p className="text-sm text-red-500 mt-1">{doc.error}</p>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n'})}),"\n",(0,d.jsx)(n.h3,{id:"bild-galerie-upload",children:"Bild-Galerie-Upload"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'function ImageGalleryUpload() {\n  const [images, setImages] = useState([]);\n  \n  const handleImagesChange = (files) => {\n    // Filtere nur Bilder\n    const imageFiles = files.filter(file => file.type.startsWith(\'image/\'));\n    setImages(imageFiles);\n  };\n  \n  const handleRemoveImage = (id) => {\n    setImages(images.filter(img => img.id !== id));\n  };\n  \n  return (\n    <div className="max-w-3xl mx-auto">\n      <h2 className="text-xl font-bold mb-4">Bilder-Galerie</h2>\n      \n      <FileUpload \n        label="Bilder hochladen"\n        accept="image/*"\n        multiple\n        value={images}\n        onChange={handleImagesChange}\n        showPreview\n        helperText="Ziehen Sie Ihre Bilder hierher oder klicken Sie, um Dateien auszuw\xe4hlen"\n        className="mb-6"\n      />\n      \n      {images.length > 0 && (\n        <div>\n          <h3 className="font-medium mb-2">Vorschau ({images.length} Bilder)</h3>\n          \n          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">\n            {images.map(img => (\n              <div key={img.id} className="relative group">\n                <img \n                  src={img.previewUrl} \n                  alt={img.name}\n                  className="w-full h-40 object-cover rounded-md"\n                />\n                \n                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-opacity flex items-center justify-center opacity-0 group-hover:opacity-100">\n                  <button \n                    className="p-1 bg-white rounded-full text-red-500 hover:text-red-700"\n                    onClick={() => handleRemoveImage(img.id)}\n                  >\n                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">\n                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />\n                    </svg>\n                  </button>\n                </div>\n                \n                <div className="mt-1 text-sm truncate">{img.name}</div>\n              </div>\n            ))}\n          </div>\n          \n          <div className="mt-4 flex justify-end">\n            <button className="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700">\n              Alle hochladen\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>t});var i=l(6540);const d={},s=i.createContext(d);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);