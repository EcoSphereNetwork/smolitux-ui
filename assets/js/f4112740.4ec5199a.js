"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[498],{5289:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"components/feedback/spinner","title":"Spinner","description":"Die Spinner-Komponente wird verwendet, um Ladezust\xe4nde anzuzeigen und dem Benutzer zu signalisieren, dass ein Prozess im Hintergrund ausgef\xfchrt wird.","source":"@site/wiki/components/feedback/spinner.md","sourceDirName":"components/feedback","slug":"/components/feedback/spinner","permalink":"/smolitux-ui/wiki/components/feedback/spinner","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/wiki/wiki/components/feedback/spinner.md","tags":[],"version":"current","frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"ProgressBar","permalink":"/smolitux-ui/wiki/components/feedback/progress"},"next":{"title":"Toast-Komponente: Barrierefreiheit","permalink":"/smolitux-ui/wiki/components/feedback/toast/accessibility"}}');var s=i(4848),d=i(8453);const t={},a="Spinner",l={},c=[{value:"Import",id:"import",level:2},{value:"Verwendung",id:"verwendung",level:2},{value:"Einfacher Spinner",id:"einfacher-spinner",level:3},{value:"Spinner mit verschiedenen Gr\xf6\xdfen",id:"spinner-mit-verschiedenen-gr\xf6\xdfen",level:3},{value:"Spinner mit verschiedenen Varianten",id:"spinner-mit-verschiedenen-varianten",level:3},{value:"Spinner mit verschiedenen Farben",id:"spinner-mit-verschiedenen-farben",level:3},{value:"Spinner mit Text",id:"spinner-mit-text",level:3},{value:"Zentrierter Spinner",id:"zentrierter-spinner",level:3},{value:"Spinner mit benutzerdefinierter Animation-Geschwindigkeit",id:"spinner-mit-benutzerdefinierter-animation-geschwindigkeit",level:3},{value:"Spinner mit voller Breite",id:"spinner-mit-voller-breite",level:3},{value:"Spinner mit benutzerdefiniertem Label f\xfcr Screenreader",id:"spinner-mit-benutzerdefiniertem-label-f\xfcr-screenreader",level:3},{value:"Props",id:"props",level:2},{value:"Barrierefreiheit",id:"barrierefreiheit",level:2},{value:"Beispiele",id:"beispiele",level:2},{value:"Ladezustand in einem Formular",id:"ladezustand-in-einem-formular",level:3},{value:"Ladezustand beim Datenabruf",id:"ladezustand-beim-datenabruf",level:3},{value:"Vollbild-Ladezustand",id:"vollbild-ladezustand",level:3},{value:"Spinner in verschiedenen Kontexten",id:"spinner-in-verschiedenen-kontexten",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"spinner",children:"Spinner"})}),"\n",(0,s.jsx)(n.p,{children:"Die Spinner-Komponente wird verwendet, um Ladezust\xe4nde anzuzeigen und dem Benutzer zu signalisieren, dass ein Prozess im Hintergrund ausgef\xfchrt wird."}),"\n",(0,s.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { Spinner } from '@smolitux/core';\n"})}),"\n",(0,s.jsx)(n.h2,{id:"verwendung",children:"Verwendung"}),"\n",(0,s.jsx)(n.h3,{id:"einfacher-spinner",children:"Einfacher Spinner"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"<Spinner />\n"})}),"\n",(0,s.jsx)(n.h3,{id:"spinner-mit-verschiedenen-gr\xf6\xdfen",children:"Spinner mit verschiedenen Gr\xf6\xdfen"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Spinner size="xs" className="mr-4" />\n<Spinner size="sm" className="mr-4" />\n<Spinner size="md" className="mr-4" />\n<Spinner size="lg" className="mr-4" />\n<Spinner size="xl" />\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spinner-mit-verschiedenen-varianten",children:"Spinner mit verschiedenen Varianten"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Spinner variant="border" className="mr-4" />\n<Spinner variant="grow" className="mr-4" />\n<Spinner variant="dots" className="mr-4" />\n<Spinner variant="ring" />\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spinner-mit-verschiedenen-farben",children:"Spinner mit verschiedenen Farben"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Spinner color="primary" className="mr-4" />\n<Spinner color="secondary" className="mr-4" />\n<Spinner color="success" className="mr-4" />\n<Spinner color="danger" className="mr-4" />\n<Spinner color="warning" className="mr-4" />\n<Spinner color="info" />\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spinner-mit-text",children:"Spinner mit Text"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Spinner text="Wird geladen..." />\n'})}),"\n",(0,s.jsx)(n.h3,{id:"zentrierter-spinner",children:"Zentrierter Spinner"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"<div style={{ position: 'relative', height: '200px', border: '1px dashed #ccc' }}>\n  <Spinner centered />\n</div>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"spinner-mit-benutzerdefinierter-animation-geschwindigkeit",children:"Spinner mit benutzerdefinierter Animation-Geschwindigkeit"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Spinner speed={2} className="mr-4" />\n<Spinner speed={0.5} />\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spinner-mit-voller-breite",children:"Spinner mit voller Breite"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Spinner fullWidth text="Daten werden geladen..." />\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spinner-mit-benutzerdefiniertem-label-f\xfcr-screenreader",children:"Spinner mit benutzerdefiniertem Label f\xfcr Screenreader"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Spinner label="Daten werden vom Server abgerufen..." />\n'})}),"\n",(0,s.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop"}),(0,s.jsx)(n.th,{children:"Typ"}),(0,s.jsx)(n.th,{children:"Standard"}),(0,s.jsx)(n.th,{children:"Beschreibung"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"size"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'xs' | 'sm' | 'md' | 'lg' | 'xl'"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'md'"})}),(0,s.jsx)(n.td,{children:"Gr\xf6\xdfe des Spinners"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"variant"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'border' | 'grow' | 'dots' | 'ring'"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'border'"})}),(0,s.jsx)(n.td,{children:"Variante des Spinners"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"color"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark'"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'primary'"})}),(0,s.jsx)(n.td,{children:"Farbe des Spinners"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"speed"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Geschwindigkeit der Animation (in Sekunden)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"label"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'Wird geladen...'"})}),(0,s.jsx)(n.td,{children:"Label f\xfcr Screenreader"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"centered"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{children:"Zentriert den Spinner im Container"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"text"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Zeigt einen Text unter dem Spinner an"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fullWidth"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{children:"Volle Breite des Containers"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"className"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Zus\xe4tzliche CSS-Klassen"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"style"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"React.CSSProperties"})}),(0,s.jsx)(n.td,{children:"-"}),(0,s.jsx)(n.td,{children:"Inline-Styles"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"barrierefreiheit",children:"Barrierefreiheit"}),"\n",(0,s.jsx)(n.p,{children:"Die Spinner-Komponente ist f\xfcr Barrierefreiheit optimiert:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Verwendet das ",(0,s.jsx)(n.code,{children:'role="status"'}),"-Attribut, um Screenreader zu informieren, dass es sich um einen Statusindikator handelt"]}),"\n",(0,s.jsx)(n.li,{children:"Enth\xe4lt standardm\xe4\xdfig einen versteckten Text f\xfcr Screenreader"}),"\n",(0,s.jsxs)(n.li,{children:["Der Text kann \xfcber die ",(0,s.jsx)(n.code,{children:"label"}),"-Prop angepasst werden"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"beispiele",children:"Beispiele"}),"\n",(0,s.jsx)(n.h3,{id:"ladezustand-in-einem-formular",children:"Ladezustand in einem Formular"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function LoadingFormExample() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \'\',\n    email: \'\'\n  });\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    // Simuliere API-Aufruf\n    setTimeout(() => {\n      setIsLoading(false);\n      alert(\'Formular erfolgreich abgesendet!\');\n    }, 2000);\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">\n      <h2 className="text-xl font-bold mb-4">Kontaktformular</h2>\n      \n      <div className="mb-4">\n        <label className="block text-sm font-medium text-gray-700 mb-1">\n          Name\n        </label>\n        <input\n          type="text"\n          name="name"\n          value={formData.name}\n          onChange={handleChange}\n          className="w-full px-3 py-2 border border-gray-300 rounded-md"\n          required\n          disabled={isLoading}\n        />\n      </div>\n      \n      <div className="mb-6">\n        <label className="block text-sm font-medium text-gray-700 mb-1">\n          E-Mail\n        </label>\n        <input\n          type="email"\n          name="email"\n          value={formData.email}\n          onChange={handleChange}\n          className="w-full px-3 py-2 border border-gray-300 rounded-md"\n          required\n          disabled={isLoading}\n        />\n      </div>\n      \n      <button\n        type="submit"\n        className="w-full py-2 px-4 bg-primary-600 text-white rounded-md hover:bg-primary-700 disabled:bg-gray-400"\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <div className="flex items-center justify-center">\n            <Spinner size="sm" color="light" className="mr-2" />\n            <span>Wird gesendet...</span>\n          </div>\n        ) : (\n          \'Absenden\'\n        )}\n      </button>\n    </form>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"ladezustand-beim-datenabruf",children:"Ladezustand beim Datenabruf"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function DataFetchingExample() {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Simuliere API-Aufruf\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        // Simuliere Daten\n        const mockData = [\n          { id: 1, name: \'Produkt 1\', price: 29.99 },\n          { id: 2, name: \'Produkt 2\', price: 39.99 },\n          { id: 3, name: \'Produkt 3\', price: 49.99 }\n        ];\n        \n        setData(mockData);\n        setIsLoading(false);\n      } catch (err) {\n        setError(\'Fehler beim Laden der Daten\');\n        setIsLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, []);\n  \n  if (isLoading) {\n    return (\n      <div className="flex flex-col items-center justify-center p-8">\n        <Spinner size="lg" variant="dots" className="mb-4" />\n        <p className="text-gray-600">Daten werden geladen...</p>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className="p-4 bg-red-100 text-red-700 rounded-md">\n        {error}\n      </div>\n    );\n  }\n  \n  return (\n    <div className="max-w-md mx-auto">\n      <h2 className="text-xl font-bold mb-4">Produkte</h2>\n      <ul className="divide-y divide-gray-200">\n        {data.map(product => (\n          <li key={product.id} className="py-4">\n            <div className="flex justify-between">\n              <span className="font-medium">{product.name}</span>\n              <span className="text-gray-600">{product.price} \u20ac</span>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"vollbild-ladezustand",children:"Vollbild-Ladezustand"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function FullscreenLoadingExample() {\n  const [isLoading, setIsLoading] = useState(true);\n  \n  useEffect(() => {\n    // Simuliere Ladezeit\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 3000);\n    \n    return () => clearTimeout(timer);\n  }, []);\n  \n  if (isLoading) {\n    return (\n      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">\n        <div className="bg-white p-8 rounded-lg shadow-lg text-center">\n          <Spinner size="xl" variant="ring" color="primary" className="mb-4" />\n          <h2 className="text-xl font-bold mb-2">Anwendung wird geladen</h2>\n          <p className="text-gray-600">Bitte haben Sie einen Moment Geduld...</p>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className="max-w-md mx-auto p-6">\n      <h1 className="text-2xl font-bold mb-4">Willkommen in der Anwendung</h1>\n      <p className="text-gray-600">\n        Die Anwendung wurde erfolgreich geladen und ist bereit zur Verwendung.\n      </p>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spinner-in-verschiedenen-kontexten",children:"Spinner in verschiedenen Kontexten"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function SpinnerContextsExample() {\n  return (\n    <div className="space-y-8">\n      {/* Button mit Spinner */}\n      <div>\n        <h3 className="text-lg font-medium mb-2">Button mit Spinner</h3>\n        <button className="px-4 py-2 bg-primary-600 text-white rounded-md flex items-center">\n          <Spinner size="sm" color="light" className="mr-2" />\n          Wird verarbeitet...\n        </button>\n      </div>\n      \n      {/* Karte mit Spinner */}\n      <div>\n        <h3 className="text-lg font-medium mb-2">Karte mit Spinner</h3>\n        <div className="p-6 bg-white rounded-lg shadow-md">\n          <div className="flex items-center justify-center" style={{ height: \'150px\' }}>\n            <Spinner variant="dots" text="Inhalt wird geladen..." />\n          </div>\n        </div>\n      </div>\n      \n      {/* Inline-Spinner */}\n      <div>\n        <h3 className="text-lg font-medium mb-2">Inline-Spinner</h3>\n        <p className="flex items-center">\n          Daten werden synchronisiert \n          <Spinner size="xs" className="ml-2" />\n        </p>\n      </div>\n      \n      {/* Spinner mit Hintergrund */}\n      <div>\n        <h3 className="text-lg font-medium mb-2">Spinner mit Hintergrund</h3>\n        <div className="relative p-6 bg-gray-100 rounded-lg" style={{ height: \'150px\' }}>\n          <div className="absolute inset-0 bg-white bg-opacity-80 flex items-center justify-center">\n            <Spinner size="lg" variant="ring" color="primary" />\n          </div>\n          <p>Dieser Inhalt wird gerade aktualisiert...</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(6540);const s={},d=r.createContext(s);function t(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);