"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[335],{4111:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"guidelines/component-structure","title":"Komponenten-Struktur Richtlinien","description":"Einf\xfchrung","source":"@site/wiki/guidelines/component-structure.md","sourceDirName":"guidelines","slug":"/guidelines/component-structure","permalink":"/smolitux-ui/wiki/guidelines/component-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/EcoSphereNetwork/smolitux-ui/tree/main/docs/wiki/wiki/guidelines/component-structure.md","tags":[],"version":"current","frontMatter":{},"sidebar":"guideSidebar","previous":{"title":"Coding Standards","permalink":"/smolitux-ui/wiki/guidelines/coding-standards"},"next":{"title":"Testing-Strategie","permalink":"/smolitux-ui/wiki/guidelines/testing-strategy"}}');var i=t(4848),s=t(8453);const o={},l="Komponenten-Struktur Richtlinien",a={},d=[{value:"Einf\xfchrung",id:"einf\xfchrung",level:2},{value:"Verzeichnisstruktur",id:"verzeichnisstruktur",level:2},{value:"Komponenten-Datei-Struktur",id:"komponenten-datei-struktur",level:2},{value:"Index-Datei",id:"index-datei",level:2},{value:"Tests",id:"tests",level:2},{value:"Funktionale Tests",id:"funktionale-tests",level:3},{value:"Barrierefreiheitstests",id:"barrierefreiheitstests",level:3},{value:"Storybook-Geschichten",id:"storybook-geschichten",level:2},{value:"Dokumentation",id:"dokumentation",level:2},{value:"Richtlinien f\xfcr Props",id:"richtlinien-f\xfcr-props",level:2},{value:"Styling-Richtlinien",id:"styling-richtlinien",level:2},{value:"Komponentenkategorien",id:"komponentenkategorien",level:2},{value:"Versionierung und \xc4nderungen",id:"versionierung-und-\xe4nderungen",level:2},{value:"Qualit\xe4tssicherung",id:"qualit\xe4tssicherung",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"komponenten-struktur-richtlinien",children:"Komponenten-Struktur Richtlinien"})}),"\n",(0,i.jsx)(n.h2,{id:"einf\xfchrung",children:"Einf\xfchrung"}),"\n",(0,i.jsx)(n.p,{children:"Diese Richtlinien definieren die Struktur und Organisation von Komponenten in der Smolitux UI Bibliothek. Eine konsistente Struktur erleichtert die Wartung, Erweiterung und Nutzung der Komponenten."}),"\n",(0,i.jsx)(n.h2,{id:"verzeichnisstruktur",children:"Verzeichnisstruktur"}),"\n",(0,i.jsxs)(n.p,{children:["Jede Komponente sollte in einem eigenen Verzeichnis innerhalb von ",(0,i.jsx)(n.code,{children:"packages/@smolitux/core/src/components/"})," organisiert sein:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"packages/@smolitux/core/src/components/ComponentName/\n\u251c\u2500\u2500 ComponentName.tsx         # Hauptkomponentendatei\n\u251c\u2500\u2500 ComponentName.css         # Komponentenspezifische Styles (optional)\n\u251c\u2500\u2500 index.ts                  # Export der Komponente\n\u251c\u2500\u2500 __tests__/                # Testverzeichnis\n\u2502   \u251c\u2500\u2500 ComponentName.test.tsx       # Funktionale Tests\n\u2502   \u2514\u2500\u2500 ComponentName.a11y.test.tsx  # Barrierefreiheitstests\n\u2514\u2500\u2500 stories/                  # Storybook-Geschichten\n    \u2514\u2500\u2500 ComponentName.stories.tsx\n"})}),"\n",(0,i.jsx)(n.h2,{id:"komponenten-datei-struktur",children:"Komponenten-Datei-Struktur"}),"\n",(0,i.jsxs)(n.p,{children:["Jede Komponenten-Datei (",(0,i.jsx)(n.code,{children:"ComponentName.tsx"}),") sollte folgende Struktur haben:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React, { forwardRef } from 'react';\nimport { classNames } from '../../utils/classNames';\n\n// 1. Typdefinitionen\nexport interface ComponentNameProps extends React.HTMLAttributes<HTMLElement> {\n  /** Dokumentation der Prop */\n  propName?: PropType;\n  // Weitere Props...\n}\n\n// 2. Komponente\n/**\n * Beschreibung der Komponente und ihrer Verwendung\n * \n * @example\n * ```tsx\n * <ComponentName propName={value}>Inhalt</ComponentName>\n * ```\n */\nexport const ComponentName = forwardRef<HTMLElement, ComponentNameProps>(({\n  propName = defaultValue,\n  className,\n  children,\n  ...rest\n}, ref) => {\n  // 3. Hooks und State\n\n  // 4. Berechnete Werte und Effekte\n  \n  // 5. Event Handler\n  \n  // 6. Render\n  return (\n    <div\n      ref={ref}\n      className={classNames(\n        'base-class',\n        propName && 'conditional-class',\n        className\n      )}\n      data-testid=\"component-name\"\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n});\n\n// 7. Display Name\nComponentName.displayName = 'ComponentName';\n\n// 8. Default Export\nexport default ComponentName;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"index-datei",children:"Index-Datei"}),"\n",(0,i.jsxs)(n.p,{children:["Die ",(0,i.jsx)(n.code,{children:"index.ts"}),"-Datei sollte die Komponente und ihre Typen exportieren:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"export { default, ComponentName, type ComponentNameProps } from './ComponentName';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"tests",children:"Tests"}),"\n",(0,i.jsx)(n.h3,{id:"funktionale-tests",children:"Funktionale Tests"}),"\n",(0,i.jsxs)(n.p,{children:["Funktionale Tests (",(0,i.jsx)(n.code,{children:"ComponentName.test.tsx"}),") sollten die Komponente auf korrekte Funktionalit\xe4t testen:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { ComponentName } from '../ComponentName';\n\ndescribe('ComponentName', () => {\n  test('renders correctly with default props', () => {\n    render(<ComponentName>Content</ComponentName>);\n    expect(screen.getByTestId('component-name')).toBeInTheDocument();\n  });\n\n  test('applies custom className', () => {\n    render(<ComponentName className=\"custom-class\">Content</ComponentName>);\n    expect(screen.getByTestId('component-name')).toHaveClass('custom-class');\n  });\n\n  // Weitere Tests...\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"barrierefreiheitstests",children:"Barrierefreiheitstests"}),"\n",(0,i.jsxs)(n.p,{children:["Barrierefreiheitstests (",(0,i.jsx)(n.code,{children:"ComponentName.a11y.test.tsx"}),") sollten die Komponente auf Barrierefreiheit testen:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { render } from '@testing-library/react';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { ComponentName } from '../ComponentName';\n\nexpect.extend(toHaveNoViolations);\n\ndescribe('ComponentName Accessibility', () => {\n  test('should not have accessibility violations', async () => {\n    const { container } = render(<ComponentName>Content</ComponentName>);\n    const results = await axe(container);\n    expect(results).toHaveNoViolations();\n  });\n\n  // Weitere Tests...\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"storybook-geschichten",children:"Storybook-Geschichten"}),"\n",(0,i.jsxs)(n.p,{children:["Storybook-Geschichten (",(0,i.jsx)(n.code,{children:"ComponentName.stories.tsx"}),") sollten die Komponente in verschiedenen Zust\xe4nden und Konfigurationen demonstrieren:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { ComponentName } from '../ComponentName';\n\nconst meta: Meta<typeof ComponentName> = {\n  title: 'Core/Category/ComponentName',\n  component: ComponentName,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    propName: {\n      control: 'text',\n      description: 'Beschreibung der Prop',\n    },\n    // Weitere Props...\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof ComponentName>;\n\nexport const Default: Story = {\n  args: {\n    children: 'Content',\n  },\n};\n\nexport const WithCustomProp: Story = {\n  args: {\n    propName: 'value',\n    children: 'Content',\n  },\n};\n\n// Weitere Geschichten...\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dokumentation",children:"Dokumentation"}),"\n",(0,i.jsx)(n.p,{children:"Jede Komponente sollte gut dokumentiert sein:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"JSDoc-Kommentare"})," f\xfcr die Komponente und ihre Props"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Beispiele"})," f\xfcr die Verwendung der Komponente"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storybook-Dokumentation"})," mit Beschreibungen und Beispielen"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"richtlinien-f\xfcr-props",children:"Richtlinien f\xfcr Props"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Konsistente Benennung"}),": Verwende konsistente Namen f\xfcr \xe4hnliche Props in verschiedenen Komponenten (z.B. ",(0,i.jsx)(n.code,{children:"size"}),", ",(0,i.jsx)(n.code,{children:"variant"}),", ",(0,i.jsx)(n.code,{children:"color"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sinnvolle Defaults"}),": Setze sinnvolle Standardwerte f\xfcr Props."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Typsicherheit"}),": Verwende TypeScript f\xfcr strikte Typisierung."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prop Spreading"}),": Verwende ",(0,i.jsx)(n.code,{children:"...rest"})," f\xfcr HTML-Attribute, die an das Root-Element weitergegeben werden."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ref Forwarding"}),": Verwende ",(0,i.jsx)(n.code,{children:"forwardRef"})," f\xfcr alle Komponenten."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"styling-richtlinien",children:"Styling-Richtlinien"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tailwind CSS"}),": Verwende Tailwind-Klassen f\xfcr Styling."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Konsistente Varianten"}),": Verwende konsistente Varianten (",(0,i.jsx)(n.code,{children:"primary"}),", ",(0,i.jsx)(n.code,{children:"secondary"}),", etc.) f\xfcr alle Komponenten."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Responsive Design"}),": Stelle sicher, dass alle Komponenten responsiv sind."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dark Mode"}),": Unterst\xfctze Dark Mode mit ",(0,i.jsx)(n.code,{children:"dark:"})," Pr\xe4fix-Klassen."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Barrierefreiheit"}),": Stelle sicher, dass alle Komponenten die Barrierefreiheitsrichtlinien erf\xfcllen."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"komponentenkategorien",children:"Komponentenkategorien"}),"\n",(0,i.jsx)(n.p,{children:"Organisiere Komponenten in logische Kategorien:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Layout"}),": Komponenten f\xfcr Layoutstruktur (Box, Flex, Grid, Container)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inputs"}),": Formularelemente (Button, Input, Select, Checkbox)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Display"}),": Komponenten zur Datenanzeige (Table, List, Card, Avatar)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Feedback"}),": Komponenten f\xfcr Benutzerfeedback (Alert, Toast, Progress, Spinner)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overlay"}),": Komponenten, die \xfcber anderen angezeigt werden (Modal, Tooltip, Popover)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Navigation"}),": Navigationskomponenten (Menu, Tabs, Breadcrumb)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Disclosure"}),": Komponenten zum Ein-/Ausblenden von Inhalten (Accordion, Collapse)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"versionierung-und-\xe4nderungen",children:"Versionierung und \xc4nderungen"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Semantic Versioning"}),": Folge Semantic Versioning f\xfcr \xc4nderungen."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Breaking Changes"}),": Dokumentiere Breaking Changes deutlich."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Deprecation"}),": Markiere veraltete Komponenten oder Props mit ",(0,i.jsx)(n.code,{children:"@deprecated"}),"-Tags."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Changelog"}),": F\xfchre ein Changelog f\xfcr alle \xc4nderungen."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"qualit\xe4tssicherung",children:"Qualit\xe4tssicherung"}),"\n",(0,i.jsx)(n.p,{children:"Jede Komponente sollte folgende Qualit\xe4tskriterien erf\xfcllen:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Vollst\xe4ndige Tests"}),": Unit-Tests und Barrierefreiheitstests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storybook-Dokumentation"}),": Vollst\xe4ndige Storybook-Geschichten"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TypeScript"}),": Vollst\xe4ndige Typisierung"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Barrierefreiheit"}),": WCAG 2.1 AA-konform"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Optimiert f\xfcr Leistung und B\xfcndelgr\xf6\xdfe"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);